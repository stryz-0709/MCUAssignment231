
trafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003320  08003320  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  08003320  08003320  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003320  08003320  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08003328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  200000c4  080033ec  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080033ec  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc6d  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002277  00000000  00000000  0002dd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00030d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bde  00000000  00000000  00031908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100e7  00000000  00000000  000494e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cde  00000000  00000000  000595cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e02ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003494  00000000  00000000  000e0300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	080032dc 	.word	0x080032dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	080032dc 	.word	0x080032dc

0800014c <isButtonPressed>:
int KeyReg1 [4] = {NORMAL_STATE};
int KeyReg2 [4] = {NORMAL_STATE};
int KeyReg3 [4] = {NORMAL_STATE};
int TimerForKeyPress [4] = {500};

int isButtonPressed(int button){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[button]){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d006      	beq.n	800016e <isButtonPressed+0x22>
		button_flag[button] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000e0 	.word	0x200000e0

08000180 <subKeyProcess>:

void subKeyProcess(int button){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[button] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000e0 	.word	0x200000e0

080001a0 <getKeyInput>:


void getKeyInput(int button){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	KeyReg0[button] = KeyReg1[button];
 80001a8:	4a37      	ldr	r2, [pc, #220]	; (8000288 <getKeyInput+0xe8>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	4936      	ldr	r1, [pc, #216]	; (800028c <getKeyInput+0xec>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[button] = KeyReg2[button];
 80001b8:	4a35      	ldr	r2, [pc, #212]	; (8000290 <getKeyInput+0xf0>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4931      	ldr	r1, [pc, #196]	; (8000288 <getKeyInput+0xe8>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[button] = HAL_GPIO_ReadPin(BUTTON_PORT[button], BUTTON_PIN[button]);
 80001c8:	4a32      	ldr	r2, [pc, #200]	; (8000294 <getKeyInput+0xf4>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d0:	4931      	ldr	r1, [pc, #196]	; (8000298 <getKeyInput+0xf8>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001d8:	4619      	mov	r1, r3
 80001da:	4610      	mov	r0, r2
 80001dc:	f001 facc 	bl	8001778 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4619      	mov	r1, r3
 80001e4:	4a2a      	ldr	r2, [pc, #168]	; (8000290 <getKeyInput+0xf0>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if ((KeyReg0[button] == KeyReg1[button]) && (KeyReg1[button] == KeyReg2[button])){
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <getKeyInput+0xec>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	4924      	ldr	r1, [pc, #144]	; (8000288 <getKeyInput+0xe8>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d13f      	bne.n	8000280 <getKeyInput+0xe0>
 8000200:	4a21      	ldr	r2, [pc, #132]	; (8000288 <getKeyInput+0xe8>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4921      	ldr	r1, [pc, #132]	; (8000290 <getKeyInput+0xf0>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000210:	429a      	cmp	r2, r3
 8000212:	d135      	bne.n	8000280 <getKeyInput+0xe0>
		if (KeyReg3[button] != KeyReg2[button]){
 8000214:	4a21      	ldr	r2, [pc, #132]	; (800029c <getKeyInput+0xfc>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	491c      	ldr	r1, [pc, #112]	; (8000290 <getKeyInput+0xf0>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000224:	429a      	cmp	r2, r3
 8000226:	d017      	beq.n	8000258 <getKeyInput+0xb8>
			KeyReg3[button] = KeyReg2[button];
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <getKeyInput+0xf0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	491a      	ldr	r1, [pc, #104]	; (800029c <getKeyInput+0xfc>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg2[button] == PRESSED_STATE){
 8000238:	4a15      	ldr	r2, [pc, #84]	; (8000290 <getKeyInput+0xf0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d11d      	bne.n	8000280 <getKeyInput+0xe0>
				subKeyProcess(button);
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f7ff ff9b 	bl	8000180 <subKeyProcess>
				TimerForKeyPress[button] = 500;
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <getKeyInput+0x100>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
				KeyReg3[button] = NORMAL_STATE;
			}
		}
	}
}
 8000256:	e013      	b.n	8000280 <getKeyInput+0xe0>
			TimerForKeyPress[button]--;
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <getKeyInput+0x100>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	1e5a      	subs	r2, r3, #1
 8000262:	490f      	ldr	r1, [pc, #60]	; (80002a0 <getKeyInput+0x100>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
 800026a:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <getKeyInput+0x100>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	dc04      	bgt.n	8000280 <getKeyInput+0xe0>
				KeyReg3[button] = NORMAL_STATE;
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <getKeyInput+0xfc>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000028 	.word	0x20000028
 800028c:	20000018 	.word	0x20000018
 8000290:	20000038 	.word	0x20000038
 8000294:	20000000 	.word	0x20000000
 8000298:	20000010 	.word	0x20000010
 800029c:	20000048 	.word	0x20000048
 80002a0:	20000058 	.word	0x20000058

080002a4 <displayCountdown>:
 *      Author: minht
 */

#include "fsm_automatic.h"

void displayCountdown(int lane){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	if (timer_counter[lane] % 100 == 0){
 80002ac:	4a16      	ldr	r2, [pc, #88]	; (8000308 <displayCountdown+0x64>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <displayCountdown+0x68>)
 80002b6:	fb83 1302 	smull	r1, r3, r3, r2
 80002ba:	1159      	asrs	r1, r3, #5
 80002bc:	17d3      	asrs	r3, r2, #31
 80002be:	1acb      	subs	r3, r1, r3
 80002c0:	2164      	movs	r1, #100	; 0x64
 80002c2:	fb01 f303 	mul.w	r3, r1, r3
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d119      	bne.n	8000300 <displayCountdown+0x5c>
		int remaining_time = timer_counter[lane] / 100;
 80002cc:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <displayCountdown+0x64>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <displayCountdown+0x68>)
 80002d6:	fb82 1203 	smull	r1, r2, r2, r3
 80002da:	1152      	asrs	r2, r2, #5
 80002dc:	17db      	asrs	r3, r3, #31
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	60fb      	str	r3, [r7, #12]
		displayUART(AUTO_MODE, remaining_time % 10);
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <displayCountdown+0x6c>)
 80002e6:	fb83 1302 	smull	r1, r3, r3, r2
 80002ea:	1099      	asrs	r1, r3, #2
 80002ec:	17d3      	asrs	r3, r2, #31
 80002ee:	1ac9      	subs	r1, r1, r3
 80002f0:	460b      	mov	r3, r1
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	440b      	add	r3, r1
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	1ad1      	subs	r1, r2, r3
 80002fa:	200b      	movs	r0, #11
 80002fc:	f000 fe44 	bl	8000f88 <displayUART>
	}
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	200000f4 	.word	0x200000f4
 800030c:	51eb851f 	.word	0x51eb851f
 8000310:	66666667 	.word	0x66666667

08000314 <initDuration>:


int initMode[3] = {RED_MODE, GREEN_MODE, EDIT_MODE};
int initDuration(int lane){
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	return (lane == 1)? GREEN_DURATION : RED_DURATION;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d102      	bne.n	8000328 <initDuration+0x14>
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <initDuration+0x24>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	e001      	b.n	800032c <initDuration+0x18>
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <initDuration+0x28>)
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000090 	.word	0x20000090
 800033c:	20000088 	.word	0x20000088

08000340 <fsm_automatic_run>:

void fsm_automatic_run(int lane){
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	switch(LED_MODE[lane]){
 8000348:	4a5c      	ldr	r2, [pc, #368]	; (80004bc <fsm_automatic_run+0x17c>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000350:	3b01      	subs	r3, #1
 8000352:	2b16      	cmp	r3, #22
 8000354:	f200 80a7 	bhi.w	80004a6 <fsm_automatic_run+0x166>
 8000358:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <fsm_automatic_run+0x20>)
 800035a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035e:	bf00      	nop
 8000360:	080003bd 	.word	0x080003bd
 8000364:	080004a7 	.word	0x080004a7
 8000368:	080004a7 	.word	0x080004a7
 800036c:	080004a7 	.word	0x080004a7
 8000370:	080004a7 	.word	0x080004a7
 8000374:	080004a7 	.word	0x080004a7
 8000378:	080004a7 	.word	0x080004a7
 800037c:	080004a7 	.word	0x080004a7
 8000380:	080004a7 	.word	0x080004a7
 8000384:	080004a7 	.word	0x080004a7
 8000388:	080004a7 	.word	0x080004a7
 800038c:	080004a7 	.word	0x080004a7
 8000390:	080004a7 	.word	0x080004a7
 8000394:	080004a7 	.word	0x080004a7
 8000398:	080004a7 	.word	0x080004a7
 800039c:	080004a7 	.word	0x080004a7
 80003a0:	080004a7 	.word	0x080004a7
 80003a4:	080004a7 	.word	0x080004a7
 80003a8:	080004a7 	.word	0x080004a7
 80003ac:	080004a7 	.word	0x080004a7
 80003b0:	080003ed 	.word	0x080003ed
 80003b4:	08000469 	.word	0x08000469
 80003b8:	0800042b 	.word	0x0800042b
		case INIT:
			setTrafficLight(lane, INIT);
 80003bc:	2101      	movs	r1, #1
 80003be:	6878      	ldr	r0, [r7, #4]
 80003c0:	f000 fcd4 	bl	8000d6c <setTrafficLight>
			LED_MODE[lane] = initMode[lane];
 80003c4:	4a3e      	ldr	r2, [pc, #248]	; (80004c0 <fsm_automatic_run+0x180>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003cc:	493b      	ldr	r1, [pc, #236]	; (80004bc <fsm_automatic_run+0x17c>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setTimer(lane, initDuration(lane)*100);
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff ff9d 	bl	8000314 <initDuration>
 80003da:	4603      	mov	r3, r0
 80003dc:	2264      	movs	r2, #100	; 0x64
 80003de:	fb02 f303 	mul.w	r3, r2, r3
 80003e2:	4619      	mov	r1, r3
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f000 fb75 	bl	8000ad4 <setTimer>
			break;
 80003ea:	e063      	b.n	80004b4 <fsm_automatic_run+0x174>
		case RED_MODE:
			if (lane == 0) displayCountdown(lane);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d102      	bne.n	80003f8 <fsm_automatic_run+0xb8>
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f7ff ff56 	bl	80002a4 <displayCountdown>

			setTrafficLight(lane, RED_MODE);
 80003f8:	2115      	movs	r1, #21
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f000 fcb6 	bl	8000d6c <setTrafficLight>

			if(timer_flag[lane]){
 8000400:	4a30      	ldr	r2, [pc, #192]	; (80004c4 <fsm_automatic_run+0x184>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d04e      	beq.n	80004aa <fsm_automatic_run+0x16a>
				LED_MODE[lane] = GREEN_MODE;
 800040c:	4a2b      	ldr	r2, [pc, #172]	; (80004bc <fsm_automatic_run+0x17c>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2117      	movs	r1, #23
 8000412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 8000416:	4b2c      	ldr	r3, [pc, #176]	; (80004c8 <fsm_automatic_run+0x188>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2264      	movs	r2, #100	; 0x64
 800041c:	fb02 f303 	mul.w	r3, r2, r3
 8000420:	4619      	mov	r1, r3
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f000 fb56 	bl	8000ad4 <setTimer>
			}
			break;
 8000428:	e03f      	b.n	80004aa <fsm_automatic_run+0x16a>
		case GREEN_MODE:
			if (lane == 0) displayCountdown(lane);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d102      	bne.n	8000436 <fsm_automatic_run+0xf6>
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f7ff ff37 	bl	80002a4 <displayCountdown>

			setTrafficLight(lane, GREEN_MODE);
 8000436:	2117      	movs	r1, #23
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f000 fc97 	bl	8000d6c <setTrafficLight>

			if(timer_flag[lane]){
 800043e:	4a21      	ldr	r2, [pc, #132]	; (80004c4 <fsm_automatic_run+0x184>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d031      	beq.n	80004ae <fsm_automatic_run+0x16e>
				LED_MODE[lane] = AMBER_MODE;
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <fsm_automatic_run+0x17c>)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2116      	movs	r1, #22
 8000450:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, YELLOW_DURATION*100);
 8000454:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <fsm_automatic_run+0x18c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2264      	movs	r2, #100	; 0x64
 800045a:	fb02 f303 	mul.w	r3, r2, r3
 800045e:	4619      	mov	r1, r3
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f000 fb37 	bl	8000ad4 <setTimer>
			}
			break;
 8000466:	e022      	b.n	80004ae <fsm_automatic_run+0x16e>
		case AMBER_MODE:
			if (lane == 0) displayCountdown(lane);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d102      	bne.n	8000474 <fsm_automatic_run+0x134>
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff18 	bl	80002a4 <displayCountdown>

			setTrafficLight(lane, AMBER_MODE);
 8000474:	2116      	movs	r1, #22
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 fc78 	bl	8000d6c <setTrafficLight>

			if(timer_flag[lane]){
 800047c:	4a11      	ldr	r2, [pc, #68]	; (80004c4 <fsm_automatic_run+0x184>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d014      	beq.n	80004b2 <fsm_automatic_run+0x172>
				LED_MODE[lane] = RED_MODE;
 8000488:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <fsm_automatic_run+0x17c>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2115      	movs	r1, #21
 800048e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <fsm_automatic_run+0x190>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2264      	movs	r2, #100	; 0x64
 8000498:	fb02 f303 	mul.w	r3, r2, r3
 800049c:	4619      	mov	r1, r3
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f000 fb18 	bl	8000ad4 <setTimer>
			}
			break;
 80004a4:	e005      	b.n	80004b2 <fsm_automatic_run+0x172>
		case EDIT_MODE:
			break;
		default:
			break;
 80004a6:	bf00      	nop
 80004a8:	e004      	b.n	80004b4 <fsm_automatic_run+0x174>
			break;
 80004aa:	bf00      	nop
 80004ac:	e002      	b.n	80004b4 <fsm_automatic_run+0x174>
			break;
 80004ae:	bf00      	nop
 80004b0:	e000      	b.n	80004b4 <fsm_automatic_run+0x174>
			break;
 80004b2:	bf00      	nop
	}
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000074 	.word	0x20000074
 80004c0:	20000068 	.word	0x20000068
 80004c4:	20000104 	.word	0x20000104
 80004c8:	20000090 	.word	0x20000090
 80004cc:	2000008c 	.word	0x2000008c
 80004d0:	20000088 	.word	0x20000088

080004d4 <changeMode>:

#include "fsm_manual.h"

int tempDuration = 0;

void changeMode(int mode, int ledMode){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
	LED_MODE[0] = ledMode;
 80004de:	4a0c      	ldr	r2, [pc, #48]	; (8000510 <changeMode+0x3c>)
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	6013      	str	r3, [r2, #0]
	LED_MODE[1] = ledMode;
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <changeMode+0x3c>)
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	6053      	str	r3, [r2, #4]
	setTrafficLight(0, INIT);
 80004ea:	2101      	movs	r1, #1
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fc3d 	bl	8000d6c <setTrafficLight>
	setTrafficLight(1, INIT);
 80004f2:	2101      	movs	r1, #1
 80004f4:	2001      	movs	r0, #1
 80004f6:	f000 fc39 	bl	8000d6c <setTrafficLight>
	MODE = mode;
 80004fa:	4a06      	ldr	r2, [pc, #24]	; (8000514 <changeMode+0x40>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6013      	str	r3, [r2, #0]
	setTimer(3, 25);
 8000500:	2119      	movs	r1, #25
 8000502:	2003      	movs	r0, #3
 8000504:	f000 fae6 	bl	8000ad4 <setTimer>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000074 	.word	0x20000074
 8000514:	20000080 	.word	0x20000080

08000518 <displayMode>:

void displayMode(int mode, int duration){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
	displayUART(mode, duration);
 8000522:	6839      	ldr	r1, [r7, #0]
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 fd2f 	bl	8000f88 <displayUART>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <fsm_manual_run>:

void fsm_manual_run(){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	switch(MODE){
 8000538:	4b7f      	ldr	r3, [pc, #508]	; (8000738 <fsm_manual_run+0x204>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3b0b      	subs	r3, #11
 800053e:	2b0c      	cmp	r3, #12
 8000540:	f200 80ee 	bhi.w	8000720 <fsm_manual_run+0x1ec>
 8000544:	a201      	add	r2, pc, #4	; (adr r2, 800054c <fsm_manual_run+0x18>)
 8000546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054a:	bf00      	nop
 800054c:	08000581 	.word	0x08000581
 8000550:	08000721 	.word	0x08000721
 8000554:	08000721 	.word	0x08000721
 8000558:	08000721 	.word	0x08000721
 800055c:	08000721 	.word	0x08000721
 8000560:	08000721 	.word	0x08000721
 8000564:	08000721 	.word	0x08000721
 8000568:	08000721 	.word	0x08000721
 800056c:	08000721 	.word	0x08000721
 8000570:	08000721 	.word	0x08000721
 8000574:	080005a1 	.word	0x080005a1
 8000578:	08000625 	.word	0x08000625
 800057c:	080006a7 	.word	0x080006a7
		case AUTO_MODE:
			if (isButtonPressed(0)){
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff fde3 	bl	800014c <isButtonPressed>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	f000 80cb 	beq.w	8000724 <fsm_manual_run+0x1f0>
				tempDuration = RED_DURATION;
 800058e:	4b6b      	ldr	r3, [pc, #428]	; (800073c <fsm_manual_run+0x208>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a6b      	ldr	r2, [pc, #428]	; (8000740 <fsm_manual_run+0x20c>)
 8000594:	6013      	str	r3, [r2, #0]
				changeMode(RED_MODE, EDIT_MODE);
 8000596:	210c      	movs	r1, #12
 8000598:	2015      	movs	r0, #21
 800059a:	f7ff ff9b 	bl	80004d4 <changeMode>
			}
			break;
 800059e:	e0c1      	b.n	8000724 <fsm_manual_run+0x1f0>
		case RED_MODE:
			displayMode(RED_MODE, tempDuration);
 80005a0:	4b67      	ldr	r3, [pc, #412]	; (8000740 <fsm_manual_run+0x20c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	2015      	movs	r0, #21
 80005a8:	f7ff ffb6 	bl	8000518 <displayMode>
			if (isButtonPressed(0)){
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff fdcd 	bl	800014c <isButtonPressed>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d007      	beq.n	80005c8 <fsm_manual_run+0x94>
				tempDuration = YELLOW_DURATION;
 80005b8:	4b62      	ldr	r3, [pc, #392]	; (8000744 <fsm_manual_run+0x210>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a60      	ldr	r2, [pc, #384]	; (8000740 <fsm_manual_run+0x20c>)
 80005be:	6013      	str	r3, [r2, #0]
				changeMode(AMBER_MODE, EDIT_MODE);
 80005c0:	210c      	movs	r1, #12
 80005c2:	2016      	movs	r0, #22
 80005c4:	f7ff ff86 	bl	80004d4 <changeMode>
			}
			if (isButtonPressed(1)){
 80005c8:	2001      	movs	r0, #1
 80005ca:	f7ff fdbf 	bl	800014c <isButtonPressed>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <fsm_manual_run+0xb8>
				tempDuration++;
 80005d4:	4b5a      	ldr	r3, [pc, #360]	; (8000740 <fsm_manual_run+0x20c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	4a59      	ldr	r2, [pc, #356]	; (8000740 <fsm_manual_run+0x20c>)
 80005dc:	6013      	str	r3, [r2, #0]
				if (tempDuration == 100) tempDuration = 1;
 80005de:	4b58      	ldr	r3, [pc, #352]	; (8000740 <fsm_manual_run+0x20c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b64      	cmp	r3, #100	; 0x64
 80005e4:	d102      	bne.n	80005ec <fsm_manual_run+0xb8>
 80005e6:	4b56      	ldr	r3, [pc, #344]	; (8000740 <fsm_manual_run+0x20c>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(2)){
 80005ec:	2002      	movs	r0, #2
 80005ee:	f7ff fdad 	bl	800014c <isButtonPressed>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d003      	beq.n	8000600 <fsm_manual_run+0xcc>
				RED_DURATION = tempDuration;
 80005f8:	4b51      	ldr	r3, [pc, #324]	; (8000740 <fsm_manual_run+0x20c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a4f      	ldr	r2, [pc, #316]	; (800073c <fsm_manual_run+0x208>)
 80005fe:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[2]){
 8000600:	4b51      	ldr	r3, [pc, #324]	; (8000748 <fsm_manual_run+0x214>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	2b00      	cmp	r3, #0
 8000606:	f000 808f 	beq.w	8000728 <fsm_manual_run+0x1f4>
				toggleLight(0, RED_MODE);
 800060a:	2115      	movs	r1, #21
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fc43 	bl	8000e98 <toggleLight>
				toggleLight(1, RED_MODE);
 8000612:	2115      	movs	r1, #21
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fc3f 	bl	8000e98 <toggleLight>
				setTimer(3, 25);
 800061a:	2119      	movs	r1, #25
 800061c:	2003      	movs	r0, #3
 800061e:	f000 fa59 	bl	8000ad4 <setTimer>
			}
			break;
 8000622:	e081      	b.n	8000728 <fsm_manual_run+0x1f4>
		case AMBER_MODE:
			displayMode(AMBER_MODE, tempDuration);
 8000624:	4b46      	ldr	r3, [pc, #280]	; (8000740 <fsm_manual_run+0x20c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	2016      	movs	r0, #22
 800062c:	f7ff ff74 	bl	8000518 <displayMode>
			if (isButtonPressed(0)){
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff fd8b 	bl	800014c <isButtonPressed>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d007      	beq.n	800064c <fsm_manual_run+0x118>
				tempDuration = GREEN_DURATION;
 800063c:	4b43      	ldr	r3, [pc, #268]	; (800074c <fsm_manual_run+0x218>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a3f      	ldr	r2, [pc, #252]	; (8000740 <fsm_manual_run+0x20c>)
 8000642:	6013      	str	r3, [r2, #0]
				changeMode(GREEN_MODE, EDIT_MODE);
 8000644:	210c      	movs	r1, #12
 8000646:	2017      	movs	r0, #23
 8000648:	f7ff ff44 	bl	80004d4 <changeMode>
			}
			if (isButtonPressed(1)){
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff fd7d 	bl	800014c <isButtonPressed>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00b      	beq.n	8000670 <fsm_manual_run+0x13c>
				tempDuration++;
 8000658:	4b39      	ldr	r3, [pc, #228]	; (8000740 <fsm_manual_run+0x20c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	4a38      	ldr	r2, [pc, #224]	; (8000740 <fsm_manual_run+0x20c>)
 8000660:	6013      	str	r3, [r2, #0]
				if (tempDuration == 100) tempDuration = 1;
 8000662:	4b37      	ldr	r3, [pc, #220]	; (8000740 <fsm_manual_run+0x20c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b64      	cmp	r3, #100	; 0x64
 8000668:	d102      	bne.n	8000670 <fsm_manual_run+0x13c>
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <fsm_manual_run+0x20c>)
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(2)){
 8000670:	2002      	movs	r0, #2
 8000672:	f7ff fd6b 	bl	800014c <isButtonPressed>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d003      	beq.n	8000684 <fsm_manual_run+0x150>
				YELLOW_DURATION = tempDuration;
 800067c:	4b30      	ldr	r3, [pc, #192]	; (8000740 <fsm_manual_run+0x20c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a30      	ldr	r2, [pc, #192]	; (8000744 <fsm_manual_run+0x210>)
 8000682:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[2]){
 8000684:	4b30      	ldr	r3, [pc, #192]	; (8000748 <fsm_manual_run+0x214>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d04f      	beq.n	800072c <fsm_manual_run+0x1f8>
				toggleLight(0, AMBER_MODE);
 800068c:	2116      	movs	r1, #22
 800068e:	2000      	movs	r0, #0
 8000690:	f000 fc02 	bl	8000e98 <toggleLight>
				toggleLight(1, AMBER_MODE);
 8000694:	2116      	movs	r1, #22
 8000696:	2001      	movs	r0, #1
 8000698:	f000 fbfe 	bl	8000e98 <toggleLight>
				setTimer(3, 25);
 800069c:	2119      	movs	r1, #25
 800069e:	2003      	movs	r0, #3
 80006a0:	f000 fa18 	bl	8000ad4 <setTimer>
			}
			break;
 80006a4:	e042      	b.n	800072c <fsm_manual_run+0x1f8>
		case GREEN_MODE:
			displayMode(GREEN_MODE, tempDuration);
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <fsm_manual_run+0x20c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4619      	mov	r1, r3
 80006ac:	2017      	movs	r0, #23
 80006ae:	f7ff ff33 	bl	8000518 <displayMode>
			if (isButtonPressed(0)){
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fd4a 	bl	800014c <isButtonPressed>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d003      	beq.n	80006c6 <fsm_manual_run+0x192>
				changeMode(AUTO_MODE, INIT);
 80006be:	2101      	movs	r1, #1
 80006c0:	200b      	movs	r0, #11
 80006c2:	f7ff ff07 	bl	80004d4 <changeMode>
			}
			if (isButtonPressed(1)){
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff fd40 	bl	800014c <isButtonPressed>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00b      	beq.n	80006ea <fsm_manual_run+0x1b6>
				tempDuration++;
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <fsm_manual_run+0x20c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	4a19      	ldr	r2, [pc, #100]	; (8000740 <fsm_manual_run+0x20c>)
 80006da:	6013      	str	r3, [r2, #0]
				if (tempDuration == 100) tempDuration = 1;
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <fsm_manual_run+0x20c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b64      	cmp	r3, #100	; 0x64
 80006e2:	d102      	bne.n	80006ea <fsm_manual_run+0x1b6>
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <fsm_manual_run+0x20c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(2)){
 80006ea:	2002      	movs	r0, #2
 80006ec:	f7ff fd2e 	bl	800014c <isButtonPressed>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <fsm_manual_run+0x1ca>
				GREEN_DURATION = tempDuration;
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <fsm_manual_run+0x20c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <fsm_manual_run+0x218>)
 80006fc:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[2]){
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <fsm_manual_run+0x214>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d014      	beq.n	8000730 <fsm_manual_run+0x1fc>
				toggleLight(0, GREEN_MODE);
 8000706:	2117      	movs	r1, #23
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fbc5 	bl	8000e98 <toggleLight>
				toggleLight(1, GREEN_MODE);
 800070e:	2117      	movs	r1, #23
 8000710:	2001      	movs	r0, #1
 8000712:	f000 fbc1 	bl	8000e98 <toggleLight>
				setTimer(3, 25);
 8000716:	2119      	movs	r1, #25
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f9db 	bl	8000ad4 <setTimer>
			}
			break;
 800071e:	e007      	b.n	8000730 <fsm_manual_run+0x1fc>
		default:
			 break;
 8000720:	bf00      	nop
 8000722:	e006      	b.n	8000732 <fsm_manual_run+0x1fe>
			break;
 8000724:	bf00      	nop
 8000726:	e004      	b.n	8000732 <fsm_manual_run+0x1fe>
			break;
 8000728:	bf00      	nop
 800072a:	e002      	b.n	8000732 <fsm_manual_run+0x1fe>
			break;
 800072c:	bf00      	nop
 800072e:	e000      	b.n	8000732 <fsm_manual_run+0x1fe>
			break;
 8000730:	bf00      	nop
	}
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000080 	.word	0x20000080
 800073c:	20000088 	.word	0x20000088
 8000740:	200000f0 	.word	0x200000f0
 8000744:	2000008c 	.word	0x2000008c
 8000748:	20000104 	.word	0x20000104
 800074c:	20000090 	.word	0x20000090

08000750 <changePedMode>:
 *      Author: minht
 */

#include "fsm_ped.h"

void changePedMode(int mode){
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	TRAFFIC_MODE = mode;
 8000758:	4a03      	ldr	r2, [pc, #12]	; (8000768 <changePedMode+0x18>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6013      	str	r3, [r2, #0]
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	20000084 	.word	0x20000084

0800076c <fsm_ped_run>:

void fsm_ped_run(){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	switch(TRAFFIC_MODE){
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <fsm_ped_run+0x68>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b0b      	cmp	r3, #11
 8000776:	d015      	beq.n	80007a4 <fsm_ped_run+0x38>
 8000778:	2b0c      	cmp	r3, #12
 800077a:	d124      	bne.n	80007c6 <fsm_ped_run+0x5a>
		case EDIT_MODE:
			//TODO


			if (isButtonPressed(3)){
 800077c:	2003      	movs	r0, #3
 800077e:	f7ff fce5 	bl	800014c <isButtonPressed>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d020      	beq.n	80007ca <fsm_ped_run+0x5e>
				setTimer(2, timer_counter[0]);
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <fsm_ped_run+0x6c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	2002      	movs	r0, #2
 8000790:	f000 f9a0 	bl	8000ad4 <setTimer>
				LED_MODE[2] = LED_MODE[0];
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <fsm_ped_run+0x70>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a10      	ldr	r2, [pc, #64]	; (80007dc <fsm_ped_run+0x70>)
 800079a:	6093      	str	r3, [r2, #8]
				changePedMode(AUTO_MODE);
 800079c:	200b      	movs	r0, #11
 800079e:	f7ff ffd7 	bl	8000750 <changePedMode>
			}
			break;
 80007a2:	e012      	b.n	80007ca <fsm_ped_run+0x5e>
		case AUTO_MODE:
			//TODO

			if (isButtonPressed(3)){
 80007a4:	2003      	movs	r0, #3
 80007a6:	f7ff fcd1 	bl	800014c <isButtonPressed>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00e      	beq.n	80007ce <fsm_ped_run+0x62>
				LED_MODE[2] = EDIT_MODE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <fsm_ped_run+0x70>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	609a      	str	r2, [r3, #8]
				setTrafficLight(2, INIT);
 80007b6:	2101      	movs	r1, #1
 80007b8:	2002      	movs	r0, #2
 80007ba:	f000 fad7 	bl	8000d6c <setTrafficLight>
				changePedMode(EDIT_MODE);
 80007be:	200c      	movs	r0, #12
 80007c0:	f7ff ffc6 	bl	8000750 <changePedMode>
			}
			break;
 80007c4:	e003      	b.n	80007ce <fsm_ped_run+0x62>
		default:
			break;
 80007c6:	bf00      	nop
 80007c8:	e002      	b.n	80007d0 <fsm_ped_run+0x64>
			break;
 80007ca:	bf00      	nop
 80007cc:	e000      	b.n	80007d0 <fsm_ped_run+0x64>
			break;
 80007ce:	bf00      	nop
	}
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000084 	.word	0x20000084
 80007d8:	200000f4 	.word	0x200000f4
 80007dc:	20000074 	.word	0x20000074

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f000 fc22 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e8:	f000 f826 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f000 f8dc 	bl	80009a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007f0:	f000 f864 	bl	80008bc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007f4:	f000 f8ae 	bl	8000954 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007f8:	480e      	ldr	r0, [pc, #56]	; (8000834 <main+0x54>)
 80007fa:	f001 fc63 	bl	80020c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTrafficLight(0, INIT);
 80007fe:	2101      	movs	r1, #1
 8000800:	2000      	movs	r0, #0
 8000802:	f000 fab3 	bl	8000d6c <setTrafficLight>
  setTrafficLight(1, INIT);
 8000806:	2101      	movs	r1, #1
 8000808:	2001      	movs	r0, #1
 800080a:	f000 faaf 	bl	8000d6c <setTrafficLight>
  setTrafficLight(2, INIT);
 800080e:	2101      	movs	r1, #1
 8000810:	2002      	movs	r0, #2
 8000812:	f000 faab 	bl	8000d6c <setTrafficLight>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_ped_run();
 8000816:	f7ff ffa9 	bl	800076c <fsm_ped_run>
	  fsm_manual_run();
 800081a:	f7ff fe8b 	bl	8000534 <fsm_manual_run>
	  fsm_automatic_run(0);
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fd8e 	bl	8000340 <fsm_automatic_run>
	  fsm_automatic_run(1);
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff fd8b 	bl	8000340 <fsm_automatic_run>
	  fsm_automatic_run(2);
 800082a:	2002      	movs	r0, #2
 800082c:	f7ff fd88 	bl	8000340 <fsm_automatic_run>
	  fsm_ped_run();
 8000830:	e7f1      	b.n	8000816 <main+0x36>
 8000832:	bf00      	nop
 8000834:	20000114 	.word	0x20000114

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b090      	sub	sp, #64	; 0x40
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0318 	add.w	r3, r7, #24
 8000842:	2228      	movs	r2, #40	; 0x28
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fd40 	bl	80032cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085a:	2302      	movs	r3, #2
 800085c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085e:	2301      	movs	r3, #1
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000862:	2310      	movs	r3, #16
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800086a:	2300      	movs	r3, #0
 800086c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800086e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0318 	add.w	r3, r7, #24
 8000878:	4618      	mov	r0, r3
 800087a:	f000 ffc5 	bl	8001808 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000884:	f000 f920 	bl	8000ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2302      	movs	r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2102      	movs	r1, #2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fa30 	bl	8001d08 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008ae:	f000 f90b 	bl	8000ac8 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3740      	adds	r7, #64	; 0x40
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_TIM2_Init+0x94>)
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_TIM2_Init+0x94>)
 80008e2:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80008e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_TIM2_Init+0x94>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_TIM2_Init+0x94>)
 80008f0:	2263      	movs	r2, #99	; 0x63
 80008f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_TIM2_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_TIM2_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000900:	4813      	ldr	r0, [pc, #76]	; (8000950 <MX_TIM2_Init+0x94>)
 8000902:	f001 fb8f 	bl	8002024 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800090c:	f000 f8dc 	bl	8000ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_TIM2_Init+0x94>)
 800091e:	f001 fd2b 	bl	8002378 <HAL_TIM_ConfigClockSource>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000928:	f000 f8ce 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_TIM2_Init+0x94>)
 800093a:	f001 ff01 	bl	8002740 <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000944:	f000 f8c0 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000114 	.word	0x20000114

08000954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MX_USART2_UART_Init+0x50>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000960:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800098c:	f001 ff48 	bl	8002820 <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000996:	f000 f897 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000015c 	.word	0x2000015c
 80009a4:	40004400 	.word	0x40004400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <MX_GPIO_Init+0xe8>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a33      	ldr	r2, [pc, #204]	; (8000a90 <MX_GPIO_Init+0xe8>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <MX_GPIO_Init+0xe8>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <MX_GPIO_Init+0xe8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a2d      	ldr	r2, [pc, #180]	; (8000a90 <MX_GPIO_Init+0xe8>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <MX_GPIO_Init+0xe8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Ped_LIGHT2_Pin|D2_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80009f2:	4828      	ldr	r0, [pc, #160]	; (8000a94 <MX_GPIO_Init+0xec>)
 80009f4:	f000 fed7 	bl	80017a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ped_LIGHT1_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80009fe:	4826      	ldr	r0, [pc, #152]	; (8000a98 <MX_GPIO_Init+0xf0>)
 8000a00:	f000 fed1 	bl	80017a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Ped_BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = Ped_BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000a04:	2313      	movs	r3, #19
 8000a06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4619      	mov	r1, r3
 8000a16:	481f      	ldr	r0, [pc, #124]	; (8000a94 <MX_GPIO_Init+0xec>)
 8000a18:	f000 fd2a 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Ped_LIGHT2_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Ped_LIGHT2_Pin|D2_Pin;
 8000a1c:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000a20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	4619      	mov	r1, r3
 8000a34:	4817      	ldr	r0, [pc, #92]	; (8000a94 <MX_GPIO_Init+0xec>)
 8000a36:	f000 fd1b 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a3a:	2340      	movs	r3, #64	; 0x40
 8000a3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2302      	movs	r3, #2
 8000a44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_GPIO_Init+0xec>)
 8000a4e:	f000 fd0f 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000a52:	2301      	movs	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <MX_GPIO_Init+0xf0>)
 8000a66:	f000 fd03 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ped_LIGHT1_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = Ped_LIGHT1_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000a6a:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_GPIO_Init+0xf0>)
 8000a84:	f000 fcf4 	bl	8001470 <HAL_GPIO_Init>

}
 8000a88:	bf00      	nop
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010800 	.word	0x40010800
 8000a98:	40010c00 	.word	0x40010c00

08000a9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	timerRun();
 8000aa4:	f000 f82e 	bl	8000b04 <timerRun>
	getKeyInput(0);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff fb79 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff fb76 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f7ff fb73 	bl	80001a0 <getKeyInput>
	getKeyInput(3);
 8000aba:	2003      	movs	r0, #3
 8000abc:	f7ff fb70 	bl	80001a0 <getKeyInput>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <setTimer>:
#include "software_timer.h"

int timer_counter [4] = {0};
int timer_flag [4] = {0};

void setTimer(int type, int duration){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	timer_counter[type] = duration;
 8000ade:	4907      	ldr	r1, [pc, #28]	; (8000afc <setTimer+0x28>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[type] = 0;
 8000ae8:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <setTimer+0x2c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2100      	movs	r1, #0
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	200000f4 	.word	0x200000f4
 8000b00:	20000104 	.word	0x20000104

08000b04 <timerRun>:

void timerRun(){
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
	if(timer_counter[0] > 0){
 8000b08:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <timerRun+0x8c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	dd0b      	ble.n	8000b28 <timerRun+0x24>
		timer_counter[0]--;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <timerRun+0x8c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	4a1e      	ldr	r2, [pc, #120]	; (8000b90 <timerRun+0x8c>)
 8000b18:	6013      	str	r3, [r2, #0]
		if(timer_counter[0] <= 0){
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <timerRun+0x8c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	dc02      	bgt.n	8000b28 <timerRun+0x24>
			timer_flag[0] = 1;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <timerRun+0x90>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter[1] > 0){
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <timerRun+0x8c>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	dd0b      	ble.n	8000b48 <timerRun+0x44>
		timer_counter[1]--;
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <timerRun+0x8c>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <timerRun+0x8c>)
 8000b38:	6053      	str	r3, [r2, #4]
		if(timer_counter[1] <= 0){
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <timerRun+0x8c>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	dc02      	bgt.n	8000b48 <timerRun+0x44>
			timer_flag[1] = 1;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <timerRun+0x90>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	605a      	str	r2, [r3, #4]
		}
	}
	if(timer_counter[2] > 0){
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <timerRun+0x8c>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd0b      	ble.n	8000b68 <timerRun+0x64>
		timer_counter[2]--;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <timerRun+0x8c>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <timerRun+0x8c>)
 8000b58:	6093      	str	r3, [r2, #8]
		if(timer_counter[2] <= 0){
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <timerRun+0x8c>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	dc02      	bgt.n	8000b68 <timerRun+0x64>
			timer_flag[2] = 1;
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <timerRun+0x90>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	609a      	str	r2, [r3, #8]
		}
	}
	if(timer_counter[3] > 0){
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <timerRun+0x8c>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	dd0b      	ble.n	8000b88 <timerRun+0x84>
		timer_counter[3]--;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <timerRun+0x8c>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <timerRun+0x8c>)
 8000b78:	60d3      	str	r3, [r2, #12]
		if(timer_counter[3] <= 0){
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <timerRun+0x8c>)
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	dc02      	bgt.n	8000b88 <timerRun+0x84>
			timer_flag[3] = 1;
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <timerRun+0x90>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	60da      	str	r2, [r3, #12]
		}
	}
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	200000f4 	.word	0x200000f4
 8000b94:	20000104 	.word	0x20000104

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	61d3      	str	r3, [r2, #28]
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_MspInit+0x60>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_MspInit+0x60>)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010000 	.word	0x40010000

08000bfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c0c:	d113      	bne.n	8000c36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_TIM_Base_MspInit+0x44>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <HAL_TIM_Base_MspInit+0x44>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_TIM_Base_MspInit+0x44>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	201c      	movs	r0, #28
 8000c2c:	f000 fb37 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c30:	201c      	movs	r0, #28
 8000c32:	f000 fb50 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d137      	bne.n	8000cd4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_UART_MspInit+0x9c>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x9c>)
 8000c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6e:	61d3      	str	r3, [r2, #28]
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x9c>)
 8000c72:	69db      	ldr	r3, [r3, #28]
 8000c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x9c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x9c>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x9c>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c94:	2304      	movs	r3, #4
 8000c96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <HAL_UART_MspInit+0xa0>)
 8000ca8:	f000 fbe2 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cac:	2308      	movs	r3, #8
 8000cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <HAL_UART_MspInit+0xa0>)
 8000cc0:	f000 fbd6 	bl	8001470 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2026      	movs	r0, #38	; 0x26
 8000cca:	f000 fae8 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cce:	2026      	movs	r0, #38	; 0x26
 8000cd0:	f000 fb01 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010800 	.word	0x40010800

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2e:	f000 f9c3 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <TIM2_IRQHandler+0x10>)
 8000d3e:	f001 fa13 	bl	8002168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000114 	.word	0x20000114

08000d4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <USART2_IRQHandler+0x10>)
 8000d52:	f001 fdb5 	bl	80028c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000015c 	.word	0x2000015c

08000d60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <setTrafficLight>:

uint16_t D_Pin[6] = {D2_Pin, D3_Pin, D4_Pin, D5_Pin, Ped_LIGHT1_Pin, Ped_LIGHT2_Pin};
GPIO_TypeDef *D_Port[6] = {D2_GPIO_Port, D3_GPIO_Port, D4_GPIO_Port, D5_GPIO_Port, Ped_LIGHT1_GPIO_Port, Ped_LIGHT2_GPIO_Port};


void setTrafficLight(int lane, int light){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	switch (light){
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	2b17      	cmp	r3, #23
 8000d7a:	d047      	beq.n	8000e0c <setTrafficLight+0xa0>
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	2b17      	cmp	r3, #23
 8000d80:	dc63      	bgt.n	8000e4a <setTrafficLight+0xde>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	2b15      	cmp	r3, #21
 8000d86:	d003      	beq.n	8000d90 <setTrafficLight+0x24>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	2b16      	cmp	r3, #22
 8000d8c:	d01f      	beq.n	8000dce <setTrafficLight+0x62>
 8000d8e:	e05c      	b.n	8000e4a <setTrafficLight+0xde>
		case RED_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], SET);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4a3e      	ldr	r2, [pc, #248]	; (8000e90 <setTrafficLight+0x124>)
 8000d96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4a3d      	ldr	r2, [pc, #244]	; (8000e94 <setTrafficLight+0x128>)
 8000da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da4:	2201      	movs	r2, #1
 8000da6:	4619      	mov	r1, r3
 8000da8:	f000 fcfd 	bl	80017a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	3301      	adds	r3, #1
 8000db2:	4a37      	ldr	r2, [pc, #220]	; (8000e90 <setTrafficLight+0x124>)
 8000db4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	4a35      	ldr	r2, [pc, #212]	; (8000e94 <setTrafficLight+0x128>)
 8000dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f000 fced 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 8000dcc:	e05c      	b.n	8000e88 <setTrafficLight+0x11c>
		case AMBER_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], SET);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4a2f      	ldr	r2, [pc, #188]	; (8000e90 <setTrafficLight+0x124>)
 8000dd4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <setTrafficLight+0x128>)
 8000dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000de2:	2201      	movs	r2, #1
 8000de4:	4619      	mov	r1, r3
 8000de6:	f000 fcde 	bl	80017a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], SET);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	3301      	adds	r3, #1
 8000df0:	4a27      	ldr	r2, [pc, #156]	; (8000e90 <setTrafficLight+0x124>)
 8000df2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a25      	ldr	r2, [pc, #148]	; (8000e94 <setTrafficLight+0x128>)
 8000dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e02:	2201      	movs	r2, #1
 8000e04:	4619      	mov	r1, r3
 8000e06:	f000 fcce 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 8000e0a:	e03d      	b.n	8000e88 <setTrafficLight+0x11c>
		case GREEN_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <setTrafficLight+0x124>)
 8000e12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <setTrafficLight+0x128>)
 8000e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e20:	2200      	movs	r2, #0
 8000e22:	4619      	mov	r1, r3
 8000e24:	f000 fcbf 	bl	80017a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], SET);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <setTrafficLight+0x124>)
 8000e30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <setTrafficLight+0x128>)
 8000e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e40:	2201      	movs	r2, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	f000 fcaf 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 8000e48:	e01e      	b.n	8000e88 <setTrafficLight+0x11c>
		default:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <setTrafficLight+0x124>)
 8000e50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <setTrafficLight+0x128>)
 8000e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	f000 fca0 	bl	80017a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <setTrafficLight+0x124>)
 8000e6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <setTrafficLight+0x128>)
 8000e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	f000 fc90 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 8000e86:	bf00      	nop
	}
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200000a4 	.word	0x200000a4
 8000e94:	20000098 	.word	0x20000098

08000e98 <toggleLight>:


void toggleLight(int lane, int light){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	switch (light){
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b17      	cmp	r3, #23
 8000ea6:	d047      	beq.n	8000f38 <toggleLight+0xa0>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2b17      	cmp	r3, #23
 8000eac:	dc63      	bgt.n	8000f76 <toggleLight+0xde>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2b15      	cmp	r3, #21
 8000eb2:	d003      	beq.n	8000ebc <toggleLight+0x24>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b16      	cmp	r3, #22
 8000eb8:	d01f      	beq.n	8000efa <toggleLight+0x62>
		case GREEN_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
			break;
		default:
			break;
 8000eba:	e05c      	b.n	8000f76 <toggleLight+0xde>
			HAL_GPIO_TogglePin(D_Port[lane*2], D_Pin[lane*2]);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4a2f      	ldr	r2, [pc, #188]	; (8000f80 <toggleLight+0xe8>)
 8000ec2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	492e      	ldr	r1, [pc, #184]	; (8000f84 <toggleLight+0xec>)
 8000ecc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	f000 fc7f 	bl	80017d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a28      	ldr	r2, [pc, #160]	; (8000f80 <toggleLight+0xe8>)
 8000ee0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <toggleLight+0xec>)
 8000eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f000 fc57 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 8000ef8:	e03e      	b.n	8000f78 <toggleLight+0xe0>
			HAL_GPIO_TogglePin(D_Port[lane*2], D_Pin[lane*2]);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <toggleLight+0xe8>)
 8000f00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	491e      	ldr	r1, [pc, #120]	; (8000f84 <toggleLight+0xec>)
 8000f0a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4610      	mov	r0, r2
 8000f12:	f000 fc60 	bl	80017d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <toggleLight+0xe8>)
 8000f1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	3301      	adds	r3, #1
 8000f28:	4916      	ldr	r1, [pc, #88]	; (8000f84 <toggleLight+0xec>)
 8000f2a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4610      	mov	r0, r2
 8000f32:	f000 fc50 	bl	80017d6 <HAL_GPIO_TogglePin>
			break;
 8000f36:	e01f      	b.n	8000f78 <toggleLight+0xe0>
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <toggleLight+0xe8>)
 8000f3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <toggleLight+0xec>)
 8000f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f000 fc29 	bl	80017a6 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <toggleLight+0xe8>)
 8000f5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	3301      	adds	r3, #1
 8000f66:	4907      	ldr	r1, [pc, #28]	; (8000f84 <toggleLight+0xec>)
 8000f68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4610      	mov	r0, r2
 8000f70:	f000 fc31 	bl	80017d6 <HAL_GPIO_TogglePin>
			break;
 8000f74:	e000      	b.n	8000f78 <toggleLight+0xe0>
			break;
 8000f76:	bf00      	nop
	}
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000a4 	.word	0x200000a4
 8000f84:	20000098 	.word	0x20000098

08000f88 <displayUART>:
 */

#include "uart_timer.h"


void displayUART(int mode, int num){
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3b0b      	subs	r3, #11
 8000f96:	2b0c      	cmp	r3, #12
 8000f98:	d81d      	bhi.n	8000fd6 <displayUART+0x4e>
 8000f9a:	a201      	add	r2, pc, #4	; (adr r2, 8000fa0 <displayUART+0x18>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	08000fd5 	.word	0x08000fd5
 8000fa4:	08000fd7 	.word	0x08000fd7
 8000fa8:	08000fd7 	.word	0x08000fd7
 8000fac:	08000fd7 	.word	0x08000fd7
 8000fb0:	08000fd7 	.word	0x08000fd7
 8000fb4:	08000fd7 	.word	0x08000fd7
 8000fb8:	08000fd7 	.word	0x08000fd7
 8000fbc:	08000fd7 	.word	0x08000fd7
 8000fc0:	08000fd7 	.word	0x08000fd7
 8000fc4:	08000fd7 	.word	0x08000fd7
 8000fc8:	08000fd5 	.word	0x08000fd5
 8000fcc:	08000fd5 	.word	0x08000fd5
 8000fd0:	08000fd5 	.word	0x08000fd5
	switch (mode){
	case AUTO_MODE:
		//TODO

		break;
 8000fd4:	bf00      	nop
		break;
	}



}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe0:	f7ff febe 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fe6:	490c      	ldr	r1, [pc, #48]	; (8001018 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	; (800101c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ffc:	4c09      	ldr	r4, [pc, #36]	; (8001024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100a:	f002 f93b 	bl	8003284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800100e:	f7ff fbe7 	bl	80007e0 <main>
  bx lr
 8001012:	4770      	bx	lr
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800101c:	08003328 	.word	0x08003328
  ldr r2, =_sbss
 8001020:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001024:	200001a8 	.word	0x200001a8

08001028 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC1_2_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_Init+0x28>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_Init+0x28>)
 8001036:	f043 0310 	orr.w	r3, r3, #16
 800103a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 f923 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001042:	200f      	movs	r0, #15
 8001044:	f000 f808 	bl	8001058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001048:	f7ff fda6 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40022000 	.word	0x40022000

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x54>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x58>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f93b 	bl	80012f2 <HAL_SYSTICK_Config>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00e      	b.n	80010a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d80a      	bhi.n	80010a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f000 f903 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_InitTick+0x5c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000094 	.word	0x20000094
 80010b0:	200000c0 	.word	0x200000c0
 80010b4:	200000bc 	.word	0x200000bc

080010b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_IncTick+0x1c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_IncTick+0x20>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a03      	ldr	r2, [pc, #12]	; (80010d8 <HAL_IncTick+0x20>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	200000c0 	.word	0x200000c0
 80010d8:	200001a4 	.word	0x200001a4

080010dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b02      	ldr	r3, [pc, #8]	; (80010ec <HAL_GetTick+0x10>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	200001a4 	.word	0x200001a4

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4906      	ldr	r1, [pc, #24]	; (8001188 <__NVIC_EnableIRQ+0x34>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff90 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff2d 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff42 	bl	8001138 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff90 	bl	80011e0 <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5f 	bl	800118c <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff35 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa2 	bl	8001244 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130a:	b480      	push	{r7}
 800130c:	b085      	sub	sp, #20
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d008      	beq.n	8001334 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2204      	movs	r2, #4
 8001326:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e020      	b.n	8001376 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 020e 	bic.w	r2, r2, #14
 8001342:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135c:	2101      	movs	r1, #1
 800135e:	fa01 f202 	lsl.w	r2, r1, r2
 8001362:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d005      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2204      	movs	r2, #4
 800139c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e051      	b.n	8001448 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 020e 	bic.w	r2, r2, #14
 80013b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a22      	ldr	r2, [pc, #136]	; (8001454 <HAL_DMA_Abort_IT+0xd4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d029      	beq.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a21      	ldr	r2, [pc, #132]	; (8001458 <HAL_DMA_Abort_IT+0xd8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d022      	beq.n	800141e <HAL_DMA_Abort_IT+0x9e>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1f      	ldr	r2, [pc, #124]	; (800145c <HAL_DMA_Abort_IT+0xdc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01a      	beq.n	8001418 <HAL_DMA_Abort_IT+0x98>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <HAL_DMA_Abort_IT+0xe0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d012      	beq.n	8001412 <HAL_DMA_Abort_IT+0x92>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <HAL_DMA_Abort_IT+0xe4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00a      	beq.n	800140c <HAL_DMA_Abort_IT+0x8c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <HAL_DMA_Abort_IT+0xe8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d102      	bne.n	8001406 <HAL_DMA_Abort_IT+0x86>
 8001400:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001404:	e00e      	b.n	8001424 <HAL_DMA_Abort_IT+0xa4>
 8001406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800140a:	e00b      	b.n	8001424 <HAL_DMA_Abort_IT+0xa4>
 800140c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001410:	e008      	b.n	8001424 <HAL_DMA_Abort_IT+0xa4>
 8001412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001416:	e005      	b.n	8001424 <HAL_DMA_Abort_IT+0xa4>
 8001418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141c:	e002      	b.n	8001424 <HAL_DMA_Abort_IT+0xa4>
 800141e:	2310      	movs	r3, #16
 8001420:	e000      	b.n	8001424 <HAL_DMA_Abort_IT+0xa4>
 8001422:	2301      	movs	r3, #1
 8001424:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_DMA_Abort_IT+0xec>)
 8001426:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
    } 
  }
  return status;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40020008 	.word	0x40020008
 8001458:	4002001c 	.word	0x4002001c
 800145c:	40020030 	.word	0x40020030
 8001460:	40020044 	.word	0x40020044
 8001464:	40020058 	.word	0x40020058
 8001468:	4002006c 	.word	0x4002006c
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b08b      	sub	sp, #44	; 0x2c
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001482:	e169      	b.n	8001758 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001484:	2201      	movs	r2, #1
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	429a      	cmp	r2, r3
 800149e:	f040 8158 	bne.w	8001752 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4a9a      	ldr	r2, [pc, #616]	; (8001710 <HAL_GPIO_Init+0x2a0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d05e      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014ac:	4a98      	ldr	r2, [pc, #608]	; (8001710 <HAL_GPIO_Init+0x2a0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d875      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014b2:	4a98      	ldr	r2, [pc, #608]	; (8001714 <HAL_GPIO_Init+0x2a4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d058      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014b8:	4a96      	ldr	r2, [pc, #600]	; (8001714 <HAL_GPIO_Init+0x2a4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d86f      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014be:	4a96      	ldr	r2, [pc, #600]	; (8001718 <HAL_GPIO_Init+0x2a8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d052      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014c4:	4a94      	ldr	r2, [pc, #592]	; (8001718 <HAL_GPIO_Init+0x2a8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d869      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014ca:	4a94      	ldr	r2, [pc, #592]	; (800171c <HAL_GPIO_Init+0x2ac>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d04c      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014d0:	4a92      	ldr	r2, [pc, #584]	; (800171c <HAL_GPIO_Init+0x2ac>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d863      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014d6:	4a92      	ldr	r2, [pc, #584]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d046      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014dc:	4a90      	ldr	r2, [pc, #576]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d85d      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014e2:	2b12      	cmp	r3, #18
 80014e4:	d82a      	bhi.n	800153c <HAL_GPIO_Init+0xcc>
 80014e6:	2b12      	cmp	r3, #18
 80014e8:	d859      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014ea:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <HAL_GPIO_Init+0x80>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	0800156b 	.word	0x0800156b
 80014f4:	08001545 	.word	0x08001545
 80014f8:	08001557 	.word	0x08001557
 80014fc:	08001599 	.word	0x08001599
 8001500:	0800159f 	.word	0x0800159f
 8001504:	0800159f 	.word	0x0800159f
 8001508:	0800159f 	.word	0x0800159f
 800150c:	0800159f 	.word	0x0800159f
 8001510:	0800159f 	.word	0x0800159f
 8001514:	0800159f 	.word	0x0800159f
 8001518:	0800159f 	.word	0x0800159f
 800151c:	0800159f 	.word	0x0800159f
 8001520:	0800159f 	.word	0x0800159f
 8001524:	0800159f 	.word	0x0800159f
 8001528:	0800159f 	.word	0x0800159f
 800152c:	0800159f 	.word	0x0800159f
 8001530:	0800159f 	.word	0x0800159f
 8001534:	0800154d 	.word	0x0800154d
 8001538:	08001561 	.word	0x08001561
 800153c:	4a79      	ldr	r2, [pc, #484]	; (8001724 <HAL_GPIO_Init+0x2b4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d013      	beq.n	800156a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001542:	e02c      	b.n	800159e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	623b      	str	r3, [r7, #32]
          break;
 800154a:	e029      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	3304      	adds	r3, #4
 8001552:	623b      	str	r3, [r7, #32]
          break;
 8001554:	e024      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	3308      	adds	r3, #8
 800155c:	623b      	str	r3, [r7, #32]
          break;
 800155e:	e01f      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	330c      	adds	r3, #12
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e01a      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001572:	2304      	movs	r3, #4
 8001574:	623b      	str	r3, [r7, #32]
          break;
 8001576:	e013      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d105      	bne.n	800158c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001580:	2308      	movs	r3, #8
 8001582:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	611a      	str	r2, [r3, #16]
          break;
 800158a:	e009      	b.n	80015a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800158c:	2308      	movs	r3, #8
 800158e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	615a      	str	r2, [r3, #20]
          break;
 8001596:	e003      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e000      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          break;
 800159e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2bff      	cmp	r3, #255	; 0xff
 80015a4:	d801      	bhi.n	80015aa <HAL_GPIO_Init+0x13a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	e001      	b.n	80015ae <HAL_GPIO_Init+0x13e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3304      	adds	r3, #4
 80015ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2bff      	cmp	r3, #255	; 0xff
 80015b4:	d802      	bhi.n	80015bc <HAL_GPIO_Init+0x14c>
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	e002      	b.n	80015c2 <HAL_GPIO_Init+0x152>
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	3b08      	subs	r3, #8
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	210f      	movs	r1, #15
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	401a      	ands	r2, r3
 80015d4:	6a39      	ldr	r1, [r7, #32]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	431a      	orrs	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80b1 	beq.w	8001752 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015f0:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a4c      	ldr	r2, [pc, #304]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001608:	4a48      	ldr	r2, [pc, #288]	; (800172c <HAL_GPIO_Init+0x2bc>)
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a40      	ldr	r2, [pc, #256]	; (8001730 <HAL_GPIO_Init+0x2c0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d013      	beq.n	800165c <HAL_GPIO_Init+0x1ec>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a3f      	ldr	r2, [pc, #252]	; (8001734 <HAL_GPIO_Init+0x2c4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d00d      	beq.n	8001658 <HAL_GPIO_Init+0x1e8>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a3e      	ldr	r2, [pc, #248]	; (8001738 <HAL_GPIO_Init+0x2c8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d007      	beq.n	8001654 <HAL_GPIO_Init+0x1e4>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a3d      	ldr	r2, [pc, #244]	; (800173c <HAL_GPIO_Init+0x2cc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_GPIO_Init+0x1e0>
 800164c:	2303      	movs	r3, #3
 800164e:	e006      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001650:	2304      	movs	r3, #4
 8001652:	e004      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001654:	2302      	movs	r3, #2
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 800165c:	2300      	movs	r3, #0
 800165e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001660:	f002 0203 	and.w	r2, r2, #3
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	4093      	lsls	r3, r2
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800166e:	492f      	ldr	r1, [pc, #188]	; (800172c <HAL_GPIO_Init+0x2bc>)
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d006      	beq.n	8001696 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001688:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	492c      	ldr	r1, [pc, #176]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]
 8001694:	e006      	b.n	80016a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	43db      	mvns	r3, r3
 800169e:	4928      	ldr	r1, [pc, #160]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	4922      	ldr	r1, [pc, #136]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	491e      	ldr	r1, [pc, #120]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4918      	ldr	r1, [pc, #96]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4914      	ldr	r1, [pc, #80]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d021      	beq.n	8001744 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	490e      	ldr	r1, [pc, #56]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e021      	b.n	8001752 <HAL_GPIO_Init+0x2e2>
 800170e:	bf00      	nop
 8001710:	10320000 	.word	0x10320000
 8001714:	10310000 	.word	0x10310000
 8001718:	10220000 	.word	0x10220000
 800171c:	10210000 	.word	0x10210000
 8001720:	10120000 	.word	0x10120000
 8001724:	10110000 	.word	0x10110000
 8001728:	40021000 	.word	0x40021000
 800172c:	40010000 	.word	0x40010000
 8001730:	40010800 	.word	0x40010800
 8001734:	40010c00 	.word	0x40010c00
 8001738:	40011000 	.word	0x40011000
 800173c:	40011400 	.word	0x40011400
 8001740:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_GPIO_Init+0x304>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	43db      	mvns	r3, r3
 800174c:	4909      	ldr	r1, [pc, #36]	; (8001774 <HAL_GPIO_Init+0x304>)
 800174e:	4013      	ands	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	3301      	adds	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	fa22 f303 	lsr.w	r3, r2, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	f47f ae8e 	bne.w	8001484 <HAL_GPIO_Init+0x14>
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	372c      	adds	r7, #44	; 0x2c
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40010400 	.word	0x40010400

08001778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e001      	b.n	800179a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	807b      	strh	r3, [r7, #2]
 80017b2:	4613      	mov	r3, r2
 80017b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b6:	787b      	ldrb	r3, [r7, #1]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017bc:	887a      	ldrh	r2, [r7, #2]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017c2:	e003      	b.n	80017cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	041a      	lsls	r2, r3, #16
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	611a      	str	r2, [r3, #16]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017e8:	887a      	ldrh	r2, [r7, #2]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4013      	ands	r3, r2
 80017ee:	041a      	lsls	r2, r3, #16
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	400b      	ands	r3, r1
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	611a      	str	r2, [r3, #16]
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e26c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8087 	beq.w	8001936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001828:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b04      	cmp	r3, #4
 8001832:	d00c      	beq.n	800184e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001834:	4b8f      	ldr	r3, [pc, #572]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b08      	cmp	r3, #8
 800183e:	d112      	bne.n	8001866 <HAL_RCC_OscConfig+0x5e>
 8001840:	4b8c      	ldr	r3, [pc, #560]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184c:	d10b      	bne.n	8001866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184e:	4b89      	ldr	r3, [pc, #548]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d06c      	beq.n	8001934 <HAL_RCC_OscConfig+0x12c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d168      	bne.n	8001934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e246      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x76>
 8001870:	4b80      	ldr	r3, [pc, #512]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a7f      	ldr	r2, [pc, #508]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e02e      	b.n	80018dc <HAL_RCC_OscConfig+0xd4>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x98>
 8001886:	4b7b      	ldr	r3, [pc, #492]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a7a      	ldr	r2, [pc, #488]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 800188c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b78      	ldr	r3, [pc, #480]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a77      	ldr	r2, [pc, #476]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e01d      	b.n	80018dc <HAL_RCC_OscConfig+0xd4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0xbc>
 80018aa:	4b72      	ldr	r3, [pc, #456]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a71      	ldr	r2, [pc, #452]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6e      	ldr	r2, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0xd4>
 80018c4:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a6a      	ldr	r2, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a67      	ldr	r2, [pc, #412]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d013      	beq.n	800190c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fbfa 	bl	80010dc <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff fbf6 	bl	80010dc <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	; 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1fa      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0xe4>
 800190a:	e014      	b.n	8001936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fbe6 	bl	80010dc <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fbe2 	bl	80010dc <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1e6      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x10c>
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d063      	beq.n	8001a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001942:	4b4c      	ldr	r3, [pc, #304]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800194e:	4b49      	ldr	r3, [pc, #292]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b08      	cmp	r3, #8
 8001958:	d11c      	bne.n	8001994 <HAL_RCC_OscConfig+0x18c>
 800195a:	4b46      	ldr	r3, [pc, #280]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d116      	bne.n	8001994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_RCC_OscConfig+0x176>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e1ba      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4939      	ldr	r1, [pc, #228]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	e03a      	b.n	8001a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_RCC_OscConfig+0x270>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fb9b 	bl	80010dc <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff fb97 	bl	80010dc <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e19b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4927      	ldr	r1, [pc, #156]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e015      	b.n	8001a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_RCC_OscConfig+0x270>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fb7a 	bl	80010dc <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff fb76 	bl	80010dc <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e17a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d03a      	beq.n	8001a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d019      	beq.n	8001a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a24:	f7ff fb5a 	bl	80010dc <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fb56 	bl	80010dc <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e15a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 facc 	bl	8001fe8 <RCC_Delay>
 8001a50:	e01c      	b.n	8001a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a58:	f7ff fb40 	bl	80010dc <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5e:	e00f      	b.n	8001a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff fb3c 	bl	80010dc <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d908      	bls.n	8001a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e140      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	42420000 	.word	0x42420000
 8001a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	4b9e      	ldr	r3, [pc, #632]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e9      	bne.n	8001a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80a6 	beq.w	8001be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9e:	4b97      	ldr	r3, [pc, #604]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10d      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	4b94      	ldr	r3, [pc, #592]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a93      	ldr	r2, [pc, #588]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b91      	ldr	r3, [pc, #580]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac6:	4b8e      	ldr	r3, [pc, #568]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d118      	bne.n	8001b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad2:	4b8b      	ldr	r3, [pc, #556]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a8a      	ldr	r2, [pc, #552]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fafd 	bl	80010dc <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae6:	f7ff faf9 	bl	80010dc <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b64      	cmp	r3, #100	; 0x64
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0fd      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x312>
 8001b0c:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4a7a      	ldr	r2, [pc, #488]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6213      	str	r3, [r2, #32]
 8001b18:	e02d      	b.n	8001b76 <HAL_RCC_OscConfig+0x36e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x334>
 8001b22:	4b76      	ldr	r3, [pc, #472]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a75      	ldr	r2, [pc, #468]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6213      	str	r3, [r2, #32]
 8001b2e:	4b73      	ldr	r3, [pc, #460]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4a72      	ldr	r2, [pc, #456]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	6213      	str	r3, [r2, #32]
 8001b3a:	e01c      	b.n	8001b76 <HAL_RCC_OscConfig+0x36e>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d10c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x356>
 8001b44:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a6c      	ldr	r2, [pc, #432]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	4b6a      	ldr	r3, [pc, #424]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4a69      	ldr	r2, [pc, #420]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6213      	str	r3, [r2, #32]
 8001b5c:	e00b      	b.n	8001b76 <HAL_RCC_OscConfig+0x36e>
 8001b5e:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4a66      	ldr	r2, [pc, #408]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6213      	str	r3, [r2, #32]
 8001b6a:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a63      	ldr	r2, [pc, #396]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d015      	beq.n	8001baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff faad 	bl	80010dc <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7ff faa9 	bl	80010dc <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0ab      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9c:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ee      	beq.n	8001b86 <HAL_RCC_OscConfig+0x37e>
 8001ba8:	e014      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001baa:	f7ff fa97 	bl	80010dc <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7ff fa93 	bl	80010dc <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e095      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc8:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ee      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d105      	bne.n	8001be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bda:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a47      	ldr	r2, [pc, #284]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8081 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d061      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d146      	bne.n	8001c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c04:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <HAL_RCC_OscConfig+0x4fc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fa67 	bl	80010dc <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff fa63 	bl	80010dc <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e067      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d108      	bne.n	8001c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c3a:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	492d      	ldr	r1, [pc, #180]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a19      	ldr	r1, [r3, #32]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	4927      	ldr	r1, [pc, #156]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x4fc>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fa37 	bl	80010dc <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c72:	f7ff fa33 	bl	80010dc <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e037      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x46a>
 8001c90:	e02f      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <HAL_RCC_OscConfig+0x4fc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fa20 	bl	80010dc <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff fa1c 	bl	80010dc <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e020      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x498>
 8001cbe:	e018      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e013      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40007000 	.word	0x40007000
 8001d04:	42420060 	.word	0x42420060

08001d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0d0      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d910      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4965      	ldr	r1, [pc, #404]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b8      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a58      	ldr	r2, [pc, #352]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	494d      	ldr	r1, [pc, #308]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d040      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e07f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e073      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e06b      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4936      	ldr	r1, [pc, #216]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7ff f970 	bl	80010dc <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7ff f96c 	bl	80010dc <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e053      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d210      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	4922      	ldr	r1, [pc, #136]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e032      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4916      	ldr	r1, [pc, #88]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e96:	f000 f821 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	490a      	ldr	r1, [pc, #40]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	5ccb      	ldrb	r3, [r1, r3]
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f8ce 	bl	8001058 <HAL_InitTick>

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	080032f4 	.word	0x080032f4
 8001ed4:	20000094 	.word	0x20000094
 8001ed8:	200000bc 	.word	0x200000bc

08001edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x30>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x36>
 8001f0a:	e027      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0e:	613b      	str	r3, [r7, #16]
      break;
 8001f10:	e027      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0c9b      	lsrs	r3, r3, #18
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d010      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0c5b      	lsrs	r3, r3, #17
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3e:	fb02 f203 	mul.w	r2, r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e004      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	613b      	str	r3, [r7, #16]
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5e:	613b      	str	r3, [r7, #16]
      break;
 8001f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f62:	693b      	ldr	r3, [r7, #16]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	007a1200 	.word	0x007a1200
 8001f78:	0800330c 	.word	0x0800330c
 8001f7c:	0800331c 	.word	0x0800331c
 8001f80:	003d0900 	.word	0x003d0900

08001f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b02      	ldr	r3, [pc, #8]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	20000094 	.word	0x20000094

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f9c:	f7ff fff2 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	4903      	ldr	r1, [pc, #12]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fae:	5ccb      	ldrb	r3, [r1, r3]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08003304 	.word	0x08003304

08001fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fc4:	f7ff ffde 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	0adb      	lsrs	r3, r3, #11
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	4903      	ldr	r1, [pc, #12]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08003304 	.word	0x08003304

08001fe8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <RCC_Delay+0x34>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <RCC_Delay+0x38>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0a5b      	lsrs	r3, r3, #9
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002004:	bf00      	nop
  }
  while (Delay --);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1e5a      	subs	r2, r3, #1
 800200a:	60fa      	str	r2, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f9      	bne.n	8002004 <RCC_Delay+0x1c>
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	20000094 	.word	0x20000094
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e041      	b.n	80020ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fdd6 	bl	8000bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f000 fa74 	bl	8002550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d001      	beq.n	80020dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e03a      	b.n	8002152 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_TIM_Base_Start_IT+0x98>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00e      	beq.n	800211c <HAL_TIM_Base_Start_IT+0x58>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002106:	d009      	beq.n	800211c <HAL_TIM_Base_Start_IT+0x58>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a14      	ldr	r2, [pc, #80]	; (8002160 <HAL_TIM_Base_Start_IT+0x9c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d004      	beq.n	800211c <HAL_TIM_Base_Start_IT+0x58>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <HAL_TIM_Base_Start_IT+0xa0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d111      	bne.n	8002140 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b06      	cmp	r3, #6
 800212c:	d010      	beq.n	8002150 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213e:	e007      	b.n	8002150 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40012c00 	.word	0x40012c00
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800

08002168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b02      	cmp	r3, #2
 800217c:	d122      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b02      	cmp	r3, #2
 800218a:	d11b      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0202 	mvn.w	r2, #2
 8002194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f9b4 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
 80021b0:	e005      	b.n	80021be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f9a7 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f9b6 	bl	800252a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d122      	bne.n	8002218 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d11b      	bne.n	8002218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0204 	mvn.w	r2, #4
 80021e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2202      	movs	r2, #2
 80021ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f98a 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
 8002204:	e005      	b.n	8002212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f97d 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f98c 	bl	800252a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b08      	cmp	r3, #8
 8002224:	d122      	bne.n	800226c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b08      	cmp	r3, #8
 8002232:	d11b      	bne.n	800226c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0208 	mvn.w	r2, #8
 800223c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2204      	movs	r2, #4
 8002242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f960 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
 8002258:	e005      	b.n	8002266 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f953 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f962 	bl	800252a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b10      	cmp	r3, #16
 8002278:	d122      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b10      	cmp	r3, #16
 8002286:	d11b      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0210 	mvn.w	r2, #16
 8002290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2208      	movs	r2, #8
 8002296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f936 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
 80022ac:	e005      	b.n	80022ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f929 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f938 	bl	800252a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10e      	bne.n	80022ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d107      	bne.n	80022ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0201 	mvn.w	r2, #1
 80022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fbd8 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f6:	2b80      	cmp	r3, #128	; 0x80
 80022f8:	d10e      	bne.n	8002318 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002304:	2b80      	cmp	r3, #128	; 0x80
 8002306:	d107      	bne.n	8002318 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fa7b 	bl	800280e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	2b40      	cmp	r3, #64	; 0x40
 8002324:	d10e      	bne.n	8002344 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002330:	2b40      	cmp	r3, #64	; 0x40
 8002332:	d107      	bne.n	8002344 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800233c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8fc 	bl	800253c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b20      	cmp	r3, #32
 8002350:	d10e      	bne.n	8002370 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b20      	cmp	r3, #32
 800235e:	d107      	bne.n	8002370 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0220 	mvn.w	r2, #32
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fa46 	bl	80027fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_TIM_ConfigClockSource+0x1c>
 8002390:	2302      	movs	r3, #2
 8002392:	e0b4      	b.n	80024fe <HAL_TIM_ConfigClockSource+0x186>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023cc:	d03e      	beq.n	800244c <HAL_TIM_ConfigClockSource+0xd4>
 80023ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d2:	f200 8087 	bhi.w	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 80023d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023da:	f000 8086 	beq.w	80024ea <HAL_TIM_ConfigClockSource+0x172>
 80023de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e2:	d87f      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 80023e4:	2b70      	cmp	r3, #112	; 0x70
 80023e6:	d01a      	beq.n	800241e <HAL_TIM_ConfigClockSource+0xa6>
 80023e8:	2b70      	cmp	r3, #112	; 0x70
 80023ea:	d87b      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 80023ec:	2b60      	cmp	r3, #96	; 0x60
 80023ee:	d050      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x11a>
 80023f0:	2b60      	cmp	r3, #96	; 0x60
 80023f2:	d877      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 80023f4:	2b50      	cmp	r3, #80	; 0x50
 80023f6:	d03c      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0xfa>
 80023f8:	2b50      	cmp	r3, #80	; 0x50
 80023fa:	d873      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d058      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x13a>
 8002400:	2b40      	cmp	r3, #64	; 0x40
 8002402:	d86f      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002404:	2b30      	cmp	r3, #48	; 0x30
 8002406:	d064      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002408:	2b30      	cmp	r3, #48	; 0x30
 800240a:	d86b      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 800240c:	2b20      	cmp	r3, #32
 800240e:	d060      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002410:	2b20      	cmp	r3, #32
 8002412:	d867      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002414:	2b00      	cmp	r3, #0
 8002416:	d05c      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002418:	2b10      	cmp	r3, #16
 800241a:	d05a      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x15a>
 800241c:	e062      	b.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6899      	ldr	r1, [r3, #8]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f000 f968 	bl	8002702 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002440:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	609a      	str	r2, [r3, #8]
      break;
 800244a:	e04f      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6899      	ldr	r1, [r3, #8]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f000 f951 	bl	8002702 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800246e:	609a      	str	r2, [r3, #8]
      break;
 8002470:	e03c      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6859      	ldr	r1, [r3, #4]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	461a      	mov	r2, r3
 8002480:	f000 f8c8 	bl	8002614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2150      	movs	r1, #80	; 0x50
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f91f 	bl	80026ce <TIM_ITRx_SetConfig>
      break;
 8002490:	e02c      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	461a      	mov	r2, r3
 80024a0:	f000 f8e6 	bl	8002670 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2160      	movs	r1, #96	; 0x60
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f90f 	bl	80026ce <TIM_ITRx_SetConfig>
      break;
 80024b0:	e01c      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6859      	ldr	r1, [r3, #4]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	461a      	mov	r2, r3
 80024c0:	f000 f8a8 	bl	8002614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2140      	movs	r1, #64	; 0x40
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f8ff 	bl	80026ce <TIM_ITRx_SetConfig>
      break;
 80024d0:	e00c      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f000 f8f6 	bl	80026ce <TIM_ITRx_SetConfig>
      break;
 80024e2:	e003      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      break;
 80024e8:	e000      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
	...

08002550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a29      	ldr	r2, [pc, #164]	; (8002608 <TIM_Base_SetConfig+0xb8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d00b      	beq.n	8002580 <TIM_Base_SetConfig+0x30>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256e:	d007      	beq.n	8002580 <TIM_Base_SetConfig+0x30>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a26      	ldr	r2, [pc, #152]	; (800260c <TIM_Base_SetConfig+0xbc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d003      	beq.n	8002580 <TIM_Base_SetConfig+0x30>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a25      	ldr	r2, [pc, #148]	; (8002610 <TIM_Base_SetConfig+0xc0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d108      	bne.n	8002592 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <TIM_Base_SetConfig+0xb8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00b      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a0:	d007      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a19      	ldr	r2, [pc, #100]	; (800260c <TIM_Base_SetConfig+0xbc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d003      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <TIM_Base_SetConfig+0xc0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d108      	bne.n	80025c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a07      	ldr	r2, [pc, #28]	; (8002608 <TIM_Base_SetConfig+0xb8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d103      	bne.n	80025f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	615a      	str	r2, [r3, #20]
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	40012c00 	.word	0x40012c00
 800260c:	40000400 	.word	0x40000400
 8002610:	40000800 	.word	0x40000800

08002614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	f023 0201 	bic.w	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800263e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f023 030a 	bic.w	r3, r3, #10
 8002650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	621a      	str	r2, [r3, #32]
}
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	f023 0210 	bic.w	r2, r3, #16
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800269a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	031b      	lsls	r3, r3, #12
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	621a      	str	r2, [r3, #32]
}
 80026c4:	bf00      	nop
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b085      	sub	sp, #20
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f043 0307 	orr.w	r3, r3, #7
 80026f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	609a      	str	r2, [r3, #8]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002702:	b480      	push	{r7}
 8002704:	b087      	sub	sp, #28
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800271c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	021a      	lsls	r2, r3, #8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	431a      	orrs	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	4313      	orrs	r3, r2
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	609a      	str	r2, [r3, #8]
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002754:	2302      	movs	r3, #2
 8002756:	e046      	b.n	80027e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00e      	beq.n	80027ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a4:	d009      	beq.n	80027ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d10c      	bne.n	80027d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40012c00 	.word	0x40012c00
 80027f4:	40000400 	.word	0x40000400
 80027f8:	40000800 	.word	0x40000800

080027fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e042      	b.n	80028b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe f9fc 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2224      	movs	r2, #36	; 0x24
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fc7f 	bl	8003168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b0ba      	sub	sp, #232	; 0xe8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80028fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10f      	bne.n	8002926 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_UART_IRQHandler+0x66>
 8002912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fb63 	bl	8002fea <UART_Receive_IT>
      return;
 8002924:	e25b      	b.n	8002dde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80de 	beq.w	8002aec <HAL_UART_IRQHandler+0x22c>
 8002930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800293c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002940:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80d1 	beq.w	8002aec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800294a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_UART_IRQHandler+0xae>
 8002956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HAL_UART_IRQHandler+0xd2>
 800297a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f043 0202 	orr.w	r2, r3, #2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <HAL_UART_IRQHandler+0xf6>
 800299e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f043 0204 	orr.w	r2, r3, #4
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d011      	beq.n	80029e6 <HAL_UART_IRQHandler+0x126>
 80029c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d105      	bne.n	80029da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f043 0208 	orr.w	r2, r3, #8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 81f2 	beq.w	8002dd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_UART_IRQHandler+0x14e>
 80029fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 faee 	bl	8002fea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_UART_IRQHandler+0x17a>
 8002a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d04f      	beq.n	8002ada <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f9f8 	bl	8002e30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d041      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3314      	adds	r3, #20
 8002a54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a5c:	e853 3f00 	ldrex	r3, [r3]
 8002a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3314      	adds	r3, #20
 8002a76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a8a:	e841 2300 	strex	r3, r2, [r1]
 8002a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1d9      	bne.n	8002a4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d013      	beq.n	8002aca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	4a7e      	ldr	r2, [pc, #504]	; (8002ca0 <HAL_UART_IRQHandler+0x3e0>)
 8002aa8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fc66 	bl	8001380 <HAL_DMA_Abort_IT>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac8:	e00e      	b.n	8002ae8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f99c 	bl	8002e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad0:	e00a      	b.n	8002ae8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f998 	bl	8002e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	e006      	b.n	8002ae8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f994 	bl	8002e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002ae6:	e175      	b.n	8002dd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae8:	bf00      	nop
    return;
 8002aea:	e173      	b.n	8002dd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	f040 814f 	bne.w	8002d94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8148 	beq.w	8002d94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8141 	beq.w	8002d94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80b6 	beq.w	8002ca4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8145 	beq.w	8002dd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b56:	429a      	cmp	r2, r3
 8002b58:	f080 813e 	bcs.w	8002dd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	f000 8088 	beq.w	8002c80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	330c      	adds	r3, #12
 8002b76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b7e:	e853 3f00 	ldrex	r3, [r3]
 8002b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	330c      	adds	r3, #12
 8002b98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b9c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ba0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ba8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bac:	e841 2300 	strex	r3, r2, [r1]
 8002bb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1d9      	bne.n	8002b70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc6:	e853 3f00 	ldrex	r3, [r3]
 8002bca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3314      	adds	r3, #20
 8002bdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002be0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002be4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002be8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bec:	e841 2300 	strex	r3, r2, [r1]
 8002bf0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e1      	bne.n	8002bbc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3314      	adds	r3, #20
 8002bfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c02:	e853 3f00 	ldrex	r3, [r3]
 8002c06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3314      	adds	r3, #20
 8002c18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e3      	bne.n	8002bf8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	330c      	adds	r3, #12
 8002c44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c48:	e853 3f00 	ldrex	r3, [r3]
 8002c4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c50:	f023 0310 	bic.w	r3, r3, #16
 8002c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c62:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e3      	bne.n	8002c3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe fb45 	bl	800130a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	4619      	mov	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f8bf 	bl	8002e1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c9c:	e09c      	b.n	8002dd8 <HAL_UART_IRQHandler+0x518>
 8002c9e:	bf00      	nop
 8002ca0:	08002ef5 	.word	0x08002ef5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 808e 	beq.w	8002ddc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8089 	beq.w	8002ddc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	e853 3f00 	ldrex	r3, [r3]
 8002cd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002cee:	647a      	str	r2, [r7, #68]	; 0x44
 8002cf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e3      	bne.n	8002cca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3314      	adds	r3, #20
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	623b      	str	r3, [r7, #32]
   return(result);
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3314      	adds	r3, #20
 8002d22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d26:	633a      	str	r2, [r7, #48]	; 0x30
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d2e:	e841 2300 	strex	r3, r2, [r1]
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e3      	bne.n	8002d02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	e853 3f00 	ldrex	r3, [r3]
 8002d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0310 	bic.w	r3, r3, #16
 8002d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d6c:	61fa      	str	r2, [r7, #28]
 8002d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	69b9      	ldr	r1, [r7, #24]
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	617b      	str	r3, [r7, #20]
   return(result);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e3      	bne.n	8002d48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f844 	bl	8002e1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d92:	e023      	b.n	8002ddc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d009      	beq.n	8002db4 <HAL_UART_IRQHandler+0x4f4>
 8002da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f8b5 	bl	8002f1c <UART_Transmit_IT>
    return;
 8002db2:	e014      	b.n	8002dde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00e      	beq.n	8002dde <HAL_UART_IRQHandler+0x51e>
 8002dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f8f4 	bl	8002fba <UART_EndTransmit_IT>
    return;
 8002dd2:	e004      	b.n	8002dde <HAL_UART_IRQHandler+0x51e>
    return;
 8002dd4:	bf00      	nop
 8002dd6:	e002      	b.n	8002dde <HAL_UART_IRQHandler+0x51e>
      return;
 8002dd8:	bf00      	nop
 8002dda:	e000      	b.n	8002dde <HAL_UART_IRQHandler+0x51e>
      return;
 8002ddc:	bf00      	nop
  }
}
 8002dde:	37e8      	adds	r7, #232	; 0xe8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b095      	sub	sp, #84	; 0x54
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	e853 3f00 	ldrex	r3, [r3]
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	330c      	adds	r3, #12
 8002e56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e58:	643a      	str	r2, [r7, #64]	; 0x40
 8002e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e5      	bne.n	8002e38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3314      	adds	r3, #20
 8002e72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3314      	adds	r3, #20
 8002e8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e5      	bne.n	8002e6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d119      	bne.n	8002edc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	330c      	adds	r3, #12
 8002eae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	e853 3f00 	ldrex	r3, [r3]
 8002eb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f023 0310 	bic.w	r3, r3, #16
 8002ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ec8:	61ba      	str	r2, [r7, #24]
 8002eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ecc:	6979      	ldr	r1, [r7, #20]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	e841 2300 	strex	r3, r2, [r1]
 8002ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e5      	bne.n	8002ea8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002eea:	bf00      	nop
 8002eec:	3754      	adds	r7, #84	; 0x54
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f7ff ff7a 	bl	8002e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b21      	cmp	r3, #33	; 0x21
 8002f2e:	d13e      	bne.n	8002fae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f38:	d114      	bne.n	8002f64 <UART_Transmit_IT+0x48>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d110      	bne.n	8002f64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	1c9a      	adds	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	621a      	str	r2, [r3, #32]
 8002f62:	e008      	b.n	8002f76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	1c59      	adds	r1, r3, #1
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6211      	str	r1, [r2, #32]
 8002f6e:	781a      	ldrb	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4619      	mov	r1, r3
 8002f84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
  }
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ff02 	bl	8002de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b08c      	sub	sp, #48	; 0x30
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b22      	cmp	r3, #34	; 0x22
 8002ffc:	f040 80ae 	bne.w	800315c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003008:	d117      	bne.n	800303a <UART_Receive_IT+0x50>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d113      	bne.n	800303a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003012:	2300      	movs	r3, #0
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	b29b      	uxth	r3, r3
 8003024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003028:	b29a      	uxth	r2, r3
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	1c9a      	adds	r2, r3, #2
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28
 8003038:	e026      	b.n	8003088 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003040:	2300      	movs	r3, #0
 8003042:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304c:	d007      	beq.n	800305e <UART_Receive_IT+0x74>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10a      	bne.n	800306c <UART_Receive_IT+0x82>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	e008      	b.n	800307e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003078:	b2da      	uxtb	r2, r3
 800307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29b      	uxth	r3, r3
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4619      	mov	r1, r3
 8003096:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003098:	2b00      	cmp	r3, #0
 800309a:	d15d      	bne.n	8003158 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0220 	bic.w	r2, r2, #32
 80030aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d135      	bne.n	800314e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	e853 3f00 	ldrex	r3, [r3]
 80030f6:	613b      	str	r3, [r7, #16]
   return(result);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f023 0310 	bic.w	r3, r3, #16
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	330c      	adds	r3, #12
 8003106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003108:	623a      	str	r2, [r7, #32]
 800310a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310c:	69f9      	ldr	r1, [r7, #28]
 800310e:	6a3a      	ldr	r2, [r7, #32]
 8003110:	e841 2300 	strex	r3, r2, [r1]
 8003114:	61bb      	str	r3, [r7, #24]
   return(result);
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e5      	bne.n	80030e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b10      	cmp	r3, #16
 8003128:	d10a      	bne.n	8003140 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff fe67 	bl	8002e1a <HAL_UARTEx_RxEventCallback>
 800314c:	e002      	b.n	8003154 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff fe51 	bl	8002df6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e002      	b.n	800315e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800315c:	2302      	movs	r3, #2
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3730      	adds	r7, #48	; 0x30
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031a2:	f023 030c 	bic.w	r3, r3, #12
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2c      	ldr	r2, [pc, #176]	; (800327c <UART_SetConfig+0x114>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d103      	bne.n	80031d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031d0:	f7fe fef6 	bl	8001fc0 <HAL_RCC_GetPCLK2Freq>
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	e002      	b.n	80031de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031d8:	f7fe fede 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80031dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009a      	lsls	r2, r3, #2
 80031e8:	441a      	add	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	4a22      	ldr	r2, [pc, #136]	; (8003280 <UART_SetConfig+0x118>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	0119      	lsls	r1, r3, #4
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	009a      	lsls	r2, r3, #2
 8003208:	441a      	add	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	fbb2 f2f3 	udiv	r2, r2, r3
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <UART_SetConfig+0x118>)
 8003216:	fba3 0302 	umull	r0, r3, r3, r2
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2064      	movs	r0, #100	; 0x64
 800321e:	fb00 f303 	mul.w	r3, r0, r3
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	3332      	adds	r3, #50	; 0x32
 8003228:	4a15      	ldr	r2, [pc, #84]	; (8003280 <UART_SetConfig+0x118>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003234:	4419      	add	r1, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009a      	lsls	r2, r3, #2
 8003240:	441a      	add	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	fbb2 f2f3 	udiv	r2, r2, r3
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <UART_SetConfig+0x118>)
 800324e:	fba3 0302 	umull	r0, r3, r3, r2
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2064      	movs	r0, #100	; 0x64
 8003256:	fb00 f303 	mul.w	r3, r0, r3
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	3332      	adds	r3, #50	; 0x32
 8003260:	4a07      	ldr	r2, [pc, #28]	; (8003280 <UART_SetConfig+0x118>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	f003 020f 	and.w	r2, r3, #15
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	440a      	add	r2, r1
 8003272:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40013800 	.word	0x40013800
 8003280:	51eb851f 	.word	0x51eb851f

08003284 <__libc_init_array>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	2600      	movs	r6, #0
 8003288:	4d0c      	ldr	r5, [pc, #48]	; (80032bc <__libc_init_array+0x38>)
 800328a:	4c0d      	ldr	r4, [pc, #52]	; (80032c0 <__libc_init_array+0x3c>)
 800328c:	1b64      	subs	r4, r4, r5
 800328e:	10a4      	asrs	r4, r4, #2
 8003290:	42a6      	cmp	r6, r4
 8003292:	d109      	bne.n	80032a8 <__libc_init_array+0x24>
 8003294:	f000 f822 	bl	80032dc <_init>
 8003298:	2600      	movs	r6, #0
 800329a:	4d0a      	ldr	r5, [pc, #40]	; (80032c4 <__libc_init_array+0x40>)
 800329c:	4c0a      	ldr	r4, [pc, #40]	; (80032c8 <__libc_init_array+0x44>)
 800329e:	1b64      	subs	r4, r4, r5
 80032a0:	10a4      	asrs	r4, r4, #2
 80032a2:	42a6      	cmp	r6, r4
 80032a4:	d105      	bne.n	80032b2 <__libc_init_array+0x2e>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ac:	4798      	blx	r3
 80032ae:	3601      	adds	r6, #1
 80032b0:	e7ee      	b.n	8003290 <__libc_init_array+0xc>
 80032b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b6:	4798      	blx	r3
 80032b8:	3601      	adds	r6, #1
 80032ba:	e7f2      	b.n	80032a2 <__libc_init_array+0x1e>
 80032bc:	08003320 	.word	0x08003320
 80032c0:	08003320 	.word	0x08003320
 80032c4:	08003320 	.word	0x08003320
 80032c8:	08003324 	.word	0x08003324

080032cc <memset>:
 80032cc:	4603      	mov	r3, r0
 80032ce:	4402      	add	r2, r0
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d100      	bne.n	80032d6 <memset+0xa>
 80032d4:	4770      	bx	lr
 80032d6:	f803 1b01 	strb.w	r1, [r3], #1
 80032da:	e7f9      	b.n	80032d0 <memset+0x4>

080032dc <_init>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	bf00      	nop
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr

080032e8 <_fini>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	bf00      	nop
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr
