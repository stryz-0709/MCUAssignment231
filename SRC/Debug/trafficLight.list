
trafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080031d4  080031d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003200  08003200  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08003200  08003200  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003200  08003200  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08003208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  200000a8  080032b0  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080032b0  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9e9  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002150  00000000  00000000  0002daba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  0002fc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00030908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001798a  00000000  00000000  000314f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f908  00000000  00000000  00048e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c89  00000000  00000000  00058782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df40b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003410  00000000  00000000  000df460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	080031bc 	.word	0x080031bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	080031bc 	.word	0x080031bc

0800014c <isButtonPressed>:
int KeyReg1 [4] = {NORMAL_STATE};
int KeyReg2 [4] = {NORMAL_STATE};
int KeyReg3 [4] = {NORMAL_STATE};
int TimerForKeyPress [4] = {500};

int isButtonPressed(int button){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[button]){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d006      	beq.n	800016e <isButtonPressed+0x22>
		button_flag[button] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000c4 	.word	0x200000c4

08000180 <subKeyProcess>:

void subKeyProcess(int button){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[button] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000c4 	.word	0x200000c4

080001a0 <getKeyInput>:


void getKeyInput(int button){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	KeyReg0[button] = KeyReg1[button];
 80001a8:	4a37      	ldr	r2, [pc, #220]	; (8000288 <getKeyInput+0xe8>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	4936      	ldr	r1, [pc, #216]	; (800028c <getKeyInput+0xec>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[button] = KeyReg2[button];
 80001b8:	4a35      	ldr	r2, [pc, #212]	; (8000290 <getKeyInput+0xf0>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4931      	ldr	r1, [pc, #196]	; (8000288 <getKeyInput+0xe8>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[button] = HAL_GPIO_ReadPin(BUTTON_PORT[button], BUTTON_PIN[button]);
 80001c8:	4a32      	ldr	r2, [pc, #200]	; (8000294 <getKeyInput+0xf4>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d0:	4931      	ldr	r1, [pc, #196]	; (8000298 <getKeyInput+0xf8>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001d8:	4619      	mov	r1, r3
 80001da:	4610      	mov	r0, r2
 80001dc:	f001 fa3c 	bl	8001658 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4619      	mov	r1, r3
 80001e4:	4a2a      	ldr	r2, [pc, #168]	; (8000290 <getKeyInput+0xf0>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if ((KeyReg0[button] == KeyReg1[button]) && (KeyReg1[button] == KeyReg2[button])){
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <getKeyInput+0xec>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	4924      	ldr	r1, [pc, #144]	; (8000288 <getKeyInput+0xe8>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d13f      	bne.n	8000280 <getKeyInput+0xe0>
 8000200:	4a21      	ldr	r2, [pc, #132]	; (8000288 <getKeyInput+0xe8>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4921      	ldr	r1, [pc, #132]	; (8000290 <getKeyInput+0xf0>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000210:	429a      	cmp	r2, r3
 8000212:	d135      	bne.n	8000280 <getKeyInput+0xe0>
		if (KeyReg3[button] != KeyReg2[button]){
 8000214:	4a21      	ldr	r2, [pc, #132]	; (800029c <getKeyInput+0xfc>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	491c      	ldr	r1, [pc, #112]	; (8000290 <getKeyInput+0xf0>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000224:	429a      	cmp	r2, r3
 8000226:	d017      	beq.n	8000258 <getKeyInput+0xb8>
			KeyReg3[button] = KeyReg2[button];
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <getKeyInput+0xf0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	491a      	ldr	r1, [pc, #104]	; (800029c <getKeyInput+0xfc>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg2[button] == PRESSED_STATE){
 8000238:	4a15      	ldr	r2, [pc, #84]	; (8000290 <getKeyInput+0xf0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d11d      	bne.n	8000280 <getKeyInput+0xe0>
				subKeyProcess(button);
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f7ff ff9b 	bl	8000180 <subKeyProcess>
				TimerForKeyPress[button] = 500;
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <getKeyInput+0x100>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
				KeyReg3[button] = NORMAL_STATE;
			}
		}
	}
}
 8000256:	e013      	b.n	8000280 <getKeyInput+0xe0>
			TimerForKeyPress[button]--;
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <getKeyInput+0x100>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	1e5a      	subs	r2, r3, #1
 8000262:	490f      	ldr	r1, [pc, #60]	; (80002a0 <getKeyInput+0x100>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
 800026a:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <getKeyInput+0x100>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	dc04      	bgt.n	8000280 <getKeyInput+0xe0>
				KeyReg3[button] = NORMAL_STATE;
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <getKeyInput+0xfc>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000028 	.word	0x20000028
 800028c:	20000018 	.word	0x20000018
 8000290:	20000038 	.word	0x20000038
 8000294:	20000000 	.word	0x20000000
 8000298:	20000010 	.word	0x20000010
 800029c:	20000048 	.word	0x20000048
 80002a0:	20000058 	.word	0x20000058

080002a4 <show_time>:
 *      Author: minht
 */

#include "fsm_automatic.h"

void show_time(int lane){
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	if (timer_counter[lane] % 100 == 0){
 80002ac:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <show_time+0x48>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b4:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <show_time+0x4c>)
 80002b6:	fb83 1302 	smull	r1, r3, r3, r2
 80002ba:	1159      	asrs	r1, r3, #5
 80002bc:	17d3      	asrs	r3, r2, #31
 80002be:	1acb      	subs	r3, r1, r3
 80002c0:	2164      	movs	r1, #100	; 0x64
 80002c2:	fb01 f303 	mul.w	r3, r1, r3
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d10a      	bne.n	80002e2 <show_time+0x3e>
		int remaining_time = timer_counter[lane] / 100;
 80002cc:	4a07      	ldr	r2, [pc, #28]	; (80002ec <show_time+0x48>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <show_time+0x4c>)
 80002d6:	fb82 1203 	smull	r1, r2, r2, r3
 80002da:	1152      	asrs	r2, r2, #5
 80002dc:	17db      	asrs	r3, r3, #31
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	60fb      	str	r3, [r7, #12]


//		display7SEG(lane*2, remaining_time % 10);
//		display7SEG(lane*2+1, (int) (remaining_time / 10));
	}
}
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	200000d8 	.word	0x200000d8
 80002f0:	51eb851f 	.word	0x51eb851f

080002f4 <fsm_automatic_run>:

void fsm_automatic_run(int lane){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	switch(LED_MODE[lane]){
 80002fc:	4a5e      	ldr	r2, [pc, #376]	; (8000478 <fsm_automatic_run+0x184>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	3b01      	subs	r3, #1
 8000306:	2b16      	cmp	r3, #22
 8000308:	f200 80ab 	bhi.w	8000462 <fsm_automatic_run+0x16e>
 800030c:	a201      	add	r2, pc, #4	; (adr r2, 8000314 <fsm_automatic_run+0x20>)
 800030e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000312:	bf00      	nop
 8000314:	08000371 	.word	0x08000371
 8000318:	08000463 	.word	0x08000463
 800031c:	08000463 	.word	0x08000463
 8000320:	08000463 	.word	0x08000463
 8000324:	08000463 	.word	0x08000463
 8000328:	08000463 	.word	0x08000463
 800032c:	08000463 	.word	0x08000463
 8000330:	08000463 	.word	0x08000463
 8000334:	08000463 	.word	0x08000463
 8000338:	08000463 	.word	0x08000463
 800033c:	08000463 	.word	0x08000463
 8000340:	08000463 	.word	0x08000463
 8000344:	08000463 	.word	0x08000463
 8000348:	08000463 	.word	0x08000463
 800034c:	08000463 	.word	0x08000463
 8000350:	08000463 	.word	0x08000463
 8000354:	08000463 	.word	0x08000463
 8000358:	08000463 	.word	0x08000463
 800035c:	08000463 	.word	0x08000463
 8000360:	08000463 	.word	0x08000463
 8000364:	080003bb 	.word	0x080003bb
 8000368:	0800042b 	.word	0x0800042b
 800036c:	080003f3 	.word	0x080003f3
		case INIT:
			setTrafficLight(lane, INIT);
 8000370:	2101      	movs	r1, #1
 8000372:	6878      	ldr	r0, [r7, #4]
 8000374:	f000 fc96 	bl	8000ca4 <setTrafficLight>
			if (lane == 0){
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d10e      	bne.n	800039c <fsm_automatic_run+0xa8>
				LED_MODE[lane] = RED_MODE;
 800037e:	4a3e      	ldr	r2, [pc, #248]	; (8000478 <fsm_automatic_run+0x184>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2115      	movs	r1, #21
 8000384:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 8000388:	4b3c      	ldr	r3, [pc, #240]	; (800047c <fsm_automatic_run+0x188>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2264      	movs	r2, #100	; 0x64
 800038e:	fb02 f303 	mul.w	r3, r2, r3
 8000392:	4619      	mov	r1, r3
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f000 fb49 	bl	8000a2c <setTimer>
			}
			else{
				LED_MODE[lane] = GREEN_MODE;
				setTimer(lane, GREEN_DURATION*100);
			}
			break;
 800039a:	e069      	b.n	8000470 <fsm_automatic_run+0x17c>
				LED_MODE[lane] = GREEN_MODE;
 800039c:	4a36      	ldr	r2, [pc, #216]	; (8000478 <fsm_automatic_run+0x184>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2117      	movs	r1, #23
 80003a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 80003a6:	4b36      	ldr	r3, [pc, #216]	; (8000480 <fsm_automatic_run+0x18c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2264      	movs	r2, #100	; 0x64
 80003ac:	fb02 f303 	mul.w	r3, r2, r3
 80003b0:	4619      	mov	r1, r3
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f000 fb3a 	bl	8000a2c <setTimer>
			break;
 80003b8:	e05a      	b.n	8000470 <fsm_automatic_run+0x17c>
		case RED_MODE:
			show_time(lane);
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff ff72 	bl	80002a4 <show_time>
			setTrafficLight(lane, RED_MODE);
 80003c0:	2115      	movs	r1, #21
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f000 fc6e 	bl	8000ca4 <setTrafficLight>
			if(timer_flag[lane]){
 80003c8:	4a2e      	ldr	r2, [pc, #184]	; (8000484 <fsm_automatic_run+0x190>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d048      	beq.n	8000466 <fsm_automatic_run+0x172>
				LED_MODE[lane] = GREEN_MODE;
 80003d4:	4a28      	ldr	r2, [pc, #160]	; (8000478 <fsm_automatic_run+0x184>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2117      	movs	r1, #23
 80003da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 80003de:	4b28      	ldr	r3, [pc, #160]	; (8000480 <fsm_automatic_run+0x18c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2264      	movs	r2, #100	; 0x64
 80003e4:	fb02 f303 	mul.w	r3, r2, r3
 80003e8:	4619      	mov	r1, r3
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f000 fb1e 	bl	8000a2c <setTimer>
			}
			break;
 80003f0:	e039      	b.n	8000466 <fsm_automatic_run+0x172>
		case GREEN_MODE:
			show_time(lane);
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f7ff ff56 	bl	80002a4 <show_time>
			setTrafficLight(lane, GREEN_MODE);
 80003f8:	2117      	movs	r1, #23
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f000 fc52 	bl	8000ca4 <setTrafficLight>
			if(timer_flag[lane]){
 8000400:	4a20      	ldr	r2, [pc, #128]	; (8000484 <fsm_automatic_run+0x190>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d02e      	beq.n	800046a <fsm_automatic_run+0x176>
				LED_MODE[lane] = AMBER_MODE;
 800040c:	4a1a      	ldr	r2, [pc, #104]	; (8000478 <fsm_automatic_run+0x184>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2116      	movs	r1, #22
 8000412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, YELLOW_DURATION*100);
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <fsm_automatic_run+0x194>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2264      	movs	r2, #100	; 0x64
 800041c:	fb02 f303 	mul.w	r3, r2, r3
 8000420:	4619      	mov	r1, r3
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f000 fb02 	bl	8000a2c <setTimer>
			}
			break;
 8000428:	e01f      	b.n	800046a <fsm_automatic_run+0x176>
		case AMBER_MODE:
			show_time(lane);
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f7ff ff3a 	bl	80002a4 <show_time>
			setTrafficLight(lane, AMBER_MODE);
 8000430:	2116      	movs	r1, #22
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f000 fc36 	bl	8000ca4 <setTrafficLight>
			if(timer_flag[lane]){
 8000438:	4a12      	ldr	r2, [pc, #72]	; (8000484 <fsm_automatic_run+0x190>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d014      	beq.n	800046e <fsm_automatic_run+0x17a>
				LED_MODE[lane] = RED_MODE;
 8000444:	4a0c      	ldr	r2, [pc, #48]	; (8000478 <fsm_automatic_run+0x184>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2115      	movs	r1, #21
 800044a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <fsm_automatic_run+0x188>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2264      	movs	r2, #100	; 0x64
 8000454:	fb02 f303 	mul.w	r3, r2, r3
 8000458:	4619      	mov	r1, r3
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f000 fae6 	bl	8000a2c <setTimer>
			}
			break;
 8000460:	e005      	b.n	800046e <fsm_automatic_run+0x17a>
		case EDIT_MODE:
			break;
		default:
			break;
 8000462:	bf00      	nop
 8000464:	e004      	b.n	8000470 <fsm_automatic_run+0x17c>
			break;
 8000466:	bf00      	nop
 8000468:	e002      	b.n	8000470 <fsm_automatic_run+0x17c>
			break;
 800046a:	bf00      	nop
 800046c:	e000      	b.n	8000470 <fsm_automatic_run+0x17c>
			break;
 800046e:	bf00      	nop
	}
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000068 	.word	0x20000068
 800047c:	20000078 	.word	0x20000078
 8000480:	20000080 	.word	0x20000080
 8000484:	200000e4 	.word	0x200000e4
 8000488:	2000007c 	.word	0x2000007c

0800048c <changeMode>:

#include "fsm_manual.h"

int tempDuration = 0;

void changeMode(int mode, int ledMode){
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	6039      	str	r1, [r7, #0]
	LED_MODE[0] = ledMode;
 8000496:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <changeMode+0x3c>)
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	6013      	str	r3, [r2, #0]
	LED_MODE[1] = ledMode;
 800049c:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <changeMode+0x3c>)
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	6053      	str	r3, [r2, #4]
	setTrafficLight(0, INIT);
 80004a2:	2101      	movs	r1, #1
 80004a4:	2000      	movs	r0, #0
 80004a6:	f000 fbfd 	bl	8000ca4 <setTrafficLight>
	setTrafficLight(1, INIT);
 80004aa:	2101      	movs	r1, #1
 80004ac:	2001      	movs	r0, #1
 80004ae:	f000 fbf9 	bl	8000ca4 <setTrafficLight>
	MODE = mode;
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <changeMode+0x40>)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6013      	str	r3, [r2, #0]
	setTimer(2, 25);
 80004b8:	2119      	movs	r1, #25
 80004ba:	2002      	movs	r0, #2
 80004bc:	f000 fab6 	bl	8000a2c <setTimer>
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000068 	.word	0x20000068
 80004cc:	20000070 	.word	0x20000070

080004d0 <fsm_manual_run>:
//	display7SEG(1, 0);
//	display7SEG(2, duration % 10);
//	display7SEG(3, (int) (duration / 10));
//}

void fsm_manual_run(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	switch(MODE){
 80004d4:	4b76      	ldr	r3, [pc, #472]	; (80006b0 <fsm_manual_run+0x1e0>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3b0b      	subs	r3, #11
 80004da:	2b0c      	cmp	r3, #12
 80004dc:	f200 80dc 	bhi.w	8000698 <fsm_manual_run+0x1c8>
 80004e0:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <fsm_manual_run+0x18>)
 80004e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e6:	bf00      	nop
 80004e8:	0800051d 	.word	0x0800051d
 80004ec:	08000699 	.word	0x08000699
 80004f0:	08000699 	.word	0x08000699
 80004f4:	08000699 	.word	0x08000699
 80004f8:	08000699 	.word	0x08000699
 80004fc:	08000699 	.word	0x08000699
 8000500:	08000699 	.word	0x08000699
 8000504:	08000699 	.word	0x08000699
 8000508:	08000699 	.word	0x08000699
 800050c:	08000699 	.word	0x08000699
 8000510:	0800053d 	.word	0x0800053d
 8000514:	080005b5 	.word	0x080005b5
 8000518:	0800062b 	.word	0x0800062b
		case AUTO_MODE:
			if (isButtonPressed(0)){
 800051c:	2000      	movs	r0, #0
 800051e:	f7ff fe15 	bl	800014c <isButtonPressed>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	f000 80b9 	beq.w	800069c <fsm_manual_run+0x1cc>
				tempDuration = RED_DURATION;
 800052a:	4b62      	ldr	r3, [pc, #392]	; (80006b4 <fsm_manual_run+0x1e4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a62      	ldr	r2, [pc, #392]	; (80006b8 <fsm_manual_run+0x1e8>)
 8000530:	6013      	str	r3, [r2, #0]
				changeMode(RED_MODE, EDIT_MODE);
 8000532:	210c      	movs	r1, #12
 8000534:	2015      	movs	r0, #21
 8000536:	f7ff ffa9 	bl	800048c <changeMode>
			}
			break;
 800053a:	e0af      	b.n	800069c <fsm_manual_run+0x1cc>
		case RED_MODE:
//			displayDuration(2, tempDuration);
			if (isButtonPressed(0)){
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff fe05 	bl	800014c <isButtonPressed>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d007      	beq.n	8000558 <fsm_manual_run+0x88>
				tempDuration = YELLOW_DURATION;
 8000548:	4b5c      	ldr	r3, [pc, #368]	; (80006bc <fsm_manual_run+0x1ec>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a5a      	ldr	r2, [pc, #360]	; (80006b8 <fsm_manual_run+0x1e8>)
 800054e:	6013      	str	r3, [r2, #0]
				changeMode(AMBER_MODE, EDIT_MODE);
 8000550:	210c      	movs	r1, #12
 8000552:	2016      	movs	r0, #22
 8000554:	f7ff ff9a 	bl	800048c <changeMode>
			}
			if (isButtonPressed(1)){
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff fdf7 	bl	800014c <isButtonPressed>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <fsm_manual_run+0xac>
				tempDuration++;
 8000564:	4b54      	ldr	r3, [pc, #336]	; (80006b8 <fsm_manual_run+0x1e8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	4a53      	ldr	r2, [pc, #332]	; (80006b8 <fsm_manual_run+0x1e8>)
 800056c:	6013      	str	r3, [r2, #0]
				if (tempDuration == 100) tempDuration = 1;
 800056e:	4b52      	ldr	r3, [pc, #328]	; (80006b8 <fsm_manual_run+0x1e8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b64      	cmp	r3, #100	; 0x64
 8000574:	d102      	bne.n	800057c <fsm_manual_run+0xac>
 8000576:	4b50      	ldr	r3, [pc, #320]	; (80006b8 <fsm_manual_run+0x1e8>)
 8000578:	2201      	movs	r2, #1
 800057a:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(2)){
 800057c:	2002      	movs	r0, #2
 800057e:	f7ff fde5 	bl	800014c <isButtonPressed>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d003      	beq.n	8000590 <fsm_manual_run+0xc0>
				RED_DURATION = tempDuration;
 8000588:	4b4b      	ldr	r3, [pc, #300]	; (80006b8 <fsm_manual_run+0x1e8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a49      	ldr	r2, [pc, #292]	; (80006b4 <fsm_manual_run+0x1e4>)
 800058e:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[2]){
 8000590:	4b4b      	ldr	r3, [pc, #300]	; (80006c0 <fsm_manual_run+0x1f0>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	2b00      	cmp	r3, #0
 8000596:	f000 8083 	beq.w	80006a0 <fsm_manual_run+0x1d0>
				toggleLight(0, RED_MODE);
 800059a:	2115      	movs	r1, #21
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fc17 	bl	8000dd0 <toggleLight>
				toggleLight(1, RED_MODE);
 80005a2:	2115      	movs	r1, #21
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 fc13 	bl	8000dd0 <toggleLight>
				setTimer(2, 25);
 80005aa:	2119      	movs	r1, #25
 80005ac:	2002      	movs	r0, #2
 80005ae:	f000 fa3d 	bl	8000a2c <setTimer>
			}
			break;
 80005b2:	e075      	b.n	80006a0 <fsm_manual_run+0x1d0>
		case AMBER_MODE:
//			displayDuration(3, tempDuration);
			if (isButtonPressed(0)){
 80005b4:	2000      	movs	r0, #0
 80005b6:	f7ff fdc9 	bl	800014c <isButtonPressed>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d007      	beq.n	80005d0 <fsm_manual_run+0x100>
				tempDuration = GREEN_DURATION;
 80005c0:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <fsm_manual_run+0x1f4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a3c      	ldr	r2, [pc, #240]	; (80006b8 <fsm_manual_run+0x1e8>)
 80005c6:	6013      	str	r3, [r2, #0]
				changeMode(GREEN_MODE, EDIT_MODE);
 80005c8:	210c      	movs	r1, #12
 80005ca:	2017      	movs	r0, #23
 80005cc:	f7ff ff5e 	bl	800048c <changeMode>
			}
			if (isButtonPressed(1)){
 80005d0:	2001      	movs	r0, #1
 80005d2:	f7ff fdbb 	bl	800014c <isButtonPressed>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00b      	beq.n	80005f4 <fsm_manual_run+0x124>
				tempDuration++;
 80005dc:	4b36      	ldr	r3, [pc, #216]	; (80006b8 <fsm_manual_run+0x1e8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a35      	ldr	r2, [pc, #212]	; (80006b8 <fsm_manual_run+0x1e8>)
 80005e4:	6013      	str	r3, [r2, #0]
				if (tempDuration == 100) tempDuration = 1;
 80005e6:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <fsm_manual_run+0x1e8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b64      	cmp	r3, #100	; 0x64
 80005ec:	d102      	bne.n	80005f4 <fsm_manual_run+0x124>
 80005ee:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <fsm_manual_run+0x1e8>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(2)){
 80005f4:	2002      	movs	r0, #2
 80005f6:	f7ff fda9 	bl	800014c <isButtonPressed>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d003      	beq.n	8000608 <fsm_manual_run+0x138>
				YELLOW_DURATION = tempDuration;
 8000600:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <fsm_manual_run+0x1e8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a2d      	ldr	r2, [pc, #180]	; (80006bc <fsm_manual_run+0x1ec>)
 8000606:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[2]){
 8000608:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <fsm_manual_run+0x1f0>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d049      	beq.n	80006a4 <fsm_manual_run+0x1d4>
				toggleLight(0, AMBER_MODE);
 8000610:	2116      	movs	r1, #22
 8000612:	2000      	movs	r0, #0
 8000614:	f000 fbdc 	bl	8000dd0 <toggleLight>
				toggleLight(1, AMBER_MODE);
 8000618:	2116      	movs	r1, #22
 800061a:	2001      	movs	r0, #1
 800061c:	f000 fbd8 	bl	8000dd0 <toggleLight>
				setTimer(2, 25);
 8000620:	2119      	movs	r1, #25
 8000622:	2002      	movs	r0, #2
 8000624:	f000 fa02 	bl	8000a2c <setTimer>
			}
			break;
 8000628:	e03c      	b.n	80006a4 <fsm_manual_run+0x1d4>
		case GREEN_MODE:
//			displayDuration(4, tempDuration);
			if (isButtonPressed(0)){
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff fd8e 	bl	800014c <isButtonPressed>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d003      	beq.n	800063e <fsm_manual_run+0x16e>
				changeMode(AUTO_MODE, INIT);
 8000636:	2101      	movs	r1, #1
 8000638:	200b      	movs	r0, #11
 800063a:	f7ff ff27 	bl	800048c <changeMode>
			}
			if (isButtonPressed(1)){
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff fd84 	bl	800014c <isButtonPressed>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00b      	beq.n	8000662 <fsm_manual_run+0x192>
				tempDuration++;
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <fsm_manual_run+0x1e8>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <fsm_manual_run+0x1e8>)
 8000652:	6013      	str	r3, [r2, #0]
				if (tempDuration == 100) tempDuration = 1;
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <fsm_manual_run+0x1e8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b64      	cmp	r3, #100	; 0x64
 800065a:	d102      	bne.n	8000662 <fsm_manual_run+0x192>
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <fsm_manual_run+0x1e8>)
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(2)){
 8000662:	2002      	movs	r0, #2
 8000664:	f7ff fd72 	bl	800014c <isButtonPressed>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d003      	beq.n	8000676 <fsm_manual_run+0x1a6>
				GREEN_DURATION = tempDuration;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <fsm_manual_run+0x1e8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <fsm_manual_run+0x1f4>)
 8000674:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[2]){
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <fsm_manual_run+0x1f0>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d014      	beq.n	80006a8 <fsm_manual_run+0x1d8>
				toggleLight(0, GREEN_MODE);
 800067e:	2117      	movs	r1, #23
 8000680:	2000      	movs	r0, #0
 8000682:	f000 fba5 	bl	8000dd0 <toggleLight>
				toggleLight(1, GREEN_MODE);
 8000686:	2117      	movs	r1, #23
 8000688:	2001      	movs	r0, #1
 800068a:	f000 fba1 	bl	8000dd0 <toggleLight>
				setTimer(2, 25);
 800068e:	2119      	movs	r1, #25
 8000690:	2002      	movs	r0, #2
 8000692:	f000 f9cb 	bl	8000a2c <setTimer>
			}
			break;
 8000696:	e007      	b.n	80006a8 <fsm_manual_run+0x1d8>
		default:
			 break;
 8000698:	bf00      	nop
 800069a:	e006      	b.n	80006aa <fsm_manual_run+0x1da>
			break;
 800069c:	bf00      	nop
 800069e:	e004      	b.n	80006aa <fsm_manual_run+0x1da>
			break;
 80006a0:	bf00      	nop
 80006a2:	e002      	b.n	80006aa <fsm_manual_run+0x1da>
			break;
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <fsm_manual_run+0x1da>
			break;
 80006a8:	bf00      	nop
	}
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000070 	.word	0x20000070
 80006b4:	20000078 	.word	0x20000078
 80006b8:	200000d4 	.word	0x200000d4
 80006bc:	2000007c 	.word	0x2000007c
 80006c0:	200000e4 	.word	0x200000e4
 80006c4:	20000080 	.word	0x20000080

080006c8 <changePedMode>:
 *      Author: minht
 */

#include "fsm_ped.h"

void changePedMode(int mode, int ledMode){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	LED_MODE[0] = ledMode;
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <changePedMode+0x34>)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	6013      	str	r3, [r2, #0]
	LED_MODE[1] = ledMode;
 80006d8:	4a08      	ldr	r2, [pc, #32]	; (80006fc <changePedMode+0x34>)
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	6053      	str	r3, [r2, #4]
	setTrafficLight(0, INIT);
 80006de:	2101      	movs	r1, #1
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 fadf 	bl	8000ca4 <setTrafficLight>
	setTrafficLight(1, INIT);
 80006e6:	2101      	movs	r1, #1
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 fadb 	bl	8000ca4 <setTrafficLight>
	TRAFFIC_MODE = mode;
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <changePedMode+0x38>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000068 	.word	0x20000068
 8000700:	20000074 	.word	0x20000074

08000704 <fsm_ped_run>:

void fsm_ped_run(){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	switch(TRAFFIC_MODE){
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <fsm_ped_run+0x48>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b0b      	cmp	r3, #11
 800070e:	d002      	beq.n	8000716 <fsm_ped_run+0x12>
 8000710:	2b0d      	cmp	r3, #13
 8000712:	d00b      	beq.n	800072c <fsm_ped_run+0x28>
			if (isButtonPressed(3)){
				changePedMode(AUTO_MODE, INIT);
			}
			break;
		default:
			break;
 8000714:	e018      	b.n	8000748 <fsm_ped_run+0x44>
			if (isButtonPressed(3)){
 8000716:	2003      	movs	r0, #3
 8000718:	f7ff fd18 	bl	800014c <isButtonPressed>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00f      	beq.n	8000742 <fsm_ped_run+0x3e>
				changePedMode(PED_MODE, EDIT_MODE);
 8000722:	210c      	movs	r1, #12
 8000724:	200d      	movs	r0, #13
 8000726:	f7ff ffcf 	bl	80006c8 <changePedMode>
			break;
 800072a:	e00a      	b.n	8000742 <fsm_ped_run+0x3e>
			if (isButtonPressed(3)){
 800072c:	2003      	movs	r0, #3
 800072e:	f7ff fd0d 	bl	800014c <isButtonPressed>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d006      	beq.n	8000746 <fsm_ped_run+0x42>
				changePedMode(AUTO_MODE, INIT);
 8000738:	2101      	movs	r1, #1
 800073a:	200b      	movs	r0, #11
 800073c:	f7ff ffc4 	bl	80006c8 <changePedMode>
			break;
 8000740:	e001      	b.n	8000746 <fsm_ped_run+0x42>
			break;
 8000742:	bf00      	nop
 8000744:	e000      	b.n	8000748 <fsm_ped_run+0x44>
			break;
 8000746:	bf00      	nop
	}
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000074 	.word	0x20000074

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000754:	f000 fbda 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000758:	f000 f81a 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075c:	f000 f8d0 	bl	8000900 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000760:	f000 f858 	bl	8000814 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000764:	f000 f8a2 	bl	80008ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000768:	4808      	ldr	r0, [pc, #32]	; (800078c <main+0x3c>)
 800076a:	f001 fc1b 	bl	8001fa4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(2, 100);
 800076e:	2164      	movs	r1, #100	; 0x64
 8000770:	2002      	movs	r0, #2
 8000772:	f000 f95b 	bl	8000a2c <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_ped_run();
 8000776:	f7ff ffc5 	bl	8000704 <fsm_ped_run>
	  fsm_manual_run();
 800077a:	f7ff fea9 	bl	80004d0 <fsm_manual_run>
	  fsm_automatic_run(0);
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff fdb8 	bl	80002f4 <fsm_automatic_run>
	  fsm_automatic_run(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff fdb5 	bl	80002f4 <fsm_automatic_run>
	  fsm_ped_run();
 800078a:	e7f4      	b.n	8000776 <main+0x26>
 800078c:	200000f0 	.word	0x200000f0

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b090      	sub	sp, #64	; 0x40
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0318 	add.w	r3, r7, #24
 800079a:	2228      	movs	r2, #40	; 0x28
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fd04 	bl	80031ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b6:	2301      	movs	r3, #1
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ba:	2310      	movs	r3, #16
 80007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007c2:	2300      	movs	r3, #0
 80007c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007c6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0318 	add.w	r3, r7, #24
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 ff89 	bl	80016e8 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007dc:	f000 f920 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2102      	movs	r1, #2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f9f4 	bl	8001be8 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000806:	f000 f90b 	bl	8000a20 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3740      	adds	r7, #64	; 0x40
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_TIM2_Init+0x94>)
 800083a:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800083e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000848:	2263      	movs	r2, #99	; 0x63
 800084a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_TIM2_Init+0x94>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000858:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_TIM2_Init+0x94>)
 800085a:	f001 fb53 	bl	8001f04 <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000864:	f000 f8dc 	bl	8000a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000876:	f001 fcef 	bl	8002258 <HAL_TIM_ConfigClockSource>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 f8ce 	bl	8000a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000892:	f001 fec5 	bl	8002620 <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 f8c0 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000f0 	.word	0x200000f0

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_USART2_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f001 ff0c 	bl	8002700 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 f897 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000138 	.word	0x20000138
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b34      	ldr	r3, [pc, #208]	; (80009e8 <MX_GPIO_Init+0xe8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a33      	ldr	r2, [pc, #204]	; (80009e8 <MX_GPIO_Init+0xe8>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <MX_GPIO_Init+0xe8>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <MX_GPIO_Init+0xe8>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <MX_GPIO_Init+0xe8>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_GPIO_Init+0xe8>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Ped_LIGHT2_Pin|D2_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800094a:	4828      	ldr	r0, [pc, #160]	; (80009ec <MX_GPIO_Init+0xec>)
 800094c:	f000 fe9b 	bl	8001686 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ped_LIGHT1_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000956:	4826      	ldr	r0, [pc, #152]	; (80009f0 <MX_GPIO_Init+0xf0>)
 8000958:	f000 fe95 	bl	8001686 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Ped_BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = Ped_BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 800095c:	2313      	movs	r3, #19
 800095e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000964:	2301      	movs	r3, #1
 8000966:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	4619      	mov	r1, r3
 800096e:	481f      	ldr	r0, [pc, #124]	; (80009ec <MX_GPIO_Init+0xec>)
 8000970:	f000 fcee 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Ped_LIGHT2_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Ped_LIGHT2_Pin|D2_Pin;
 8000974:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000978:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2302      	movs	r3, #2
 8000984:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	4619      	mov	r1, r3
 800098c:	4817      	ldr	r0, [pc, #92]	; (80009ec <MX_GPIO_Init+0xec>)
 800098e:	f000 fcdf 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2302      	movs	r3, #2
 800099c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4619      	mov	r1, r3
 80009a4:	4811      	ldr	r0, [pc, #68]	; (80009ec <MX_GPIO_Init+0xec>)
 80009a6:	f000 fcd3 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 80009aa:	2301      	movs	r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_GPIO_Init+0xf0>)
 80009be:	f000 fcc7 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ped_LIGHT1_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = Ped_LIGHT1_Pin|D3_Pin|D5_Pin|D4_Pin;
 80009c2:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80009c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2302      	movs	r3, #2
 80009d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_GPIO_Init+0xf0>)
 80009dc:	f000 fcb8 	bl	8001350 <HAL_GPIO_Init>

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010800 	.word	0x40010800
 80009f0:	40010c00 	.word	0x40010c00

080009f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	timerRun();
 80009fc:	f000 f82e 	bl	8000a5c <timerRun>
	getKeyInput(0);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fbcd 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff fbca 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f7ff fbc7 	bl	80001a0 <getKeyInput>
	getKeyInput(3);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f7ff fbc4 	bl	80001a0 <getKeyInput>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <setTimer>:
#include "software_timer.h"

int timer_counter [3] = {0,0,0};
int timer_flag [3] = {0,0,0};

void setTimer(int type, int duration){
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	timer_counter[type] = duration;
 8000a36:	4907      	ldr	r1, [pc, #28]	; (8000a54 <setTimer+0x28>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[type] = 0;
 8000a40:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <setTimer+0x2c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2100      	movs	r1, #0
 8000a46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	200000d8 	.word	0x200000d8
 8000a58:	200000e4 	.word	0x200000e4

08000a5c <timerRun>:

void timerRun(){
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	if(timer_counter[0] > 0){
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <timerRun+0x6c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	dd0b      	ble.n	8000a80 <timerRun+0x24>
		timer_counter[0]--;
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <timerRun+0x6c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <timerRun+0x6c>)
 8000a70:	6013      	str	r3, [r2, #0]
		if(timer_counter[0] <= 0){
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <timerRun+0x6c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	dc02      	bgt.n	8000a80 <timerRun+0x24>
			timer_flag[0] = 1;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <timerRun+0x70>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter[1] > 0){
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <timerRun+0x6c>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	dd0b      	ble.n	8000aa0 <timerRun+0x44>
		timer_counter[1]--;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <timerRun+0x6c>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <timerRun+0x6c>)
 8000a90:	6053      	str	r3, [r2, #4]
		if(timer_counter[1] <= 0){
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <timerRun+0x6c>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	dc02      	bgt.n	8000aa0 <timerRun+0x44>
			timer_flag[1] = 1;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <timerRun+0x70>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	605a      	str	r2, [r3, #4]
		}
	}
	if(timer_counter[2] > 0){
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <timerRun+0x6c>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	dd0b      	ble.n	8000ac0 <timerRun+0x64>
		timer_counter[2]--;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <timerRun+0x6c>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <timerRun+0x6c>)
 8000ab0:	6093      	str	r3, [r2, #8]
		if(timer_counter[2] <= 0){
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <timerRun+0x6c>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	dc02      	bgt.n	8000ac0 <timerRun+0x64>
			timer_flag[2] = 1;
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <timerRun+0x70>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	609a      	str	r2, [r3, #8]
		}
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	200000d8 	.word	0x200000d8
 8000acc:	200000e4 	.word	0x200000e4

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_MspInit+0x5c>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <HAL_MspInit+0x5c>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6193      	str	r3, [r2, #24]
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_MspInit+0x5c>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_MspInit+0x5c>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_MspInit+0x5c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	61d3      	str	r3, [r2, #28]
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_MspInit+0x5c>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_MspInit+0x60>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_MspInit+0x60>)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010000 	.word	0x40010000

08000b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b44:	d113      	bne.n	8000b6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_TIM_Base_MspInit+0x44>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_TIM_Base_MspInit+0x44>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	61d3      	str	r3, [r2, #28]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_TIM_Base_MspInit+0x44>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	201c      	movs	r0, #28
 8000b64:	f000 fb0b 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b68:	201c      	movs	r0, #28
 8000b6a:	f000 fb24 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <HAL_UART_MspInit+0x98>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d137      	bne.n	8000c0c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <HAL_UART_MspInit+0x9c>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <HAL_UART_MspInit+0x9c>)
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba6:	61d3      	str	r3, [r2, #28]
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <HAL_UART_MspInit+0x9c>)
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_UART_MspInit+0x9c>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x9c>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_UART_MspInit+0x9c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480f      	ldr	r0, [pc, #60]	; (8000c1c <HAL_UART_MspInit+0xa0>)
 8000be0:	f000 fbb6 	bl	8001350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000be4:	2308      	movs	r3, #8
 8000be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4809      	ldr	r0, [pc, #36]	; (8000c1c <HAL_UART_MspInit+0xa0>)
 8000bf8:	f000 fbaa 	bl	8001350 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2026      	movs	r0, #38	; 0x26
 8000c02:	f000 fabc 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c06:	2026      	movs	r0, #38	; 0x26
 8000c08:	f000 fad5 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010800 	.word	0x40010800

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 f997 	bl	8000f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <TIM2_IRQHandler+0x10>)
 8000c76:	f001 f9e7 	bl	8002048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000f0 	.word	0x200000f0

08000c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <USART2_IRQHandler+0x10>)
 8000c8a:	f001 fd89 	bl	80027a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000138 	.word	0x20000138

08000c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <setTrafficLight>:

uint16_t D_Pin[4] = {D2_Pin, D3_Pin, D4_Pin, D5_Pin};
GPIO_TypeDef *D_Port[4] = {D2_GPIO_Port, D3_GPIO_Port, D4_GPIO_Port, D5_GPIO_Port};


void setTrafficLight(int lane, int light){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	switch (light){
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b17      	cmp	r3, #23
 8000cb2:	d047      	beq.n	8000d44 <setTrafficLight+0xa0>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2b17      	cmp	r3, #23
 8000cb8:	dc63      	bgt.n	8000d82 <setTrafficLight+0xde>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	2b15      	cmp	r3, #21
 8000cbe:	d003      	beq.n	8000cc8 <setTrafficLight+0x24>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	2b16      	cmp	r3, #22
 8000cc4:	d01f      	beq.n	8000d06 <setTrafficLight+0x62>
 8000cc6:	e05c      	b.n	8000d82 <setTrafficLight+0xde>
		case RED_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], SET);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4a3e      	ldr	r2, [pc, #248]	; (8000dc8 <setTrafficLight+0x124>)
 8000cce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4a3d      	ldr	r2, [pc, #244]	; (8000dcc <setTrafficLight+0x128>)
 8000cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f000 fcd1 	bl	8001686 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4a37      	ldr	r2, [pc, #220]	; (8000dc8 <setTrafficLight+0x124>)
 8000cec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	4a35      	ldr	r2, [pc, #212]	; (8000dcc <setTrafficLight+0x128>)
 8000cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f000 fcc1 	bl	8001686 <HAL_GPIO_WritePin>
			break;
 8000d04:	e05c      	b.n	8000dc0 <setTrafficLight+0x11c>
		case AMBER_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], SET);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <setTrafficLight+0x124>)
 8000d0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <setTrafficLight+0x128>)
 8000d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f000 fcb2 	bl	8001686 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], SET);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	3301      	adds	r3, #1
 8000d28:	4a27      	ldr	r2, [pc, #156]	; (8000dc8 <setTrafficLight+0x124>)
 8000d2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a25      	ldr	r2, [pc, #148]	; (8000dcc <setTrafficLight+0x128>)
 8000d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f000 fca2 	bl	8001686 <HAL_GPIO_WritePin>
			break;
 8000d42:	e03d      	b.n	8000dc0 <setTrafficLight+0x11c>
		case GREEN_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4a1f      	ldr	r2, [pc, #124]	; (8000dc8 <setTrafficLight+0x124>)
 8000d4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <setTrafficLight+0x128>)
 8000d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f000 fc93 	bl	8001686 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], SET);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	3301      	adds	r3, #1
 8000d66:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <setTrafficLight+0x124>)
 8000d68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <setTrafficLight+0x128>)
 8000d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f000 fc83 	bl	8001686 <HAL_GPIO_WritePin>
			break;
 8000d80:	e01e      	b.n	8000dc0 <setTrafficLight+0x11c>
		default:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <setTrafficLight+0x124>)
 8000d88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <setTrafficLight+0x128>)
 8000d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d96:	2200      	movs	r2, #0
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f000 fc74 	bl	8001686 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <setTrafficLight+0x124>)
 8000da6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <setTrafficLight+0x128>)
 8000db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	f000 fc64 	bl	8001686 <HAL_GPIO_WritePin>
			break;
 8000dbe:	bf00      	nop
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000090 	.word	0x20000090
 8000dcc:	20000088 	.word	0x20000088

08000dd0 <toggleLight>:


void toggleLight(int lane, int light){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
	switch (light){
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2b17      	cmp	r3, #23
 8000dde:	d047      	beq.n	8000e70 <toggleLight+0xa0>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	2b17      	cmp	r3, #23
 8000de4:	dc63      	bgt.n	8000eae <toggleLight+0xde>
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b15      	cmp	r3, #21
 8000dea:	d003      	beq.n	8000df4 <toggleLight+0x24>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	2b16      	cmp	r3, #22
 8000df0:	d01f      	beq.n	8000e32 <toggleLight+0x62>
		case GREEN_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
			break;
		default:
			break;
 8000df2:	e05c      	b.n	8000eae <toggleLight+0xde>
			HAL_GPIO_TogglePin(D_Port[lane*2], D_Pin[lane*2]);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4a2f      	ldr	r2, [pc, #188]	; (8000eb8 <toggleLight+0xe8>)
 8000dfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	492e      	ldr	r1, [pc, #184]	; (8000ebc <toggleLight+0xec>)
 8000e04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	f000 fc53 	bl	80016b6 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	3301      	adds	r3, #1
 8000e16:	4a28      	ldr	r2, [pc, #160]	; (8000eb8 <toggleLight+0xe8>)
 8000e18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	3301      	adds	r3, #1
 8000e22:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <toggleLight+0xec>)
 8000e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f000 fc2b 	bl	8001686 <HAL_GPIO_WritePin>
			break;
 8000e30:	e03e      	b.n	8000eb0 <toggleLight+0xe0>
			HAL_GPIO_TogglePin(D_Port[lane*2], D_Pin[lane*2]);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <toggleLight+0xe8>)
 8000e38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	491e      	ldr	r1, [pc, #120]	; (8000ebc <toggleLight+0xec>)
 8000e42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e46:	4619      	mov	r1, r3
 8000e48:	4610      	mov	r0, r2
 8000e4a:	f000 fc34 	bl	80016b6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <toggleLight+0xe8>)
 8000e56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	3301      	adds	r3, #1
 8000e60:	4916      	ldr	r1, [pc, #88]	; (8000ebc <toggleLight+0xec>)
 8000e62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e66:	4619      	mov	r1, r3
 8000e68:	4610      	mov	r0, r2
 8000e6a:	f000 fc24 	bl	80016b6 <HAL_GPIO_TogglePin>
			break;
 8000e6e:	e01f      	b.n	8000eb0 <toggleLight+0xe0>
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <toggleLight+0xe8>)
 8000e76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <toggleLight+0xec>)
 8000e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	f000 fbfd 	bl	8001686 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	3301      	adds	r3, #1
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <toggleLight+0xe8>)
 8000e94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	4907      	ldr	r1, [pc, #28]	; (8000ebc <toggleLight+0xec>)
 8000ea0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	f000 fc05 	bl	80016b6 <HAL_GPIO_TogglePin>
			break;
 8000eac:	e000      	b.n	8000eb0 <toggleLight+0xe0>
			break;
 8000eae:	bf00      	nop
	}
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000090 	.word	0x20000090
 8000ebc:	20000088 	.word	0x20000088

08000ec0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec0:	f7ff feea 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ec6:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000edc:	4c09      	ldr	r4, [pc, #36]	; (8000f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eea:	f002 f93b 	bl	8003164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eee:	f7ff fc2f 	bl	8000750 <main>
  bx lr
 8000ef2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000efc:	08003208 	.word	0x08003208
  ldr r2, =_sbss
 8000f00:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000f04:	20000184 	.word	0x20000184

08000f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC1_2_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_Init+0x28>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x28>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f923 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff fdd2 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40022000 	.word	0x40022000

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f93b 	bl	80011d2 <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f000 f903 	bl	800117e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000084 	.word	0x20000084
 8000f90:	200000a4 	.word	0x200000a4
 8000f94:	200000a0 	.word	0x200000a0

08000f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_IncTick+0x1c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_IncTick+0x20>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <HAL_IncTick+0x20>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	200000a4 	.word	0x200000a4
 8000fb8:	20000180 	.word	0x20000180

08000fbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <HAL_GetTick+0x10>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	20000180 	.word	0x20000180

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4906      	ldr	r1, [pc, #24]	; (8001068 <__NVIC_EnableIRQ+0x34>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff90 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff2d 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff42 	bl	8001018 <__NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff90 	bl	80010c0 <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5f 	bl	800106c <__NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff35 	bl	8001034 <__NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffa2 	bl	8001124 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d008      	beq.n	8001214 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2204      	movs	r2, #4
 8001206:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e020      	b.n	8001256 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 020e 	bic.w	r2, r2, #14
 8001222:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800123c:	2101      	movs	r1, #1
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d005      	beq.n	8001284 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2204      	movs	r2, #4
 800127c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	e051      	b.n	8001328 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 020e 	bic.w	r2, r2, #14
 8001292:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a22      	ldr	r2, [pc, #136]	; (8001334 <HAL_DMA_Abort_IT+0xd4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d029      	beq.n	8001302 <HAL_DMA_Abort_IT+0xa2>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a21      	ldr	r2, [pc, #132]	; (8001338 <HAL_DMA_Abort_IT+0xd8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d022      	beq.n	80012fe <HAL_DMA_Abort_IT+0x9e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a1f      	ldr	r2, [pc, #124]	; (800133c <HAL_DMA_Abort_IT+0xdc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d01a      	beq.n	80012f8 <HAL_DMA_Abort_IT+0x98>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <HAL_DMA_Abort_IT+0xe0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d012      	beq.n	80012f2 <HAL_DMA_Abort_IT+0x92>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_DMA_Abort_IT+0xe4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00a      	beq.n	80012ec <HAL_DMA_Abort_IT+0x8c>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <HAL_DMA_Abort_IT+0xe8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d102      	bne.n	80012e6 <HAL_DMA_Abort_IT+0x86>
 80012e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012e4:	e00e      	b.n	8001304 <HAL_DMA_Abort_IT+0xa4>
 80012e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012ea:	e00b      	b.n	8001304 <HAL_DMA_Abort_IT+0xa4>
 80012ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f0:	e008      	b.n	8001304 <HAL_DMA_Abort_IT+0xa4>
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	e005      	b.n	8001304 <HAL_DMA_Abort_IT+0xa4>
 80012f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fc:	e002      	b.n	8001304 <HAL_DMA_Abort_IT+0xa4>
 80012fe:	2310      	movs	r3, #16
 8001300:	e000      	b.n	8001304 <HAL_DMA_Abort_IT+0xa4>
 8001302:	2301      	movs	r3, #1
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <HAL_DMA_Abort_IT+0xec>)
 8001306:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	4798      	blx	r3
    } 
  }
  return status;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40020008 	.word	0x40020008
 8001338:	4002001c 	.word	0x4002001c
 800133c:	40020030 	.word	0x40020030
 8001340:	40020044 	.word	0x40020044
 8001344:	40020058 	.word	0x40020058
 8001348:	4002006c 	.word	0x4002006c
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b08b      	sub	sp, #44	; 0x2c
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	e169      	b.n	8001638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001364:	2201      	movs	r2, #1
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	429a      	cmp	r2, r3
 800137e:	f040 8158 	bne.w	8001632 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4a9a      	ldr	r2, [pc, #616]	; (80015f0 <HAL_GPIO_Init+0x2a0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d05e      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 800138c:	4a98      	ldr	r2, [pc, #608]	; (80015f0 <HAL_GPIO_Init+0x2a0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d875      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 8001392:	4a98      	ldr	r2, [pc, #608]	; (80015f4 <HAL_GPIO_Init+0x2a4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d058      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 8001398:	4a96      	ldr	r2, [pc, #600]	; (80015f4 <HAL_GPIO_Init+0x2a4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d86f      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 800139e:	4a96      	ldr	r2, [pc, #600]	; (80015f8 <HAL_GPIO_Init+0x2a8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d052      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013a4:	4a94      	ldr	r2, [pc, #592]	; (80015f8 <HAL_GPIO_Init+0x2a8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d869      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013aa:	4a94      	ldr	r2, [pc, #592]	; (80015fc <HAL_GPIO_Init+0x2ac>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d04c      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013b0:	4a92      	ldr	r2, [pc, #584]	; (80015fc <HAL_GPIO_Init+0x2ac>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d863      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013b6:	4a92      	ldr	r2, [pc, #584]	; (8001600 <HAL_GPIO_Init+0x2b0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d046      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013bc:	4a90      	ldr	r2, [pc, #576]	; (8001600 <HAL_GPIO_Init+0x2b0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d85d      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d82a      	bhi.n	800141c <HAL_GPIO_Init+0xcc>
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d859      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013ca:	a201      	add	r2, pc, #4	; (adr r2, 80013d0 <HAL_GPIO_Init+0x80>)
 80013cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d0:	0800144b 	.word	0x0800144b
 80013d4:	08001425 	.word	0x08001425
 80013d8:	08001437 	.word	0x08001437
 80013dc:	08001479 	.word	0x08001479
 80013e0:	0800147f 	.word	0x0800147f
 80013e4:	0800147f 	.word	0x0800147f
 80013e8:	0800147f 	.word	0x0800147f
 80013ec:	0800147f 	.word	0x0800147f
 80013f0:	0800147f 	.word	0x0800147f
 80013f4:	0800147f 	.word	0x0800147f
 80013f8:	0800147f 	.word	0x0800147f
 80013fc:	0800147f 	.word	0x0800147f
 8001400:	0800147f 	.word	0x0800147f
 8001404:	0800147f 	.word	0x0800147f
 8001408:	0800147f 	.word	0x0800147f
 800140c:	0800147f 	.word	0x0800147f
 8001410:	0800147f 	.word	0x0800147f
 8001414:	0800142d 	.word	0x0800142d
 8001418:	08001441 	.word	0x08001441
 800141c:	4a79      	ldr	r2, [pc, #484]	; (8001604 <HAL_GPIO_Init+0x2b4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001422:	e02c      	b.n	800147e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	623b      	str	r3, [r7, #32]
          break;
 800142a:	e029      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	3304      	adds	r3, #4
 8001432:	623b      	str	r3, [r7, #32]
          break;
 8001434:	e024      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	3308      	adds	r3, #8
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e01f      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	330c      	adds	r3, #12
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e01a      	b.n	8001480 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001452:	2304      	movs	r3, #4
 8001454:	623b      	str	r3, [r7, #32]
          break;
 8001456:	e013      	b.n	8001480 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d105      	bne.n	800146c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001460:	2308      	movs	r3, #8
 8001462:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	611a      	str	r2, [r3, #16]
          break;
 800146a:	e009      	b.n	8001480 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800146c:	2308      	movs	r3, #8
 800146e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	615a      	str	r2, [r3, #20]
          break;
 8001476:	e003      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
          break;
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x130>
          break;
 800147e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2bff      	cmp	r3, #255	; 0xff
 8001484:	d801      	bhi.n	800148a <HAL_GPIO_Init+0x13a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	e001      	b.n	800148e <HAL_GPIO_Init+0x13e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3304      	adds	r3, #4
 800148e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2bff      	cmp	r3, #255	; 0xff
 8001494:	d802      	bhi.n	800149c <HAL_GPIO_Init+0x14c>
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	e002      	b.n	80014a2 <HAL_GPIO_Init+0x152>
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	3b08      	subs	r3, #8
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	210f      	movs	r1, #15
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	401a      	ands	r2, r3
 80014b4:	6a39      	ldr	r1, [r7, #32]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	431a      	orrs	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80b1 	beq.w	8001632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d0:	4b4d      	ldr	r3, [pc, #308]	; (8001608 <HAL_GPIO_Init+0x2b8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a4c      	ldr	r2, [pc, #304]	; (8001608 <HAL_GPIO_Init+0x2b8>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <HAL_GPIO_Init+0x2b8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e8:	4a48      	ldr	r2, [pc, #288]	; (800160c <HAL_GPIO_Init+0x2bc>)
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a40      	ldr	r2, [pc, #256]	; (8001610 <HAL_GPIO_Init+0x2c0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d013      	beq.n	800153c <HAL_GPIO_Init+0x1ec>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a3f      	ldr	r2, [pc, #252]	; (8001614 <HAL_GPIO_Init+0x2c4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00d      	beq.n	8001538 <HAL_GPIO_Init+0x1e8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3e      	ldr	r2, [pc, #248]	; (8001618 <HAL_GPIO_Init+0x2c8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_Init+0x1e4>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a3d      	ldr	r2, [pc, #244]	; (800161c <HAL_GPIO_Init+0x2cc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_Init+0x1e0>
 800152c:	2303      	movs	r3, #3
 800152e:	e006      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001530:	2304      	movs	r3, #4
 8001532:	e004      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001534:	2302      	movs	r3, #2
 8001536:	e002      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 800153c:	2300      	movs	r3, #0
 800153e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001540:	f002 0203 	and.w	r2, r2, #3
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	4093      	lsls	r3, r2
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800154e:	492f      	ldr	r1, [pc, #188]	; (800160c <HAL_GPIO_Init+0x2bc>)
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	3302      	adds	r3, #2
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	492c      	ldr	r1, [pc, #176]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	4928      	ldr	r1, [pc, #160]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001580:	4013      	ands	r3, r2
 8001582:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	4922      	ldr	r1, [pc, #136]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	60cb      	str	r3, [r1, #12]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	491e      	ldr	r1, [pc, #120]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4918      	ldr	r1, [pc, #96]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4914      	ldr	r1, [pc, #80]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d021      	beq.n	8001624 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	490e      	ldr	r1, [pc, #56]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
 80015ec:	e021      	b.n	8001632 <HAL_GPIO_Init+0x2e2>
 80015ee:	bf00      	nop
 80015f0:	10320000 	.word	0x10320000
 80015f4:	10310000 	.word	0x10310000
 80015f8:	10220000 	.word	0x10220000
 80015fc:	10210000 	.word	0x10210000
 8001600:	10120000 	.word	0x10120000
 8001604:	10110000 	.word	0x10110000
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000
 8001610:	40010800 	.word	0x40010800
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40011000 	.word	0x40011000
 800161c:	40011400 	.word	0x40011400
 8001620:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_GPIO_Init+0x304>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	43db      	mvns	r3, r3
 800162c:	4909      	ldr	r1, [pc, #36]	; (8001654 <HAL_GPIO_Init+0x304>)
 800162e:	4013      	ands	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	3301      	adds	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	f47f ae8e 	bne.w	8001364 <HAL_GPIO_Init+0x14>
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	372c      	adds	r7, #44	; 0x2c
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	40010400 	.word	0x40010400

08001658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e001      	b.n	800167a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	460b      	mov	r3, r1
 8001690:	807b      	strh	r3, [r7, #2]
 8001692:	4613      	mov	r3, r2
 8001694:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001696:	787b      	ldrb	r3, [r7, #1]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800169c:	887a      	ldrh	r2, [r7, #2]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016a2:	e003      	b.n	80016ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	041a      	lsls	r2, r3, #16
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	611a      	str	r2, [r3, #16]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c8:	887a      	ldrh	r2, [r7, #2]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4013      	ands	r3, r2
 80016ce:	041a      	lsls	r2, r3, #16
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	400b      	ands	r3, r1
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	611a      	str	r2, [r3, #16]
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e26c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8087 	beq.w	8001816 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001708:	4b92      	ldr	r3, [pc, #584]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b04      	cmp	r3, #4
 8001712:	d00c      	beq.n	800172e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001714:	4b8f      	ldr	r3, [pc, #572]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b08      	cmp	r3, #8
 800171e:	d112      	bne.n	8001746 <HAL_RCC_OscConfig+0x5e>
 8001720:	4b8c      	ldr	r3, [pc, #560]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172c:	d10b      	bne.n	8001746 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172e:	4b89      	ldr	r3, [pc, #548]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d06c      	beq.n	8001814 <HAL_RCC_OscConfig+0x12c>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d168      	bne.n	8001814 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e246      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x76>
 8001750:	4b80      	ldr	r3, [pc, #512]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a7f      	ldr	r2, [pc, #508]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	e02e      	b.n	80017bc <HAL_RCC_OscConfig+0xd4>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x98>
 8001766:	4b7b      	ldr	r3, [pc, #492]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a7a      	ldr	r2, [pc, #488]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800176c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	4b78      	ldr	r3, [pc, #480]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a77      	ldr	r2, [pc, #476]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e01d      	b.n	80017bc <HAL_RCC_OscConfig+0xd4>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0xbc>
 800178a:	4b72      	ldr	r3, [pc, #456]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a71      	ldr	r2, [pc, #452]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6e      	ldr	r2, [pc, #440]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0xd4>
 80017a4:	4b6b      	ldr	r3, [pc, #428]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a6a      	ldr	r2, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a67      	ldr	r2, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fbfa 	bl	8000fbc <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fbf6 	bl	8000fbc <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e1fa      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0xe4>
 80017ea:	e014      	b.n	8001816 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fbe6 	bl	8000fbc <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fbe2 	bl	8000fbc <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1e6      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x10c>
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d063      	beq.n	80018ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001822:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800182e:	4b49      	ldr	r3, [pc, #292]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b08      	cmp	r3, #8
 8001838:	d11c      	bne.n	8001874 <HAL_RCC_OscConfig+0x18c>
 800183a:	4b46      	ldr	r3, [pc, #280]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d116      	bne.n	8001874 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	4b43      	ldr	r3, [pc, #268]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x176>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e1ba      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4939      	ldr	r1, [pc, #228]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	e03a      	b.n	80018ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187c:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fb9b 	bl	8000fbc <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fb97 	bl	8000fbc <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e19b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4927      	ldr	r1, [pc, #156]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fb7a 	bl	8000fbc <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff fb76 	bl	8000fbc <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e17a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d03a      	beq.n	800196c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d019      	beq.n	8001932 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_RCC_OscConfig+0x274>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff fb5a 	bl	8000fbc <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fb56 	bl	8000fbc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e15a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800192a:	2001      	movs	r0, #1
 800192c:	f000 facc 	bl	8001ec8 <RCC_Delay>
 8001930:	e01c      	b.n	800196c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_RCC_OscConfig+0x274>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff fb40 	bl	8000fbc <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193e:	e00f      	b.n	8001960 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff fb3c 	bl	8000fbc <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d908      	bls.n	8001960 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e140      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	42420000 	.word	0x42420000
 800195c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	4b9e      	ldr	r3, [pc, #632]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1e9      	bne.n	8001940 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a6 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197e:	4b97      	ldr	r3, [pc, #604]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10d      	bne.n	80019a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	4b94      	ldr	r3, [pc, #592]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a93      	ldr	r2, [pc, #588]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b91      	ldr	r3, [pc, #580]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a2:	2301      	movs	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a6:	4b8e      	ldr	r3, [pc, #568]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d118      	bne.n	80019e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b2:	4b8b      	ldr	r3, [pc, #556]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a8a      	ldr	r2, [pc, #552]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 80019b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019be:	f7ff fafd 	bl	8000fbc <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c6:	f7ff faf9 	bl	8000fbc <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b64      	cmp	r3, #100	; 0x64
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e0fd      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	4b81      	ldr	r3, [pc, #516]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x312>
 80019ec:	4b7b      	ldr	r3, [pc, #492]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4a7a      	ldr	r2, [pc, #488]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6213      	str	r3, [r2, #32]
 80019f8:	e02d      	b.n	8001a56 <HAL_RCC_OscConfig+0x36e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x334>
 8001a02:	4b76      	ldr	r3, [pc, #472]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a75      	ldr	r2, [pc, #468]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	4b73      	ldr	r3, [pc, #460]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a72      	ldr	r2, [pc, #456]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	f023 0304 	bic.w	r3, r3, #4
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	e01c      	b.n	8001a56 <HAL_RCC_OscConfig+0x36e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d10c      	bne.n	8001a3e <HAL_RCC_OscConfig+0x356>
 8001a24:	4b6d      	ldr	r3, [pc, #436]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4a6c      	ldr	r2, [pc, #432]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	6213      	str	r3, [r2, #32]
 8001a30:	4b6a      	ldr	r3, [pc, #424]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a69      	ldr	r2, [pc, #420]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6213      	str	r3, [r2, #32]
 8001a3c:	e00b      	b.n	8001a56 <HAL_RCC_OscConfig+0x36e>
 8001a3e:	4b67      	ldr	r3, [pc, #412]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a66      	ldr	r2, [pc, #408]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	4b64      	ldr	r3, [pc, #400]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a63      	ldr	r2, [pc, #396]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	f023 0304 	bic.w	r3, r3, #4
 8001a54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d015      	beq.n	8001a8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff faad 	bl	8000fbc <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7ff faa9 	bl	8000fbc <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e0ab      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	4b57      	ldr	r3, [pc, #348]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ee      	beq.n	8001a66 <HAL_RCC_OscConfig+0x37e>
 8001a88:	e014      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fa97 	bl	8000fbc <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff fa93 	bl	8000fbc <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e095      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	4b4c      	ldr	r3, [pc, #304]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1ee      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d105      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aba:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 8081 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad0:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d061      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d146      	bne.n	8001b72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae4:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <HAL_RCC_OscConfig+0x4fc>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff fa67 	bl	8000fbc <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af2:	f7ff fa63 	bl	8000fbc <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e067      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b04:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b18:	d108      	bne.n	8001b2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b1a:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	492d      	ldr	r1, [pc, #180]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a19      	ldr	r1, [r3, #32]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	4927      	ldr	r1, [pc, #156]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_RCC_OscConfig+0x4fc>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fa37 	bl	8000fbc <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b52:	f7ff fa33 	bl	8000fbc <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e037      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x46a>
 8001b70:	e02f      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_RCC_OscConfig+0x4fc>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fa20 	bl	8000fbc <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b80:	f7ff fa1c 	bl	8000fbc <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e020      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x498>
 8001b9e:	e018      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e013      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40007000 	.word	0x40007000
 8001be4:	42420060 	.word	0x42420060

08001be8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0d0      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b6a      	ldr	r3, [pc, #424]	; (8001da8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d910      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b67      	ldr	r3, [pc, #412]	; (8001da8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 0207 	bic.w	r2, r3, #7
 8001c12:	4965      	ldr	r1, [pc, #404]	; (8001da8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b63      	ldr	r3, [pc, #396]	; (8001da8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0b8      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d020      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c44:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4a58      	ldr	r2, [pc, #352]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c5c:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4a52      	ldr	r2, [pc, #328]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c68:	4b50      	ldr	r3, [pc, #320]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	494d      	ldr	r1, [pc, #308]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d040      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d115      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e07f      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca6:	4b41      	ldr	r3, [pc, #260]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e073      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e06b      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc6:	4b39      	ldr	r3, [pc, #228]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f023 0203 	bic.w	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4936      	ldr	r1, [pc, #216]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd8:	f7ff f970 	bl	8000fbc <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce0:	f7ff f96c 	bl	8000fbc <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e053      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 020c 	and.w	r2, r3, #12
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d1eb      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d08:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d210      	bcs.n	8001d38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0207 	bic.w	r2, r3, #7
 8001d1e:	4922      	ldr	r1, [pc, #136]	; (8001da8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e032      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4916      	ldr	r1, [pc, #88]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	490e      	ldr	r1, [pc, #56]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d76:	f000 f821 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	490a      	ldr	r1, [pc, #40]	; (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d88:	5ccb      	ldrb	r3, [r1, r3]
 8001d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8e:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <HAL_RCC_ClockConfig+0x1cc>)
 8001d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1d0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f8ce 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40022000 	.word	0x40022000
 8001dac:	40021000 	.word	0x40021000
 8001db0:	080031d4 	.word	0x080031d4
 8001db4:	20000084 	.word	0x20000084
 8001db8:	200000a0 	.word	0x200000a0

08001dbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d002      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x30>
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0x36>
 8001dea:	e027      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dee:	613b      	str	r3, [r7, #16]
      break;
 8001df0:	e027      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	0c9b      	lsrs	r3, r3, #18
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dfc:	5cd3      	ldrb	r3, [r2, r3]
 8001dfe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d010      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	0c5b      	lsrs	r3, r3, #17
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	4a11      	ldr	r2, [pc, #68]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e1e:	fb02 f203 	mul.w	r2, r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e004      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e30:	fb02 f303 	mul.w	r3, r2, r3
 8001e34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	613b      	str	r3, [r7, #16]
      break;
 8001e3a:	e002      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e3e:	613b      	str	r3, [r7, #16]
      break;
 8001e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e42:	693b      	ldr	r3, [r7, #16]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	371c      	adds	r7, #28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	007a1200 	.word	0x007a1200
 8001e58:	080031ec 	.word	0x080031ec
 8001e5c:	080031fc 	.word	0x080031fc
 8001e60:	003d0900 	.word	0x003d0900

08001e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e68:	4b02      	ldr	r3, [pc, #8]	; (8001e74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	20000084 	.word	0x20000084

08001e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e7c:	f7ff fff2 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4903      	ldr	r1, [pc, #12]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	080031e4 	.word	0x080031e4

08001ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea4:	f7ff ffde 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	0adb      	lsrs	r3, r3, #11
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	4903      	ldr	r1, [pc, #12]	; (8001ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb6:	5ccb      	ldrb	r3, [r1, r3]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	080031e4 	.word	0x080031e4

08001ec8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <RCC_Delay+0x34>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <RCC_Delay+0x38>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0a5b      	lsrs	r3, r3, #9
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ee4:	bf00      	nop
  }
  while (Delay --);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	60fa      	str	r2, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f9      	bne.n	8001ee4 <RCC_Delay+0x1c>
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	20000084 	.word	0x20000084
 8001f00:	10624dd3 	.word	0x10624dd3

08001f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e041      	b.n	8001f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fe02 	bl	8000b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f000 fa74 	bl	8002430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d001      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e03a      	b.n	8002032 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a18      	ldr	r2, [pc, #96]	; (800203c <HAL_TIM_Base_Start_IT+0x98>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00e      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x58>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d009      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x58>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_TIM_Base_Start_IT+0x9c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d004      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x58>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a13      	ldr	r2, [pc, #76]	; (8002044 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d111      	bne.n	8002020 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b06      	cmp	r3, #6
 800200c:	d010      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800201e:	e007      	b.n	8002030 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40012c00 	.word	0x40012c00
 8002040:	40000400 	.word	0x40000400
 8002044:	40000800 	.word	0x40000800

08002048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b02      	cmp	r3, #2
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d11b      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0202 	mvn.w	r2, #2
 8002074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f9b4 	bl	80023f8 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f9a7 	bl	80023e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f9b6 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d122      	bne.n	80020f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d11b      	bne.n	80020f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0204 	mvn.w	r2, #4
 80020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2202      	movs	r2, #2
 80020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f98a 	bl	80023f8 <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f97d 	bl	80023e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f98c 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b08      	cmp	r3, #8
 8002104:	d122      	bne.n	800214c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b08      	cmp	r3, #8
 8002112:	d11b      	bne.n	800214c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0208 	mvn.w	r2, #8
 800211c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2204      	movs	r2, #4
 8002122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f960 	bl	80023f8 <HAL_TIM_IC_CaptureCallback>
 8002138:	e005      	b.n	8002146 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f953 	bl	80023e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f962 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b10      	cmp	r3, #16
 8002158:	d122      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b10      	cmp	r3, #16
 8002166:	d11b      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0210 	mvn.w	r2, #16
 8002170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2208      	movs	r2, #8
 8002176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f936 	bl	80023f8 <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f929 	bl	80023e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f938 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d107      	bne.n	80021cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0201 	mvn.w	r2, #1
 80021c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe fc14 	bl	80009f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	2b80      	cmp	r3, #128	; 0x80
 80021d8:	d10e      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d107      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa7b 	bl	80026ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d107      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f8fc 	bl	800241c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b20      	cmp	r3, #32
 8002230:	d10e      	bne.n	8002250 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b20      	cmp	r3, #32
 800223e:	d107      	bne.n	8002250 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0220 	mvn.w	r2, #32
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fa46 	bl	80026dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_TIM_ConfigClockSource+0x1c>
 8002270:	2302      	movs	r3, #2
 8002272:	e0b4      	b.n	80023de <HAL_TIM_ConfigClockSource+0x186>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800229a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ac:	d03e      	beq.n	800232c <HAL_TIM_ConfigClockSource+0xd4>
 80022ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b2:	f200 8087 	bhi.w	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ba:	f000 8086 	beq.w	80023ca <HAL_TIM_ConfigClockSource+0x172>
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c2:	d87f      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022c4:	2b70      	cmp	r3, #112	; 0x70
 80022c6:	d01a      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0xa6>
 80022c8:	2b70      	cmp	r3, #112	; 0x70
 80022ca:	d87b      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022cc:	2b60      	cmp	r3, #96	; 0x60
 80022ce:	d050      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x11a>
 80022d0:	2b60      	cmp	r3, #96	; 0x60
 80022d2:	d877      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022d4:	2b50      	cmp	r3, #80	; 0x50
 80022d6:	d03c      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0xfa>
 80022d8:	2b50      	cmp	r3, #80	; 0x50
 80022da:	d873      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d058      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x13a>
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d86f      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022e4:	2b30      	cmp	r3, #48	; 0x30
 80022e6:	d064      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d86b      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d060      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d867      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d05c      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d05a      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022fc:	e062      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f000 f968 	bl	80025e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002320:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	609a      	str	r2, [r3, #8]
      break;
 800232a:	e04f      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6899      	ldr	r1, [r3, #8]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f000 f951 	bl	80025e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800234e:	609a      	str	r2, [r3, #8]
      break;
 8002350:	e03c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	461a      	mov	r2, r3
 8002360:	f000 f8c8 	bl	80024f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2150      	movs	r1, #80	; 0x50
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f91f 	bl	80025ae <TIM_ITRx_SetConfig>
      break;
 8002370:	e02c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	461a      	mov	r2, r3
 8002380:	f000 f8e6 	bl	8002550 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2160      	movs	r1, #96	; 0x60
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f90f 	bl	80025ae <TIM_ITRx_SetConfig>
      break;
 8002390:	e01c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	461a      	mov	r2, r3
 80023a0:	f000 f8a8 	bl	80024f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f8ff 	bl	80025ae <TIM_ITRx_SetConfig>
      break;
 80023b0:	e00c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f000 f8f6 	bl	80025ae <TIM_ITRx_SetConfig>
      break;
 80023c2:	e003      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      break;
 80023c8:	e000      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
	...

08002430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a29      	ldr	r2, [pc, #164]	; (80024e8 <TIM_Base_SetConfig+0xb8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00b      	beq.n	8002460 <TIM_Base_SetConfig+0x30>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d007      	beq.n	8002460 <TIM_Base_SetConfig+0x30>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a26      	ldr	r2, [pc, #152]	; (80024ec <TIM_Base_SetConfig+0xbc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d003      	beq.n	8002460 <TIM_Base_SetConfig+0x30>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a25      	ldr	r2, [pc, #148]	; (80024f0 <TIM_Base_SetConfig+0xc0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d108      	bne.n	8002472 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <TIM_Base_SetConfig+0xb8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00b      	beq.n	8002492 <TIM_Base_SetConfig+0x62>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002480:	d007      	beq.n	8002492 <TIM_Base_SetConfig+0x62>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a19      	ldr	r2, [pc, #100]	; (80024ec <TIM_Base_SetConfig+0xbc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d003      	beq.n	8002492 <TIM_Base_SetConfig+0x62>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <TIM_Base_SetConfig+0xc0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d108      	bne.n	80024a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <TIM_Base_SetConfig+0xb8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d103      	bne.n	80024d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	615a      	str	r2, [r3, #20]
}
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	40012c00 	.word	0x40012c00
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40000800 	.word	0x40000800

080024f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f023 0201 	bic.w	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800251e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f023 030a 	bic.w	r3, r3, #10
 8002530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	621a      	str	r2, [r3, #32]
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f023 0210 	bic.w	r2, r3, #16
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800257a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	031b      	lsls	r3, r3, #12
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800258c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	621a      	str	r2, [r3, #32]
}
 80025a4:	bf00      	nop
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f043 0307 	orr.w	r3, r3, #7
 80025d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b087      	sub	sp, #28
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	021a      	lsls	r2, r3, #8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	431a      	orrs	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4313      	orrs	r3, r2
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	609a      	str	r2, [r3, #8]
}
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002634:	2302      	movs	r3, #2
 8002636:	e046      	b.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00e      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002684:	d009      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d004      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10c      	bne.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	40012c00 	.word	0x40012c00
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40000800 	.word	0x40000800

080026dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e042      	b.n	8002798 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe fa28 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2224      	movs	r2, #36	; 0x24
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fc7f 	bl	8003048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b0ba      	sub	sp, #232	; 0xe8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_UART_IRQHandler+0x66>
 80027f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fb63 	bl	8002eca <UART_Receive_IT>
      return;
 8002804:	e25b      	b.n	8002cbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80de 	beq.w	80029cc <HAL_UART_IRQHandler+0x22c>
 8002810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d106      	bne.n	800282a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800281c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002820:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80d1 	beq.w	80029cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800282a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_UART_IRQHandler+0xae>
 8002836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800284e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <HAL_UART_IRQHandler+0xd2>
 800285a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f043 0202 	orr.w	r2, r3, #2
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_UART_IRQHandler+0xf6>
 800287e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f043 0204 	orr.w	r2, r3, #4
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d011      	beq.n	80028c6 <HAL_UART_IRQHandler+0x126>
 80028a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	f043 0208 	orr.w	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 81f2 	beq.w	8002cb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_UART_IRQHandler+0x14e>
 80028dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 faee 	bl	8002eca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <HAL_UART_IRQHandler+0x17a>
 8002912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d04f      	beq.n	80029ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f9f8 	bl	8002d10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d041      	beq.n	80029b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3314      	adds	r3, #20
 8002934:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800293c:	e853 3f00 	ldrex	r3, [r3]
 8002940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800294c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3314      	adds	r3, #20
 8002956:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800295a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800295e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002966:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800296a:	e841 2300 	strex	r3, r2, [r1]
 800296e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1d9      	bne.n	800292e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d013      	beq.n	80029aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	4a7e      	ldr	r2, [pc, #504]	; (8002b80 <HAL_UART_IRQHandler+0x3e0>)
 8002988:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fc66 	bl	8001260 <HAL_DMA_Abort_IT>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d016      	beq.n	80029c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029a4:	4610      	mov	r0, r2
 80029a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a8:	e00e      	b.n	80029c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f99c 	bl	8002ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b0:	e00a      	b.n	80029c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f998 	bl	8002ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b8:	e006      	b.n	80029c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f994 	bl	8002ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80029c6:	e175      	b.n	8002cb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c8:	bf00      	nop
    return;
 80029ca:	e173      	b.n	8002cb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	f040 814f 	bne.w	8002c74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8148 	beq.w	8002c74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8141 	beq.w	8002c74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80b6 	beq.w	8002b84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8145 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a36:	429a      	cmp	r2, r3
 8002a38:	f080 813e 	bcs.w	8002cb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	f000 8088 	beq.w	8002b60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	330c      	adds	r3, #12
 8002a56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a5e:	e853 3f00 	ldrex	r3, [r3]
 8002a62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	330c      	adds	r3, #12
 8002a78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a7c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a8c:	e841 2300 	strex	r3, r2, [r1]
 8002a90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1d9      	bne.n	8002a50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3314      	adds	r3, #20
 8002aa2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002aac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3314      	adds	r3, #20
 8002abc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ac0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ac4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ac8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002acc:	e841 2300 	strex	r3, r2, [r1]
 8002ad0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e1      	bne.n	8002a9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3314      	adds	r3, #20
 8002ade:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae2:	e853 3f00 	ldrex	r3, [r3]
 8002ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3314      	adds	r3, #20
 8002af8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002afc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002afe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b04:	e841 2300 	strex	r3, r2, [r1]
 8002b08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e3      	bne.n	8002ad8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b30:	f023 0310 	bic.w	r3, r3, #16
 8002b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b42:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e3      	bne.n	8002b1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fb45 	bl	80011ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f8bf 	bl	8002cfa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b7c:	e09c      	b.n	8002cb8 <HAL_UART_IRQHandler+0x518>
 8002b7e:	bf00      	nop
 8002b80:	08002dd5 	.word	0x08002dd5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 808e 	beq.w	8002cbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8089 	beq.w	8002cbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	330c      	adds	r3, #12
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	e853 3f00 	ldrex	r3, [r3]
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bce:	647a      	str	r2, [r7, #68]	; 0x44
 8002bd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bd6:	e841 2300 	strex	r3, r2, [r1]
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1e3      	bne.n	8002baa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3314      	adds	r3, #20
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3314      	adds	r3, #20
 8002c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c06:	633a      	str	r2, [r7, #48]	; 0x30
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1e3      	bne.n	8002be2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	e853 3f00 	ldrex	r3, [r3]
 8002c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0310 	bic.w	r3, r3, #16
 8002c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c4c:	61fa      	str	r2, [r7, #28]
 8002c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	69b9      	ldr	r1, [r7, #24]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	617b      	str	r3, [r7, #20]
   return(result);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e3      	bne.n	8002c28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f844 	bl	8002cfa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c72:	e023      	b.n	8002cbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d009      	beq.n	8002c94 <HAL_UART_IRQHandler+0x4f4>
 8002c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f8b5 	bl	8002dfc <UART_Transmit_IT>
    return;
 8002c92:	e014      	b.n	8002cbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00e      	beq.n	8002cbe <HAL_UART_IRQHandler+0x51e>
 8002ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8f4 	bl	8002e9a <UART_EndTransmit_IT>
    return;
 8002cb2:	e004      	b.n	8002cbe <HAL_UART_IRQHandler+0x51e>
    return;
 8002cb4:	bf00      	nop
 8002cb6:	e002      	b.n	8002cbe <HAL_UART_IRQHandler+0x51e>
      return;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <HAL_UART_IRQHandler+0x51e>
      return;
 8002cbc:	bf00      	nop
  }
}
 8002cbe:	37e8      	adds	r7, #232	; 0xe8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	460b      	mov	r3, r1
 8002d04:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b095      	sub	sp, #84	; 0x54
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d38:	643a      	str	r2, [r7, #64]	; 0x40
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e5      	bne.n	8002d18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3314      	adds	r3, #20
 8002d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	e853 3f00 	ldrex	r3, [r3]
 8002d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3314      	adds	r3, #20
 8002d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e5      	bne.n	8002d4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d119      	bne.n	8002dbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f023 0310 	bic.w	r3, r3, #16
 8002d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002da8:	61ba      	str	r2, [r7, #24]
 8002daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6979      	ldr	r1, [r7, #20]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	613b      	str	r3, [r7, #16]
   return(result);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dca:	bf00      	nop
 8002dcc:	3754      	adds	r7, #84	; 0x54
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f7ff ff7a 	bl	8002ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b21      	cmp	r3, #33	; 0x21
 8002e0e:	d13e      	bne.n	8002e8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e18:	d114      	bne.n	8002e44 <UART_Transmit_IT+0x48>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d110      	bne.n	8002e44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	1c9a      	adds	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	621a      	str	r2, [r3, #32]
 8002e42:	e008      	b.n	8002e56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	1c59      	adds	r1, r3, #1
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6211      	str	r1, [r2, #32]
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4619      	mov	r1, r3
 8002e64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10f      	bne.n	8002e8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
  }
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ff02 	bl	8002cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b08c      	sub	sp, #48	; 0x30
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b22      	cmp	r3, #34	; 0x22
 8002edc:	f040 80ae 	bne.w	800303c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee8:	d117      	bne.n	8002f1a <UART_Receive_IT+0x50>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d113      	bne.n	8002f1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	1c9a      	adds	r2, r3, #2
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
 8002f18:	e026      	b.n	8002f68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2c:	d007      	beq.n	8002f3e <UART_Receive_IT+0x74>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10a      	bne.n	8002f4c <UART_Receive_IT+0x82>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e008      	b.n	8002f5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4619      	mov	r1, r3
 8002f76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d15d      	bne.n	8003038 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0220 	bic.w	r2, r2, #32
 8002f8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d135      	bne.n	800302e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	e853 3f00 	ldrex	r3, [r3]
 8002fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f023 0310 	bic.w	r3, r3, #16
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	623a      	str	r2, [r7, #32]
 8002fea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	69f9      	ldr	r1, [r7, #28]
 8002fee:	6a3a      	ldr	r2, [r7, #32]
 8002ff0:	e841 2300 	strex	r3, r2, [r1]
 8002ff4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e5      	bne.n	8002fc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b10      	cmp	r3, #16
 8003008:	d10a      	bne.n	8003020 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003024:	4619      	mov	r1, r3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fe67 	bl	8002cfa <HAL_UARTEx_RxEventCallback>
 800302c:	e002      	b.n	8003034 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff fe51 	bl	8002cd6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	e002      	b.n	800303e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	3730      	adds	r7, #48	; 0x30
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003082:	f023 030c 	bic.w	r3, r3, #12
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	430b      	orrs	r3, r1
 800308e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2c      	ldr	r2, [pc, #176]	; (800315c <UART_SetConfig+0x114>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d103      	bne.n	80030b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030b0:	f7fe fef6 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	e002      	b.n	80030be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030b8:	f7fe fede 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 80030bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009a      	lsls	r2, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	4a22      	ldr	r2, [pc, #136]	; (8003160 <UART_SetConfig+0x118>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	0119      	lsls	r1, r3, #4
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	009a      	lsls	r2, r3, #2
 80030e8:	441a      	add	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f4:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <UART_SetConfig+0x118>)
 80030f6:	fba3 0302 	umull	r0, r3, r3, r2
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	2064      	movs	r0, #100	; 0x64
 80030fe:	fb00 f303 	mul.w	r3, r0, r3
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	3332      	adds	r3, #50	; 0x32
 8003108:	4a15      	ldr	r2, [pc, #84]	; (8003160 <UART_SetConfig+0x118>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003114:	4419      	add	r1, r3
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	009a      	lsls	r2, r3, #2
 8003120:	441a      	add	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	fbb2 f2f3 	udiv	r2, r2, r3
 800312c:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <UART_SetConfig+0x118>)
 800312e:	fba3 0302 	umull	r0, r3, r3, r2
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	2064      	movs	r0, #100	; 0x64
 8003136:	fb00 f303 	mul.w	r3, r0, r3
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	3332      	adds	r3, #50	; 0x32
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <UART_SetConfig+0x118>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	f003 020f 	and.w	r2, r3, #15
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	440a      	add	r2, r1
 8003152:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40013800 	.word	0x40013800
 8003160:	51eb851f 	.word	0x51eb851f

08003164 <__libc_init_array>:
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	2600      	movs	r6, #0
 8003168:	4d0c      	ldr	r5, [pc, #48]	; (800319c <__libc_init_array+0x38>)
 800316a:	4c0d      	ldr	r4, [pc, #52]	; (80031a0 <__libc_init_array+0x3c>)
 800316c:	1b64      	subs	r4, r4, r5
 800316e:	10a4      	asrs	r4, r4, #2
 8003170:	42a6      	cmp	r6, r4
 8003172:	d109      	bne.n	8003188 <__libc_init_array+0x24>
 8003174:	f000 f822 	bl	80031bc <_init>
 8003178:	2600      	movs	r6, #0
 800317a:	4d0a      	ldr	r5, [pc, #40]	; (80031a4 <__libc_init_array+0x40>)
 800317c:	4c0a      	ldr	r4, [pc, #40]	; (80031a8 <__libc_init_array+0x44>)
 800317e:	1b64      	subs	r4, r4, r5
 8003180:	10a4      	asrs	r4, r4, #2
 8003182:	42a6      	cmp	r6, r4
 8003184:	d105      	bne.n	8003192 <__libc_init_array+0x2e>
 8003186:	bd70      	pop	{r4, r5, r6, pc}
 8003188:	f855 3b04 	ldr.w	r3, [r5], #4
 800318c:	4798      	blx	r3
 800318e:	3601      	adds	r6, #1
 8003190:	e7ee      	b.n	8003170 <__libc_init_array+0xc>
 8003192:	f855 3b04 	ldr.w	r3, [r5], #4
 8003196:	4798      	blx	r3
 8003198:	3601      	adds	r6, #1
 800319a:	e7f2      	b.n	8003182 <__libc_init_array+0x1e>
 800319c:	08003200 	.word	0x08003200
 80031a0:	08003200 	.word	0x08003200
 80031a4:	08003200 	.word	0x08003200
 80031a8:	08003204 	.word	0x08003204

080031ac <memset>:
 80031ac:	4603      	mov	r3, r0
 80031ae:	4402      	add	r2, r0
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d100      	bne.n	80031b6 <memset+0xa>
 80031b4:	4770      	bx	lr
 80031b6:	f803 1b01 	strb.w	r1, [r3], #1
 80031ba:	e7f9      	b.n	80031b0 <memset+0x4>

080031bc <_init>:
 80031bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031be:	bf00      	nop
 80031c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c2:	bc08      	pop	{r3}
 80031c4:	469e      	mov	lr, r3
 80031c6:	4770      	bx	lr

080031c8 <_fini>:
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ca:	bf00      	nop
 80031cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ce:	bc08      	pop	{r3}
 80031d0:	469e      	mov	lr, r3
 80031d2:	4770      	bx	lr
