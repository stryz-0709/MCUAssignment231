
trafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08004c40  08004c40  00014c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004da4  08004da4  00020144  2**0
                  CONTENTS
  4 .ARM          00000000  08004da4  08004da4  00020144  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004da4  08004da4  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da4  08004da4  00014da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  08004dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  20000144  08004ef0  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  08004ef0  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002016d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf29  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029d3  00000000  00000000  0002c0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  0002eab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a89  00000000  00000000  0002f890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a0e8  00000000  00000000  00030319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012fbd  00000000  00000000  0004a401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b6a4  00000000  00000000  0005d3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c50  00000000  00000000  000e8a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000ec6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000144 	.word	0x20000144
 800012c:	00000000 	.word	0x00000000
 8000130:	08004c28 	.word	0x08004c28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000148 	.word	0x20000148
 800014c:	08004c28 	.word	0x08004c28

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <__aeabi_d2uiz>:
 800076c:	004a      	lsls	r2, r1, #1
 800076e:	d211      	bcs.n	8000794 <__aeabi_d2uiz+0x28>
 8000770:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000774:	d211      	bcs.n	800079a <__aeabi_d2uiz+0x2e>
 8000776:	d50d      	bpl.n	8000794 <__aeabi_d2uiz+0x28>
 8000778:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800077c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000780:	d40e      	bmi.n	80007a0 <__aeabi_d2uiz+0x34>
 8000782:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800078e:	fa23 f002 	lsr.w	r0, r3, r2
 8000792:	4770      	bx	lr
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	4770      	bx	lr
 800079a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800079e:	d102      	bne.n	80007a6 <__aeabi_d2uiz+0x3a>
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295
 80007a4:	4770      	bx	lr
 80007a6:	f04f 0000 	mov.w	r0, #0
 80007aa:	4770      	bx	lr

080007ac <isButtonPressed>:
int KeyReg1 [4] = {NORMAL_STATE};
int KeyReg2 [4] = {NORMAL_STATE};
int KeyReg3 [4] = {NORMAL_STATE};
int TimerForKeyPress [4] = {500};

int isButtonPressed(int button){
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	if (button_flag[button]){
 80007b4:	4a09      	ldr	r2, [pc, #36]	; (80007dc <isButtonPressed+0x30>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d006      	beq.n	80007ce <isButtonPressed+0x22>
		button_flag[button] = 0;
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <isButtonPressed+0x30>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2100      	movs	r1, #0
 80007c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e000      	b.n	80007d0 <isButtonPressed+0x24>
	}
	return 0;
 80007ce:	2300      	movs	r3, #0
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000160 	.word	0x20000160

080007e0 <subKeyProcess>:

void subKeyProcess(int button){
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	button_flag[button] = 1;
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <subKeyProcess+0x1c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2101      	movs	r1, #1
 80007ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	20000160 	.word	0x20000160

08000800 <getKeyInput>:


void getKeyInput(int button){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	KeyReg0[button] = KeyReg1[button];
 8000808:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <getKeyInput+0xe8>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000810:	4936      	ldr	r1, [pc, #216]	; (80008ec <getKeyInput+0xec>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[button] = KeyReg2[button];
 8000818:	4a35      	ldr	r2, [pc, #212]	; (80008f0 <getKeyInput+0xf0>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000820:	4931      	ldr	r1, [pc, #196]	; (80008e8 <getKeyInput+0xe8>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[button] = HAL_GPIO_ReadPin(BUTTON_PORT[button], BUTTON_PIN[button]);
 8000828:	4a32      	ldr	r2, [pc, #200]	; (80008f4 <getKeyInput+0xf4>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000830:	4931      	ldr	r1, [pc, #196]	; (80008f8 <getKeyInput+0xf8>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000838:	4619      	mov	r1, r3
 800083a:	4610      	mov	r0, r2
 800083c:	f001 ffa8 	bl	8002790 <HAL_GPIO_ReadPin>
 8000840:	4603      	mov	r3, r0
 8000842:	4619      	mov	r1, r3
 8000844:	4a2a      	ldr	r2, [pc, #168]	; (80008f0 <getKeyInput+0xf0>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if ((KeyReg0[button] == KeyReg1[button]) && (KeyReg1[button] == KeyReg2[button])){
 800084c:	4a27      	ldr	r2, [pc, #156]	; (80008ec <getKeyInput+0xec>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000854:	4924      	ldr	r1, [pc, #144]	; (80008e8 <getKeyInput+0xe8>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800085c:	429a      	cmp	r2, r3
 800085e:	d13f      	bne.n	80008e0 <getKeyInput+0xe0>
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <getKeyInput+0xe8>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000868:	4921      	ldr	r1, [pc, #132]	; (80008f0 <getKeyInput+0xf0>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000870:	429a      	cmp	r2, r3
 8000872:	d135      	bne.n	80008e0 <getKeyInput+0xe0>
		if (KeyReg3[button] != KeyReg2[button]){
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <getKeyInput+0xfc>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800087c:	491c      	ldr	r1, [pc, #112]	; (80008f0 <getKeyInput+0xf0>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000884:	429a      	cmp	r2, r3
 8000886:	d017      	beq.n	80008b8 <getKeyInput+0xb8>
			KeyReg3[button] = KeyReg2[button];
 8000888:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <getKeyInput+0xf0>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000890:	491a      	ldr	r1, [pc, #104]	; (80008fc <getKeyInput+0xfc>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg2[button] == PRESSED_STATE){
 8000898:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <getKeyInput+0xf0>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d11d      	bne.n	80008e0 <getKeyInput+0xe0>
				subKeyProcess(button);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff9b 	bl	80007e0 <subKeyProcess>
				TimerForKeyPress[button] = 500;
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <getKeyInput+0x100>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
				KeyReg3[button] = NORMAL_STATE;
			}
		}
	}
}
 80008b6:	e013      	b.n	80008e0 <getKeyInput+0xe0>
			TimerForKeyPress[button]--;
 80008b8:	4a11      	ldr	r2, [pc, #68]	; (8000900 <getKeyInput+0x100>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c0:	1e5a      	subs	r2, r3, #1
 80008c2:	490f      	ldr	r1, [pc, #60]	; (8000900 <getKeyInput+0x100>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
 80008ca:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <getKeyInput+0x100>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	dc04      	bgt.n	80008e0 <getKeyInput+0xe0>
				KeyReg3[button] = NORMAL_STATE;
 80008d6:	4a09      	ldr	r2, [pc, #36]	; (80008fc <getKeyInput+0xfc>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2101      	movs	r1, #1
 80008dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000028 	.word	0x20000028
 80008ec:	20000018 	.word	0x20000018
 80008f0:	20000038 	.word	0x20000038
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000010 	.word	0x20000010
 80008fc:	20000048 	.word	0x20000048
 8000900:	20000058 	.word	0x20000058

08000904 <stopBuzzer>:
//	else {
//		redBuzzerCounter  = 64000;
//	}
}

void stopBuzzer(int light) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
//	__HAL_TIM_SET_AUTORELOAD(&htim3, 0);
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <stopBuzzer+0x38>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2200      	movs	r2, #0
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
	if (light == GREEN) setTimer(4, 2000);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b17      	cmp	r3, #23
 8000918:	d104      	bne.n	8000924 <stopBuzzer+0x20>
 800091a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800091e:	2004      	movs	r0, #4
 8000920:	f000 fe5c 	bl	80015dc <setTimer>
	if (light == AMBER) setTimer(4, 1000);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b16      	cmp	r3, #22
 8000928:	d104      	bne.n	8000934 <stopBuzzer+0x30>
 800092a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800092e:	2004      	movs	r0, #4
 8000930:	f000 fe54 	bl	80015dc <setTimer>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000518 	.word	0x20000518

08000940 <initDuration>:
#include "fsm_automatic.h"

int initMode[3] = {RED, GREEN, OFF};


int initDuration(int lane){
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	return (lane == 1)? GREEN_DURATION : RED_DURATION;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d102      	bne.n	8000954 <initDuration+0x14>
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <initDuration+0x24>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	e001      	b.n	8000958 <initDuration+0x18>
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <initDuration+0x28>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	200000bc 	.word	0x200000bc
 8000968:	200000b4 	.word	0x200000b4

0800096c <fsm_automatic_run>:
//void buzzer(int val1, int val2) {
//	__HAL_TIM_SET_AUTORELOAD(&htim3, 5*val1);
//	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0.6 * (5*val2));
//}

void fsm_automatic_run(int lane){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	switch(LED_MODE[lane]){
 8000974:	4a63      	ldr	r2, [pc, #396]	; (8000b04 <fsm_automatic_run+0x198>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097c:	3b01      	subs	r3, #1
 800097e:	2b16      	cmp	r3, #22
 8000980:	f200 80b5 	bhi.w	8000aee <fsm_automatic_run+0x182>
 8000984:	a201      	add	r2, pc, #4	; (adr r2, 800098c <fsm_automatic_run+0x20>)
 8000986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098a:	bf00      	nop
 800098c:	080009e9 	.word	0x080009e9
 8000990:	08000aef 	.word	0x08000aef
 8000994:	08000aef 	.word	0x08000aef
 8000998:	08000aef 	.word	0x08000aef
 800099c:	08000aef 	.word	0x08000aef
 80009a0:	08000aef 	.word	0x08000aef
 80009a4:	08000aef 	.word	0x08000aef
 80009a8:	08000aef 	.word	0x08000aef
 80009ac:	08000aef 	.word	0x08000aef
 80009b0:	08000aef 	.word	0x08000aef
 80009b4:	08000aef 	.word	0x08000aef
 80009b8:	08000ae7 	.word	0x08000ae7
 80009bc:	08000aef 	.word	0x08000aef
 80009c0:	08000aef 	.word	0x08000aef
 80009c4:	08000aef 	.word	0x08000aef
 80009c8:	08000aef 	.word	0x08000aef
 80009cc:	08000aef 	.word	0x08000aef
 80009d0:	08000aef 	.word	0x08000aef
 80009d4:	08000aef 	.word	0x08000aef
 80009d8:	08000aef 	.word	0x08000aef
 80009dc:	08000a21 	.word	0x08000a21
 80009e0:	08000a63 	.word	0x08000a63
 80009e4:	08000aad 	.word	0x08000aad
		case INIT:
			//Turn off all lights
			setTrafficLight(lane, OFF);
 80009e8:	210c      	movs	r1, #12
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f001 f850 	bl	8001a90 <setTrafficLight>
			val = MAX;
 80009f0:	4b45      	ldr	r3, [pc, #276]	; (8000b08 <fsm_automatic_run+0x19c>)
 80009f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80009f6:	601a      	str	r2, [r3, #0]

			//Change mode and duration
			LED_MODE[lane] = initMode[lane];
 80009f8:	4a44      	ldr	r2, [pc, #272]	; (8000b0c <fsm_automatic_run+0x1a0>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a00:	4940      	ldr	r1, [pc, #256]	; (8000b04 <fsm_automatic_run+0x198>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setTimer(lane, initDuration(lane)*100);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ff99 	bl	8000940 <initDuration>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2264      	movs	r2, #100	; 0x64
 8000a12:	fb02 f303 	mul.w	r3, r2, r3
 8000a16:	4619      	mov	r1, r3
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 fddf 	bl	80015dc <setTimer>

			break;
 8000a1e:	e06d      	b.n	8000afc <fsm_automatic_run+0x190>
		case RED:
			setTrafficLight(lane, RED);
 8000a20:	2115      	movs	r1, #21
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f001 f834 	bl	8001a90 <setTrafficLight>
			val = MAX;
 8000a28:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <fsm_automatic_run+0x19c>)
 8000a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a2e:	601a      	str	r2, [r3, #0]
//			buzzer(val, 0);

			//Timer flag to change light
			if(timer_flag[lane] && TRAFFIC_MODE != MANUAL){
 8000a30:	4a37      	ldr	r2, [pc, #220]	; (8000b10 <fsm_automatic_run+0x1a4>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d05a      	beq.n	8000af2 <fsm_automatic_run+0x186>
 8000a3c:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <fsm_automatic_run+0x1a8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b0d      	cmp	r3, #13
 8000a42:	d056      	beq.n	8000af2 <fsm_automatic_run+0x186>
				LED_MODE[lane] = GREEN;
 8000a44:	4a2f      	ldr	r2, [pc, #188]	; (8000b04 <fsm_automatic_run+0x198>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2117      	movs	r1, #23
 8000a4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//				if (lane == 2) setTimer(lane, (GREEN_DURATION+AMBER_DURATION)*100);
				setTimer(lane, GREEN_DURATION*100);
 8000a4e:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <fsm_automatic_run+0x1ac>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2264      	movs	r2, #100	; 0x64
 8000a54:	fb02 f303 	mul.w	r3, r2, r3
 8000a58:	4619      	mov	r1, r3
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 fdbe 	bl	80015dc <setTimer>
//				setTimer(5,10);
			}
			break;
 8000a60:	e047      	b.n	8000af2 <fsm_automatic_run+0x186>
		case AMBER:
			if (lane == 2){
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d104      	bne.n	8000a72 <fsm_automatic_run+0x106>
				setTrafficLight(lane, GREEN);
 8000a68:	2117      	movs	r1, #23
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f001 f810 	bl	8001a90 <setTrafficLight>
 8000a70:	e003      	b.n	8000a7a <fsm_automatic_run+0x10e>
//					buzzer(val, val);
//					val = val - MAX/(GREEN_DURATION + AMBER_DURATION - 1);
//				}

			}
			else setTrafficLight(lane, AMBER);
 8000a72:	2116      	movs	r1, #22
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f001 f80b 	bl	8001a90 <setTrafficLight>
//				buzzer(val, 0);



			//Timer flag to change light
			if(timer_flag[lane] && TRAFFIC_MODE != MANUAL){
 8000a7a:	4a25      	ldr	r2, [pc, #148]	; (8000b10 <fsm_automatic_run+0x1a4>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d037      	beq.n	8000af6 <fsm_automatic_run+0x18a>
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <fsm_automatic_run+0x1a8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b0d      	cmp	r3, #13
 8000a8c:	d033      	beq.n	8000af6 <fsm_automatic_run+0x18a>
				LED_MODE[lane] = RED;
 8000a8e:	4a1d      	ldr	r2, [pc, #116]	; (8000b04 <fsm_automatic_run+0x198>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2115      	movs	r1, #21
 8000a94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 8000a98:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <fsm_automatic_run+0x1b0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2264      	movs	r2, #100	; 0x64
 8000a9e:	fb02 f303 	mul.w	r3, r2, r3
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 fd99 	bl	80015dc <setTimer>
			}


			break;
 8000aaa:	e024      	b.n	8000af6 <fsm_automatic_run+0x18a>
		case GREEN:

			setTrafficLight(lane, GREEN);
 8000aac:	2117      	movs	r1, #23
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 ffee 	bl	8001a90 <setTrafficLight>
			}
//			else buzzer(val, 0);

			//Timer flag to change light

			if(timer_flag[lane] && TRAFFIC_MODE != MANUAL){
 8000ab4:	4a16      	ldr	r2, [pc, #88]	; (8000b10 <fsm_automatic_run+0x1a4>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d01c      	beq.n	8000afa <fsm_automatic_run+0x18e>
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <fsm_automatic_run+0x1a8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b0d      	cmp	r3, #13
 8000ac6:	d018      	beq.n	8000afa <fsm_automatic_run+0x18e>
//				if (lane == 2){
//					LED_MODE[lane] = RED;
//					setTimer(lane, RED_DURATION*100);
//				}
//				else {
					LED_MODE[lane] = AMBER;
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <fsm_automatic_run+0x198>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2116      	movs	r1, #22
 8000ace:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					setTimer(lane, AMBER_DURATION*100);
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <fsm_automatic_run+0x1b4>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2264      	movs	r2, #100	; 0x64
 8000ad8:	fb02 f303 	mul.w	r3, r2, r3
 8000adc:	4619      	mov	r1, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 fd7c 	bl	80015dc <setTimer>

//			if(TRAFFIC_MODE == MANUAL){
//				if (isButtonPressed(1)) LED_MODE[lane] = AMBER;
//				if (isButtonPressed(2)) LED_MODE[lane] = RED;
//			}
			break;
 8000ae4:	e009      	b.n	8000afa <fsm_automatic_run+0x18e>
		case OFF:
			stopBuzzer(RED);
 8000ae6:	2015      	movs	r0, #21
 8000ae8:	f7ff ff0c 	bl	8000904 <stopBuzzer>
			break;
 8000aec:	e006      	b.n	8000afc <fsm_automatic_run+0x190>
		default:
			break;
 8000aee:	bf00      	nop
 8000af0:	e004      	b.n	8000afc <fsm_automatic_run+0x190>
			break;
 8000af2:	bf00      	nop
 8000af4:	e002      	b.n	8000afc <fsm_automatic_run+0x190>
			break;
 8000af6:	bf00      	nop
 8000af8:	e000      	b.n	8000afc <fsm_automatic_run+0x190>
			break;
 8000afa:	bf00      	nop
	}
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000a0 	.word	0x200000a0
 8000b08:	200000c0 	.word	0x200000c0
 8000b0c:	20000068 	.word	0x20000068
 8000b10:	200004b4 	.word	0x200004b4
 8000b14:	200000ac 	.word	0x200000ac
 8000b18:	200000bc 	.word	0x200000bc
 8000b1c:	200000b4 	.word	0x200000b4
 8000b20:	200000b8 	.word	0x200000b8

08000b24 <manualPlus>:
int tempDuration = 0;

int LIGHT[8] = {RED, RED, GREEN, AMBER, GREEN, AMBER, RED, RED};
int manualMode[2] = {0, 4};

void manualPlus(int lane){
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	manualMode[lane] += 1;
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <manualPlus+0x58>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	4911      	ldr	r1, [pc, #68]	; (8000b7c <manualPlus+0x58>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (manualMode[lane] > (lane+1)*4-1) manualMode[lane] = lane*4;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3301      	adds	r3, #1
 8000b42:	009a      	lsls	r2, r3, #2
 8000b44:	490d      	ldr	r1, [pc, #52]	; (8000b7c <manualPlus+0x58>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dc05      	bgt.n	8000b5c <manualPlus+0x38>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	009a      	lsls	r2, r3, #2
 8000b54:	4909      	ldr	r1, [pc, #36]	; (8000b7c <manualPlus+0x58>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	LED_MODE[lane] = LIGHT[manualMode[lane]];
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <manualPlus+0x58>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <manualPlus+0x5c>)
 8000b66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b6a:	4906      	ldr	r1, [pc, #24]	; (8000b84 <manualPlus+0x60>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	20000094 	.word	0x20000094
 8000b80:	20000074 	.word	0x20000074
 8000b84:	200000a0 	.word	0x200000a0

08000b88 <manualMinus>:

void manualMinus(int lane){
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	manualMode[lane] -= 1;
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <manualMinus+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	1e5a      	subs	r2, r3, #1
 8000b9a:	4912      	ldr	r1, [pc, #72]	; (8000be4 <manualMinus+0x5c>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (manualMode[lane] < lane*4) manualMode[lane] = (lane+1)*4-1;
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <manualMinus+0x5c>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	da07      	bge.n	8000bc2 <manualMinus+0x3a>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	490a      	ldr	r1, [pc, #40]	; (8000be4 <manualMinus+0x5c>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	LED_MODE[lane] = LIGHT[manualMode[lane]];
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <manualMinus+0x5c>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bca:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <manualMinus+0x60>)
 8000bcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bd0:	4906      	ldr	r1, [pc, #24]	; (8000bec <manualMinus+0x64>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000094 	.word	0x20000094
 8000be8:	20000074 	.word	0x20000074
 8000bec:	200000a0 	.word	0x200000a0

08000bf0 <display>:


void display(int mode, int duration){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af04      	add	r7, sp, #16
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
	displayUART(mode, duration, 0, 0, 0, 0, 0);
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9302      	str	r3, [sp, #8]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	2300      	movs	r3, #0
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2300      	movs	r3, #0
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6839      	ldr	r1, [r7, #0]
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f001 f863 	bl	8001cd8 <displayUART>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <changeMode>:

//Change mode
void changeMode(int mode, int duration, int ledMode){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	//Display duration
	display(mode, duration);
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff ffe0 	bl	8000bf0 <display>
	tempDuration = duration;
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <changeMode+0x60>)
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	6013      	str	r3, [r2, #0]

	//Change traffic lights to toggle the right color
	LED_MODE[0] = ledMode;
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <changeMode+0x64>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6013      	str	r3, [r2, #0]
	LED_MODE[1] = ledMode;
 8000c3c:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <changeMode+0x64>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6053      	str	r3, [r2, #4]

	//Change ped light mode
	LED_MODE[2] = ledMode;
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <changeMode+0x64>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6093      	str	r3, [r2, #8]

	//Turn off all lights
	setTrafficLight(0, OFF);
 8000c48:	210c      	movs	r1, #12
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 ff20 	bl	8001a90 <setTrafficLight>
	setTrafficLight(1, OFF);
 8000c50:	210c      	movs	r1, #12
 8000c52:	2001      	movs	r0, #1
 8000c54:	f000 ff1c 	bl	8001a90 <setTrafficLight>
	setTrafficLight(2, OFF);
 8000c58:	210c      	movs	r1, #12
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f000 ff18 	bl	8001a90 <setTrafficLight>

	//Update mode
	TRAFFIC_MODE = mode;
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <changeMode+0x68>)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6013      	str	r3, [r2, #0]
	PED_MODE = ledMode;
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <changeMode+0x6c>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6013      	str	r3, [r2, #0]

	//Set timer to toggle lights
	setTimer(3, 25);
 8000c6c:	2119      	movs	r1, #25
 8000c6e:	2003      	movs	r0, #3
 8000c70:	f000 fcb4 	bl	80015dc <setTimer>
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000170 	.word	0x20000170
 8000c80:	200000a0 	.word	0x200000a0
 8000c84:	200000ac 	.word	0x200000ac
 8000c88:	200000b0 	.word	0x200000b0

08000c8c <changeDuration>:


//Increment duration
void changeDuration(int mode){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	tempDuration++;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <changeDuration+0x34>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <changeDuration+0x34>)
 8000c9c:	6013      	str	r3, [r2, #0]
	if (tempDuration == 100) tempDuration = 1;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <changeDuration+0x34>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b64      	cmp	r3, #100	; 0x64
 8000ca4:	d102      	bne.n	8000cac <changeDuration+0x20>
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <changeDuration+0x34>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]

	//Display duration
	display(mode, tempDuration);
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <changeDuration+0x34>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ff9c 	bl	8000bf0 <display>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000170 	.word	0x20000170

08000cc4 <toggle>:


//Toggle Lights
void toggle(int mode){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	toggleLight(0, mode);
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 ff8a 	bl	8001be8 <toggleLight>
	toggleLight(1, mode);
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f000 ff86 	bl	8001be8 <toggleLight>
	toggleLight(2, mode);
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f000 ff82 	bl	8001be8 <toggleLight>
	setTimer(3, 25);
 8000ce4:	2119      	movs	r1, #25
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f000 fc78 	bl	80015dc <setTimer>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <displayCountdown>:


void displayCountdown(){
 8000cf4:	b5b0      	push	{r4, r5, r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af04      	add	r7, sp, #16
	if (timer_counter[0] % 100 == 0 && timer_counter[1] % 100 == 0){
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <displayCountdown+0x88>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <displayCountdown+0x8c>)
 8000d00:	fb83 1302 	smull	r1, r3, r3, r2
 8000d04:	1159      	asrs	r1, r3, #5
 8000d06:	17d3      	asrs	r3, r2, #31
 8000d08:	1acb      	subs	r3, r1, r3
 8000d0a:	2164      	movs	r1, #100	; 0x64
 8000d0c:	fb01 f303 	mul.w	r3, r1, r3
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d12e      	bne.n	8000d74 <displayCountdown+0x80>
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <displayCountdown+0x88>)
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <displayCountdown+0x8c>)
 8000d1c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d20:	1159      	asrs	r1, r3, #5
 8000d22:	17d3      	asrs	r3, r2, #31
 8000d24:	1acb      	subs	r3, r1, r3
 8000d26:	2164      	movs	r1, #100	; 0x64
 8000d28:	fb01 f303 	mul.w	r3, r1, r3
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d120      	bne.n	8000d74 <displayCountdown+0x80>
		displayUART(COUNTDOWN, timer_counter[0] / 100, timer_counter[1] / 100, LED_MODE[0], LED_MODE[1], LED_MODE[2], PED_MODE);
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <displayCountdown+0x88>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <displayCountdown+0x8c>)
 8000d38:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3c:	1152      	asrs	r2, r2, #5
 8000d3e:	17db      	asrs	r3, r3, #31
 8000d40:	1ad0      	subs	r0, r2, r3
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <displayCountdown+0x88>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <displayCountdown+0x8c>)
 8000d48:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4c:	1152      	asrs	r2, r2, #5
 8000d4e:	17db      	asrs	r3, r3, #31
 8000d50:	1ad4      	subs	r4, r2, r3
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <displayCountdown+0x90>)
 8000d54:	681d      	ldr	r5, [r3, #0]
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <displayCountdown+0x90>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <displayCountdown+0x90>)
 8000d5c:	6892      	ldr	r2, [r2, #8]
 8000d5e:	490a      	ldr	r1, [pc, #40]	; (8000d88 <displayCountdown+0x94>)
 8000d60:	6809      	ldr	r1, [r1, #0]
 8000d62:	9102      	str	r1, [sp, #8]
 8000d64:	9201      	str	r2, [sp, #4]
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	462b      	mov	r3, r5
 8000d6a:	4622      	mov	r2, r4
 8000d6c:	4601      	mov	r1, r0
 8000d6e:	2021      	movs	r0, #33	; 0x21
 8000d70:	f000 ffb2 	bl	8001cd8 <displayUART>
	}
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bdb0      	pop	{r4, r5, r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000049c 	.word	0x2000049c
 8000d80:	51eb851f 	.word	0x51eb851f
 8000d84:	200000a0 	.word	0x200000a0
 8000d88:	200000b0 	.word	0x200000b0

08000d8c <checkDuration>:


//Check and update duration so that RED = GREEN + AMBER
void checkDuration(int mode){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	int lane = GREEN_DURATION + AMBER_DURATION;
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <checkDuration+0x84>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <checkDuration+0x88>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
	switch (mode){
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b17      	cmp	r3, #23
 8000da4:	d01f      	beq.n	8000de6 <checkDuration+0x5a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b17      	cmp	r3, #23
 8000daa:	dc2c      	bgt.n	8000e06 <checkDuration+0x7a>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b15      	cmp	r3, #21
 8000db0:	d003      	beq.n	8000dba <checkDuration+0x2e>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b16      	cmp	r3, #22
 8000db6:	d00b      	beq.n	8000dd0 <checkDuration+0x44>
		break;
	case GREEN:
		if (lane != RED) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
		break;
	}
}
 8000db8:	e025      	b.n	8000e06 <checkDuration+0x7a>
		if (lane != RED) GREEN_DURATION = RED_DURATION - AMBER_DURATION;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2b15      	cmp	r3, #21
 8000dbe:	d01d      	beq.n	8000dfc <checkDuration+0x70>
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <checkDuration+0x8c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <checkDuration+0x88>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <checkDuration+0x84>)
 8000dcc:	6013      	str	r3, [r2, #0]
		break;
 8000dce:	e015      	b.n	8000dfc <checkDuration+0x70>
		if (lane != RED) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b15      	cmp	r3, #21
 8000dd4:	d014      	beq.n	8000e00 <checkDuration+0x74>
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <checkDuration+0x84>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <checkDuration+0x88>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <checkDuration+0x8c>)
 8000de2:	6013      	str	r3, [r2, #0]
		break;
 8000de4:	e00c      	b.n	8000e00 <checkDuration+0x74>
		if (lane != RED) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2b15      	cmp	r3, #21
 8000dea:	d00b      	beq.n	8000e04 <checkDuration+0x78>
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <checkDuration+0x84>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <checkDuration+0x88>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <checkDuration+0x8c>)
 8000df8:	6013      	str	r3, [r2, #0]
		break;
 8000dfa:	e003      	b.n	8000e04 <checkDuration+0x78>
		break;
 8000dfc:	bf00      	nop
 8000dfe:	e002      	b.n	8000e06 <checkDuration+0x7a>
		break;
 8000e00:	bf00      	nop
 8000e02:	e000      	b.n	8000e06 <checkDuration+0x7a>
		break;
 8000e04:	bf00      	nop
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	200000bc 	.word	0x200000bc
 8000e14:	200000b8 	.word	0x200000b8
 8000e18:	200000b4 	.word	0x200000b4

08000e1c <fsm_manual_run>:

void fsm_manual_run(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af04      	add	r7, sp, #16
	switch(TRAFFIC_MODE){
 8000e22:	4b9b      	ldr	r3, [pc, #620]	; (8001090 <fsm_manual_run+0x274>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	3b0b      	subs	r3, #11
 8000e28:	2b0c      	cmp	r3, #12
 8000e2a:	f200 8123 	bhi.w	8001074 <fsm_manual_run+0x258>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <fsm_manual_run+0x18>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e69 	.word	0x08000e69
 8000e38:	08001075 	.word	0x08001075
 8000e3c:	08000eb1 	.word	0x08000eb1
 8000e40:	08001075 	.word	0x08001075
 8000e44:	08001075 	.word	0x08001075
 8000e48:	08001075 	.word	0x08001075
 8000e4c:	08001075 	.word	0x08001075
 8000e50:	08001075 	.word	0x08001075
 8000e54:	08001075 	.word	0x08001075
 8000e58:	08001075 	.word	0x08001075
 8000e5c:	08000f53 	.word	0x08000f53
 8000e60:	08000fb5 	.word	0x08000fb5
 8000e64:	08001017 	.word	0x08001017
		case AUTO:
			//Change mode
			displayCountdown();
 8000e68:	f7ff ff44 	bl	8000cf4 <displayCountdown>
			if (isButtonPressed(0)){
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fc9d 	bl	80007ac <isButtonPressed>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f000 80ff 	beq.w	8001078 <fsm_manual_run+0x25c>
				changeMode(MANUAL, 0, INIT);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	200d      	movs	r0, #13
 8000e80:	f7ff fecc 	bl	8000c1c <changeMode>
				displayUART(MANUAL, 0, 0, LIGHT[manualMode[0]], LIGHT[manualMode[1]], 0, 0);
 8000e84:	4b83      	ldr	r3, [pc, #524]	; (8001094 <fsm_manual_run+0x278>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a83      	ldr	r2, [pc, #524]	; (8001098 <fsm_manual_run+0x27c>)
 8000e8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e8e:	4b81      	ldr	r3, [pc, #516]	; (8001094 <fsm_manual_run+0x278>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	4981      	ldr	r1, [pc, #516]	; (8001098 <fsm_manual_run+0x27c>)
 8000e94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	9102      	str	r1, [sp, #8]
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	9101      	str	r1, [sp, #4]
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	200d      	movs	r0, #13
 8000eaa:	f000 ff15 	bl	8001cd8 <displayUART>
			}
			break;
 8000eae:	e0e3      	b.n	8001078 <fsm_manual_run+0x25c>

		case MANUAL:
			//Change mode
			if (isButtonPressed(0)){
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fc7b 	bl	80007ac <isButtonPressed>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <fsm_manual_run+0xae>
				changeMode(RED, RED_DURATION, OFF);
 8000ebc:	4b77      	ldr	r3, [pc, #476]	; (800109c <fsm_manual_run+0x280>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	2015      	movs	r0, #21
 8000ec6:	f7ff fea9 	bl	8000c1c <changeMode>
			}

			if (isButtonPressed(1)){
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff fc6e 	bl	80007ac <isButtonPressed>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d01a      	beq.n	8000f0c <fsm_manual_run+0xf0>
				manualPlus(0);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff fe24 	bl	8000b24 <manualPlus>
				manualPlus(1);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff fe21 	bl	8000b24 <manualPlus>
				displayUART(MANUAL, 0, 0, LIGHT[manualMode[0]], LIGHT[manualMode[1]], 0, 0);
 8000ee2:	4b6c      	ldr	r3, [pc, #432]	; (8001094 <fsm_manual_run+0x278>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a6c      	ldr	r2, [pc, #432]	; (8001098 <fsm_manual_run+0x27c>)
 8000ee8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eec:	4b69      	ldr	r3, [pc, #420]	; (8001094 <fsm_manual_run+0x278>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	4969      	ldr	r1, [pc, #420]	; (8001098 <fsm_manual_run+0x27c>)
 8000ef2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	9102      	str	r1, [sp, #8]
 8000efa:	2100      	movs	r1, #0
 8000efc:	9101      	str	r1, [sp, #4]
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	4613      	mov	r3, r2
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	200d      	movs	r0, #13
 8000f08:	f000 fee6 	bl	8001cd8 <displayUART>
			}
			if (isButtonPressed(2)){
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f7ff fc4d 	bl	80007ac <isButtonPressed>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 80b1 	beq.w	800107c <fsm_manual_run+0x260>
				manualMinus(0);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff fe34 	bl	8000b88 <manualMinus>
				manualMinus(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff fe31 	bl	8000b88 <manualMinus>
				displayUART(MANUAL, 0, 0, LIGHT[manualMode[0]], LIGHT[manualMode[1]], 0, 0);
 8000f26:	4b5b      	ldr	r3, [pc, #364]	; (8001094 <fsm_manual_run+0x278>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a5b      	ldr	r2, [pc, #364]	; (8001098 <fsm_manual_run+0x27c>)
 8000f2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f30:	4b58      	ldr	r3, [pc, #352]	; (8001094 <fsm_manual_run+0x278>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	4958      	ldr	r1, [pc, #352]	; (8001098 <fsm_manual_run+0x27c>)
 8000f36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	9102      	str	r1, [sp, #8]
 8000f3e:	2100      	movs	r1, #0
 8000f40:	9101      	str	r1, [sp, #4]
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	4613      	mov	r3, r2
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	200d      	movs	r0, #13
 8000f4c:	f000 fec4 	bl	8001cd8 <displayUART>
			}
			break;
 8000f50:	e094      	b.n	800107c <fsm_manual_run+0x260>

		case RED:
			//Change mode
			if (isButtonPressed(0)) changeMode(AMBER, AMBER_DURATION, OFF);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff fc2a 	bl	80007ac <isButtonPressed>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <fsm_manual_run+0x150>
 8000f5e:	4b50      	ldr	r3, [pc, #320]	; (80010a0 <fsm_manual_run+0x284>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	220c      	movs	r2, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	2016      	movs	r0, #22
 8000f68:	f7ff fe58 	bl	8000c1c <changeMode>

			//Change duration
			if (isButtonPressed(1))	changeDuration(RED);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fc1d 	bl	80007ac <isButtonPressed>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <fsm_manual_run+0x162>
 8000f78:	2015      	movs	r0, #21
 8000f7a:	f7ff fe87 	bl	8000c8c <changeDuration>

			//Save duration
			if (isButtonPressed(2)){
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f7ff fc14 	bl	80007ac <isButtonPressed>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00c      	beq.n	8000fa4 <fsm_manual_run+0x188>
				RED_DURATION = tempDuration;
 8000f8a:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <fsm_manual_run+0x288>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a43      	ldr	r2, [pc, #268]	; (800109c <fsm_manual_run+0x280>)
 8000f90:	6013      	str	r3, [r2, #0]
				checkDuration(RED);
 8000f92:	2015      	movs	r0, #21
 8000f94:	f7ff fefa 	bl	8000d8c <checkDuration>
				display(SAVED, tempDuration);
 8000f98:	4b42      	ldr	r3, [pc, #264]	; (80010a4 <fsm_manual_run+0x288>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	201f      	movs	r0, #31
 8000fa0:	f7ff fe26 	bl	8000bf0 <display>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(RED);
 8000fa4:	4b40      	ldr	r3, [pc, #256]	; (80010a8 <fsm_manual_run+0x28c>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d069      	beq.n	8001080 <fsm_manual_run+0x264>
 8000fac:	2015      	movs	r0, #21
 8000fae:	f7ff fe89 	bl	8000cc4 <toggle>
			break;
 8000fb2:	e065      	b.n	8001080 <fsm_manual_run+0x264>

		case AMBER:
			//Change mode
			if (isButtonPressed(0)) changeMode(GREEN, GREEN_DURATION, OFF);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff fbf9 	bl	80007ac <isButtonPressed>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <fsm_manual_run+0x1b2>
 8000fc0:	4b3a      	ldr	r3, [pc, #232]	; (80010ac <fsm_manual_run+0x290>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2017      	movs	r0, #23
 8000fca:	f7ff fe27 	bl	8000c1c <changeMode>

			//Change duration
			if (isButtonPressed(1))	changeDuration(AMBER);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff fbec 	bl	80007ac <isButtonPressed>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <fsm_manual_run+0x1c4>
 8000fda:	2016      	movs	r0, #22
 8000fdc:	f7ff fe56 	bl	8000c8c <changeDuration>

			//Save duration
			if (isButtonPressed(2)){
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f7ff fbe3 	bl	80007ac <isButtonPressed>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00c      	beq.n	8001006 <fsm_manual_run+0x1ea>
				AMBER_DURATION = tempDuration;
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <fsm_manual_run+0x288>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a2b      	ldr	r2, [pc, #172]	; (80010a0 <fsm_manual_run+0x284>)
 8000ff2:	6013      	str	r3, [r2, #0]
				checkDuration(AMBER);
 8000ff4:	2016      	movs	r0, #22
 8000ff6:	f7ff fec9 	bl	8000d8c <checkDuration>
				display(SAVED, tempDuration);
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <fsm_manual_run+0x288>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	201f      	movs	r0, #31
 8001002:	f7ff fdf5 	bl	8000bf0 <display>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(AMBER);
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <fsm_manual_run+0x28c>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d03a      	beq.n	8001084 <fsm_manual_run+0x268>
 800100e:	2016      	movs	r0, #22
 8001010:	f7ff fe58 	bl	8000cc4 <toggle>
			break;
 8001014:	e036      	b.n	8001084 <fsm_manual_run+0x268>

		case GREEN:
			//Change mode
			if (isButtonPressed(0))	changeMode(AUTO, 0, INIT);
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff fbc8 	bl	80007ac <isButtonPressed>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d004      	beq.n	800102c <fsm_manual_run+0x210>
 8001022:	2201      	movs	r2, #1
 8001024:	2100      	movs	r1, #0
 8001026:	200b      	movs	r0, #11
 8001028:	f7ff fdf8 	bl	8000c1c <changeMode>

			//Change duration
			if (isButtonPressed(1)) changeDuration(GREEN);
 800102c:	2001      	movs	r0, #1
 800102e:	f7ff fbbd 	bl	80007ac <isButtonPressed>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <fsm_manual_run+0x222>
 8001038:	2017      	movs	r0, #23
 800103a:	f7ff fe27 	bl	8000c8c <changeDuration>

			//Save duration
			if (isButtonPressed(2)){
 800103e:	2002      	movs	r0, #2
 8001040:	f7ff fbb4 	bl	80007ac <isButtonPressed>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00c      	beq.n	8001064 <fsm_manual_run+0x248>
				GREEN_DURATION = tempDuration;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <fsm_manual_run+0x288>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <fsm_manual_run+0x290>)
 8001050:	6013      	str	r3, [r2, #0]
				checkDuration(GREEN);
 8001052:	2017      	movs	r0, #23
 8001054:	f7ff fe9a 	bl	8000d8c <checkDuration>
				display(SAVED, tempDuration);
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <fsm_manual_run+0x288>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	201f      	movs	r0, #31
 8001060:	f7ff fdc6 	bl	8000bf0 <display>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(GREEN);
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <fsm_manual_run+0x28c>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00d      	beq.n	8001088 <fsm_manual_run+0x26c>
 800106c:	2017      	movs	r0, #23
 800106e:	f7ff fe29 	bl	8000cc4 <toggle>
			break;
 8001072:	e009      	b.n	8001088 <fsm_manual_run+0x26c>

		default:
			 break;
 8001074:	bf00      	nop
 8001076:	e008      	b.n	800108a <fsm_manual_run+0x26e>
			break;
 8001078:	bf00      	nop
 800107a:	e006      	b.n	800108a <fsm_manual_run+0x26e>
			break;
 800107c:	bf00      	nop
 800107e:	e004      	b.n	800108a <fsm_manual_run+0x26e>
			break;
 8001080:	bf00      	nop
 8001082:	e002      	b.n	800108a <fsm_manual_run+0x26e>
			break;
 8001084:	bf00      	nop
 8001086:	e000      	b.n	800108a <fsm_manual_run+0x26e>
			break;
 8001088:	bf00      	nop
	}
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000ac 	.word	0x200000ac
 8001094:	20000094 	.word	0x20000094
 8001098:	20000074 	.word	0x20000074
 800109c:	200000b4 	.word	0x200000b4
 80010a0:	200000b8 	.word	0x200000b8
 80010a4:	20000170 	.word	0x20000170
 80010a8:	200004b4 	.word	0x200004b4
 80010ac:	200000bc 	.word	0x200000bc

080010b0 <turnPedLed>:
 */

#include "fsm_ped.h"
#include <math.h>

void turnPedLed(int mode){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if (mode == 1){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d10a      	bne.n	80010d4 <turnPedLed+0x24>
		setTimer(2, timer_counter[0]);
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <turnPedLed+0x3c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	2002      	movs	r0, #2
 80010c6:	f000 fa89 	bl	80015dc <setTimer>
		LED_MODE[2] = LED_MODE[0];
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <turnPedLed+0x40>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <turnPedLed+0x40>)
 80010d0:	6093      	str	r3, [r2, #8]
	}
	else{
		LED_MODE[2] = OFF;
		setTrafficLight(2, OFF);
	}
}
 80010d2:	e006      	b.n	80010e2 <turnPedLed+0x32>
		LED_MODE[2] = OFF;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <turnPedLed+0x40>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	609a      	str	r2, [r3, #8]
		setTrafficLight(2, OFF);
 80010da:	210c      	movs	r1, #12
 80010dc:	2002      	movs	r0, #2
 80010de:	f000 fcd7 	bl	8001a90 <setTrafficLight>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000049c 	.word	0x2000049c
 80010f0:	200000a0 	.word	0x200000a0
 80010f4:	00000000 	.word	0x00000000

080010f8 <fsm_ped_run>:
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0.6 * (5*val2));
}

int localVal = MAX;

void fsm_ped_run(){
 80010f8:	b598      	push	{r3, r4, r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	switch(PED_MODE){
 80010fc:	4b80      	ldr	r3, [pc, #512]	; (8001300 <fsm_ped_run+0x208>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b0c      	cmp	r3, #12
 8001102:	d021      	beq.n	8001148 <fsm_ped_run+0x50>
 8001104:	2b0c      	cmp	r3, #12
 8001106:	f300 80f0 	bgt.w	80012ea <fsm_ped_run+0x1f2>
 800110a:	2b01      	cmp	r3, #1
 800110c:	d002      	beq.n	8001114 <fsm_ped_run+0x1c>
 800110e:	2b0b      	cmp	r3, #11
 8001110:	d063      	beq.n	80011da <fsm_ped_run+0xe2>
				PED = 0;
				PED_MODE = OFF;
			}
			break;
		default:
			break;
 8001112:	e0ea      	b.n	80012ea <fsm_ped_run+0x1f2>
			if (PED == 1){
 8001114:	4b7b      	ldr	r3, [pc, #492]	; (8001304 <fsm_ped_run+0x20c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d108      	bne.n	800112e <fsm_ped_run+0x36>
				turnPedLed(PED);
 800111c:	4b79      	ldr	r3, [pc, #484]	; (8001304 <fsm_ped_run+0x20c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffc5 	bl	80010b0 <turnPedLed>
				PED_MODE = AUTO;
 8001126:	4b76      	ldr	r3, [pc, #472]	; (8001300 <fsm_ped_run+0x208>)
 8001128:	220b      	movs	r2, #11
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	e007      	b.n	800113e <fsm_ped_run+0x46>
				turnPedLed(PED);
 800112e:	4b75      	ldr	r3, [pc, #468]	; (8001304 <fsm_ped_run+0x20c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ffbc 	bl	80010b0 <turnPedLed>
				PED_MODE = OFF;
 8001138:	4b71      	ldr	r3, [pc, #452]	; (8001300 <fsm_ped_run+0x208>)
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
			setTimer(5,100);
 800113e:	2164      	movs	r1, #100	; 0x64
 8001140:	2005      	movs	r0, #5
 8001142:	f000 fa4b 	bl	80015dc <setTimer>
			break;
 8001146:	e0d5      	b.n	80012f4 <fsm_ped_run+0x1fc>
			__HAL_TIM_SET_AUTORELOAD(&htim3, 5*localVal);
 8001148:	4b6f      	ldr	r3, [pc, #444]	; (8001308 <fsm_ped_run+0x210>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	441a      	add	r2, r3
 8001152:	4b6e      	ldr	r3, [pc, #440]	; (800130c <fsm_ped_run+0x214>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
 8001158:	4b6b      	ldr	r3, [pc, #428]	; (8001308 <fsm_ped_run+0x210>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	461a      	mov	r2, r3
 8001164:	4b69      	ldr	r3, [pc, #420]	; (800130c <fsm_ped_run+0x214>)
 8001166:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0.6 * (5*0));
 8001168:	4b68      	ldr	r3, [pc, #416]	; (800130c <fsm_ped_run+0x214>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2200      	movs	r2, #0
 800116e:	635a      	str	r2, [r3, #52]	; 0x34
			localVal = MAX;
 8001170:	4b65      	ldr	r3, [pc, #404]	; (8001308 <fsm_ped_run+0x210>)
 8001172:	f241 3288 	movw	r2, #5000	; 0x1388
 8001176:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(3)){
 8001178:	2003      	movs	r0, #3
 800117a:	f7ff fb17 	bl	80007ac <isButtonPressed>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80b4 	beq.w	80012ee <fsm_ped_run+0x1f6>
				if (TRAFFIC_MODE == AUTO){
 8001186:	4b62      	ldr	r3, [pc, #392]	; (8001310 <fsm_ped_run+0x218>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b0b      	cmp	r3, #11
 800118c:	f040 80af 	bne.w	80012ee <fsm_ped_run+0x1f6>
					turnPedLed(1);
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff ff8d 	bl	80010b0 <turnPedLed>
					setTimer(4,(int)(ceil((GREEN_DURATION + AMBER_DURATION)*100/3)));
 8001196:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <fsm_ped_run+0x21c>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <fsm_ped_run+0x220>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	2264      	movs	r2, #100	; 0x64
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	4a5d      	ldr	r2, [pc, #372]	; (800131c <fsm_ped_run+0x224>)
 80011a8:	fb82 1203 	smull	r1, r2, r2, r3
 80011ac:	17db      	asrs	r3, r3, #31
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fa49 	bl	8000648 <__aeabi_i2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff faad 	bl	800071c <__aeabi_d2iz>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4619      	mov	r1, r3
 80011c6:	2004      	movs	r0, #4
 80011c8:	f000 fa08 	bl	80015dc <setTimer>
					PED = 1;
 80011cc:	4b4d      	ldr	r3, [pc, #308]	; (8001304 <fsm_ped_run+0x20c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
					PED_MODE = AUTO;
 80011d2:	4b4b      	ldr	r3, [pc, #300]	; (8001300 <fsm_ped_run+0x208>)
 80011d4:	220b      	movs	r2, #11
 80011d6:	601a      	str	r2, [r3, #0]
			break;
 80011d8:	e089      	b.n	80012ee <fsm_ped_run+0x1f6>
				if (timer_flag[4]){
 80011da:	4b51      	ldr	r3, [pc, #324]	; (8001320 <fsm_ped_run+0x228>)
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d038      	beq.n	8001254 <fsm_ped_run+0x15c>
					if (LED_MODE[2] != RED){
 80011e2:	4b50      	ldr	r3, [pc, #320]	; (8001324 <fsm_ped_run+0x22c>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b15      	cmp	r3, #21
 80011e8:	d034      	beq.n	8001254 <fsm_ped_run+0x15c>
						__HAL_TIM_SET_AUTORELOAD(&htim3, 5*localVal);
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <fsm_ped_run+0x210>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	441a      	add	r2, r3
 80011f4:	4b45      	ldr	r3, [pc, #276]	; (800130c <fsm_ped_run+0x214>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80011fa:	4b43      	ldr	r3, [pc, #268]	; (8001308 <fsm_ped_run+0x210>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <fsm_ped_run+0x214>)
 8001208:	60da      	str	r2, [r3, #12]
						__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0.6 * (5*localVal));
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <fsm_ped_run+0x210>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fa17 	bl	8000648 <__aeabi_i2d>
 800121a:	a337      	add	r3, pc, #220	; (adr r3, 80012f8 <fsm_ped_run+0x200>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7fe ff96 	bl	8000150 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4938      	ldr	r1, [pc, #224]	; (800130c <fsm_ped_run+0x214>)
 800122a:	680c      	ldr	r4, [r1, #0]
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fa9c 	bl	800076c <__aeabi_d2uiz>
 8001234:	4603      	mov	r3, r0
 8001236:	6363      	str	r3, [r4, #52]	; 0x34
						localVal = localVal - MAX/3;
 8001238:	4b33      	ldr	r3, [pc, #204]	; (8001308 <fsm_ped_run+0x210>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f2a3 6382 	subw	r3, r3, #1666	; 0x682
 8001240:	4a31      	ldr	r2, [pc, #196]	; (8001308 <fsm_ped_run+0x210>)
 8001242:	6013      	str	r3, [r2, #0]
						if (localVal < 0 ){
 8001244:	4b30      	ldr	r3, [pc, #192]	; (8001308 <fsm_ped_run+0x210>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	da03      	bge.n	8001254 <fsm_ped_run+0x15c>
							localVal = MAX;
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <fsm_ped_run+0x210>)
 800124e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001252:	601a      	str	r2, [r3, #0]
				if (timer_flag[4]) setTimer(4,(int)(ceil((GREEN_DURATION + AMBER_DURATION)*100/3)));
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <fsm_ped_run+0x228>)
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d01a      	beq.n	8001292 <fsm_ped_run+0x19a>
 800125c:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <fsm_ped_run+0x21c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <fsm_ped_run+0x220>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4413      	add	r3, r2
 8001266:	2264      	movs	r2, #100	; 0x64
 8001268:	fb02 f303 	mul.w	r3, r2, r3
 800126c:	4a2b      	ldr	r2, [pc, #172]	; (800131c <fsm_ped_run+0x224>)
 800126e:	fb82 1203 	smull	r1, r2, r2, r3
 8001272:	17db      	asrs	r3, r3, #31
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f9e6 	bl	8000648 <__aeabi_i2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fa4a 	bl	800071c <__aeabi_d2iz>
 8001288:	4603      	mov	r3, r0
 800128a:	4619      	mov	r1, r3
 800128c:	2004      	movs	r0, #4
 800128e:	f000 f9a5 	bl	80015dc <setTimer>
				if (LED_MODE[2] == RED){
 8001292:	4b24      	ldr	r3, [pc, #144]	; (8001324 <fsm_ped_run+0x22c>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b15      	cmp	r3, #21
 8001298:	d117      	bne.n	80012ca <fsm_ped_run+0x1d2>
					localVal = MAX;
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <fsm_ped_run+0x210>)
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_AUTORELOAD(&htim3, 5*localVal);
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <fsm_ped_run+0x210>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	441a      	add	r2, r3
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <fsm_ped_run+0x214>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <fsm_ped_run+0x210>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	461a      	mov	r2, r3
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <fsm_ped_run+0x214>)
 80012c0:	60da      	str	r2, [r3, #12]
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0.6 * (5*0));
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <fsm_ped_run+0x214>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
			if (isButtonPressed(3)){
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff fa6e 	bl	80007ac <isButtonPressed>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00d      	beq.n	80012f2 <fsm_ped_run+0x1fa>
				turnPedLed(0);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff feea 	bl	80010b0 <turnPedLed>
				PED = 0;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <fsm_ped_run+0x20c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
				PED_MODE = OFF;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <fsm_ped_run+0x208>)
 80012e4:	220c      	movs	r2, #12
 80012e6:	601a      	str	r2, [r3, #0]
			break;
 80012e8:	e003      	b.n	80012f2 <fsm_ped_run+0x1fa>
			break;
 80012ea:	bf00      	nop
 80012ec:	e002      	b.n	80012f4 <fsm_ped_run+0x1fc>
			break;
 80012ee:	bf00      	nop
 80012f0:	e000      	b.n	80012f4 <fsm_ped_run+0x1fc>
			break;
 80012f2:	bf00      	nop
	}
}
 80012f4:	bf00      	nop
 80012f6:	bd98      	pop	{r3, r4, r7, pc}
 80012f8:	33333333 	.word	0x33333333
 80012fc:	3fe33333 	.word	0x3fe33333
 8001300:	200000b0 	.word	0x200000b0
 8001304:	20000174 	.word	0x20000174
 8001308:	2000009c 	.word	0x2000009c
 800130c:	20000518 	.word	0x20000518
 8001310:	200000ac 	.word	0x200000ac
 8001314:	200000bc 	.word	0x200000bc
 8001318:	200000b8 	.word	0x200000b8
 800131c:	55555556 	.word	0x55555556
 8001320:	200004b4 	.word	0x200004b4
 8001324:	200000a0 	.word	0x200000a0

08001328 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133c:	4b45      	ldr	r3, [pc, #276]	; (8001454 <MX_GPIO_Init+0x12c>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a44      	ldr	r2, [pc, #272]	; (8001454 <MX_GPIO_Init+0x12c>)
 8001342:	f043 0310 	orr.w	r3, r3, #16
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b42      	ldr	r3, [pc, #264]	; (8001454 <MX_GPIO_Init+0x12c>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0310 	and.w	r3, r3, #16
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001354:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <MX_GPIO_Init+0x12c>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a3e      	ldr	r2, [pc, #248]	; (8001454 <MX_GPIO_Init+0x12c>)
 800135a:	f043 0320 	orr.w	r3, r3, #32
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <MX_GPIO_Init+0x12c>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0320 	and.w	r3, r3, #32
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	4b39      	ldr	r3, [pc, #228]	; (8001454 <MX_GPIO_Init+0x12c>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a38      	ldr	r2, [pc, #224]	; (8001454 <MX_GPIO_Init+0x12c>)
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <MX_GPIO_Init+0x12c>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b33      	ldr	r3, [pc, #204]	; (8001454 <MX_GPIO_Init+0x12c>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a32      	ldr	r2, [pc, #200]	; (8001454 <MX_GPIO_Init+0x12c>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b30      	ldr	r3, [pc, #192]	; (8001454 <MX_GPIO_Init+0x12c>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Ped_LIGHT2_Pin|D2_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80013a2:	482d      	ldr	r0, [pc, #180]	; (8001458 <MX_GPIO_Init+0x130>)
 80013a4:	f001 fa0b 	bl	80027be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ped_LIGHT1_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80013ae:	482b      	ldr	r0, [pc, #172]	; (800145c <MX_GPIO_Init+0x134>)
 80013b0:	f001 fa05 	bl	80027be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <MX_GPIO_Init+0x138>)
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	4826      	ldr	r0, [pc, #152]	; (8001464 <MX_GPIO_Init+0x13c>)
 80013ca:	f001 f85d 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Ped_BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 80013ce:	2313      	movs	r3, #19
 80013d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4619      	mov	r1, r3
 80013e0:	481d      	ldr	r0, [pc, #116]	; (8001458 <MX_GPIO_Init+0x130>)
 80013e2:	f001 f851 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Ped_LIGHT2_Pin|D2_Pin;
 80013e6:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80013ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	4619      	mov	r1, r3
 80013fe:	4816      	ldr	r0, [pc, #88]	; (8001458 <MX_GPIO_Init+0x130>)
 8001400:	f001 f842 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8001404:	2301      	movs	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4619      	mov	r1, r3
 8001416:	4811      	ldr	r0, [pc, #68]	; (800145c <MX_GPIO_Init+0x134>)
 8001418:	f001 f836 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Ped_LIGHT1_Pin|D3_Pin|D5_Pin|D4_Pin;
 800141c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2302      	movs	r3, #2
 800142c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	4619      	mov	r1, r3
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <MX_GPIO_Init+0x134>)
 8001436:	f001 f827 	bl	8002488 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2028      	movs	r0, #40	; 0x28
 8001440:	f000 ffeb 	bl	800241a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001444:	2028      	movs	r0, #40	; 0x28
 8001446:	f001 f804 	bl	8002452 <HAL_NVIC_EnableIRQ>

}
 800144a:	bf00      	nop
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	40010800 	.word	0x40010800
 800145c:	40010c00 	.word	0x40010c00
 8001460:	10110000 	.word	0x10110000
 8001464:	40011000 	.word	0x40011000

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f000 fe9c 	bl	80021a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 f82e 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f7ff ff58 	bl	8001328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001478:	f000 fe08 	bl	800208c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800147c:	f000 fa26 	bl	80018cc <MX_TIM3_Init>
  MX_TIM2_Init();
 8001480:	f000 f9d6 	bl	8001830 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001484:	4810      	ldr	r0, [pc, #64]	; (80014c8 <main+0x60>)
 8001486:	f001 fe57 	bl	8003138 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800148a:	2100      	movs	r1, #0
 800148c:	480f      	ldr	r0, [pc, #60]	; (80014cc <main+0x64>)
 800148e:	f001 fefd 	bl	800328c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTrafficLight(0, OFF);
 8001492:	210c      	movs	r1, #12
 8001494:	2000      	movs	r0, #0
 8001496:	f000 fafb 	bl	8001a90 <setTrafficLight>
  setTrafficLight(1, OFF);
 800149a:	210c      	movs	r1, #12
 800149c:	2001      	movs	r0, #1
 800149e:	f000 faf7 	bl	8001a90 <setTrafficLight>
  setTrafficLight(2, OFF);
 80014a2:	210c      	movs	r1, #12
 80014a4:	2002      	movs	r0, #2
 80014a6:	f000 faf3 	bl	8001a90 <setTrafficLight>
//  SCH_Add_Task(&fsm_automatic_run0, 0, 1);
//  SCH_Add_Task(&fsm_automatic_run1, 0, 1);
//  SCH_Add_Task(&fsm_automatic_run2, 0, 1);
  while (1)
  {
	  fsm_manual_run();
 80014aa:	f7ff fcb7 	bl	8000e1c <fsm_manual_run>
	  	  fsm_ped_run();
 80014ae:	f7ff fe23 	bl	80010f8 <fsm_ped_run>
	  	  fsm_automatic_run(0);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff fa5a 	bl	800096c <fsm_automatic_run>
	  	  fsm_automatic_run(1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff fa57 	bl	800096c <fsm_automatic_run>
	  	  fsm_automatic_run(2);
 80014be:	2002      	movs	r0, #2
 80014c0:	f7ff fa54 	bl	800096c <fsm_automatic_run>
	  fsm_manual_run();
 80014c4:	e7f1      	b.n	80014aa <main+0x42>
 80014c6:	bf00      	nop
 80014c8:	200004d0 	.word	0x200004d0
 80014cc:	20000518 	.word	0x20000518

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b090      	sub	sp, #64	; 0x40
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	2228      	movs	r2, #40	; 0x28
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 ff10 	bl	8004304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f6:	2301      	movs	r3, #1
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fa:	2310      	movs	r3, #16
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fe:	2302      	movs	r3, #2
 8001500:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001502:	2300      	movs	r3, #0
 8001504:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001506:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800150a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150c:	f107 0318 	add.w	r3, r7, #24
 8001510:	4618      	mov	r0, r3
 8001512:	f001 f9a7 	bl	8002864 <HAL_RCC_OscConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800151c:	f000 f831 	bl	8001582 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	230f      	movs	r3, #15
 8001522:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001524:	2302      	movs	r3, #2
 8001526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2102      	movs	r1, #2
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fc14 	bl	8002d68 <HAL_RCC_ClockConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001546:	f000 f81c 	bl	8001582 <Error_Handler>
  }
}
 800154a:	bf00      	nop
 800154c:	3740      	adds	r7, #64	; 0x40
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	timerRun();
 800155a:	f000 f857 	bl	800160c <timerRun>
	getKeyInput(0);
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff f94e 	bl	8000800 <getKeyInput>
	getKeyInput(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f7ff f94b 	bl	8000800 <getKeyInput>
	getKeyInput(2);
 800156a:	2002      	movs	r0, #2
 800156c:	f7ff f948 	bl	8000800 <getKeyInput>
	getKeyInput(3);
 8001570:	2003      	movs	r0, #3
 8001572:	f7ff f945 	bl	8000800 <getKeyInput>
	SCH_Update();
 8001576:	f000 f809 	bl	800158c <SCH_Update>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001586:	b672      	cpsid	i
}
 8001588:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158a:	e7fe      	b.n	800158a <Error_Handler+0x8>

0800158c <SCH_Update>:
{
	current_index_task = 0;
}


void SCH_Update(void){
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
	current_index_task ++;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <SCH_Update+0x48>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <SCH_Update+0x48>)
 800159a:	701a      	strb	r2, [r3, #0]
	if (SCH_tasks_G[0].callback && SCH_tasks_G[0].runMe == 0)
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <SCH_Update+0x4c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <SCH_Update+0x40>
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <SCH_Update+0x4c>)
 80015a6:	7b1b      	ldrb	r3, [r3, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <SCH_Update+0x40>
	{
		if(SCH_tasks_G[0].delay > 0)
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <SCH_Update+0x4c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <SCH_Update+0x32>
		{
			SCH_tasks_G[0].delay = SCH_tasks_G[0].delay - 1;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <SCH_Update+0x4c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <SCH_Update+0x4c>)
 80015bc:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].delay == 0)
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <SCH_Update+0x4c>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <SCH_Update+0x40>
		{
			SCH_tasks_G[0].runMe = 1;
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <SCH_Update+0x4c>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	731a      	strb	r2, [r3, #12]
		}
	}
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	20000498 	.word	0x20000498
 80015d8:	20000178 	.word	0x20000178

080015dc <setTimer>:
#include "software_timer.h"

int timer_counter [6] = {0};
int timer_flag [6] = {0};

void setTimer(int type, int duration){
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	timer_counter[type] = duration;
 80015e6:	4907      	ldr	r1, [pc, #28]	; (8001604 <setTimer+0x28>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[type] = 0;
 80015f0:	4a05      	ldr	r2, [pc, #20]	; (8001608 <setTimer+0x2c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2100      	movs	r1, #0
 80015f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	2000049c 	.word	0x2000049c
 8001608:	200004b4 	.word	0x200004b4

0800160c <timerRun>:

void timerRun(){
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	if(timer_counter[0] > 0){
 8001610:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <timerRun+0xcc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dd0b      	ble.n	8001630 <timerRun+0x24>
		timer_counter[0]--;
 8001618:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <timerRun+0xcc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	4a2e      	ldr	r2, [pc, #184]	; (80016d8 <timerRun+0xcc>)
 8001620:	6013      	str	r3, [r2, #0]
		if(timer_counter[0] <= 0){
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <timerRun+0xcc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	dc02      	bgt.n	8001630 <timerRun+0x24>
			timer_flag[0] = 1;
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <timerRun+0xd0>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter[1] > 0){
 8001630:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <timerRun+0xcc>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	dd0b      	ble.n	8001650 <timerRun+0x44>
		timer_counter[1]--;
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <timerRun+0xcc>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	3b01      	subs	r3, #1
 800163e:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <timerRun+0xcc>)
 8001640:	6053      	str	r3, [r2, #4]
		if(timer_counter[1] <= 0){
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <timerRun+0xcc>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	dc02      	bgt.n	8001650 <timerRun+0x44>
			timer_flag[1] = 1;
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <timerRun+0xd0>)
 800164c:	2201      	movs	r2, #1
 800164e:	605a      	str	r2, [r3, #4]
		}
	}
	if(timer_counter[2] > 0){
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <timerRun+0xcc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	dd0b      	ble.n	8001670 <timerRun+0x64>
		timer_counter[2]--;
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <timerRun+0xcc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	3b01      	subs	r3, #1
 800165e:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <timerRun+0xcc>)
 8001660:	6093      	str	r3, [r2, #8]
		if(timer_counter[2] <= 0){
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <timerRun+0xcc>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	dc02      	bgt.n	8001670 <timerRun+0x64>
			timer_flag[2] = 1;
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <timerRun+0xd0>)
 800166c:	2201      	movs	r2, #1
 800166e:	609a      	str	r2, [r3, #8]
		}
	}
	if(timer_counter[3] > 0){
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <timerRun+0xcc>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	dd0b      	ble.n	8001690 <timerRun+0x84>
		timer_counter[3]--;
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <timerRun+0xcc>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	3b01      	subs	r3, #1
 800167e:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <timerRun+0xcc>)
 8001680:	60d3      	str	r3, [r2, #12]
		if(timer_counter[3] <= 0){
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <timerRun+0xcc>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	dc02      	bgt.n	8001690 <timerRun+0x84>
			timer_flag[3] = 1;
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <timerRun+0xd0>)
 800168c:	2201      	movs	r2, #1
 800168e:	60da      	str	r2, [r3, #12]
		}
	}
	if(timer_counter[4] > 0){
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <timerRun+0xcc>)
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	dd0b      	ble.n	80016b0 <timerRun+0xa4>
		timer_counter[4]--;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <timerRun+0xcc>)
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	3b01      	subs	r3, #1
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <timerRun+0xcc>)
 80016a0:	6113      	str	r3, [r2, #16]
		if(timer_counter[4] <= 0){
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <timerRun+0xcc>)
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dc02      	bgt.n	80016b0 <timerRun+0xa4>
			timer_flag[4] = 1;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <timerRun+0xd0>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	611a      	str	r2, [r3, #16]
		}
	}
	if(timer_counter[5] > 0){
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <timerRun+0xcc>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	dd0b      	ble.n	80016d0 <timerRun+0xc4>
		timer_counter[5]--;
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <timerRun+0xcc>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	3b01      	subs	r3, #1
 80016be:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <timerRun+0xcc>)
 80016c0:	6153      	str	r3, [r2, #20]
		if(timer_counter[5] <= 0){
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <timerRun+0xcc>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	dc02      	bgt.n	80016d0 <timerRun+0xc4>
			timer_flag[5] = 1;
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <timerRun+0xd0>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	615a      	str	r2, [r3, #20]
		}
	}
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	2000049c 	.word	0x2000049c
 80016dc:	200004b4 	.word	0x200004b4

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_MspInit+0x5c>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	4a14      	ldr	r2, [pc, #80]	; (800173c <HAL_MspInit+0x5c>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6193      	str	r3, [r2, #24]
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_MspInit+0x5c>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_MspInit+0x5c>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_MspInit+0x5c>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	61d3      	str	r3, [r2, #28]
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_MspInit+0x5c>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_MspInit+0x60>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_MspInit+0x60>)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 fd53 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <TIM2_IRQHandler+0x10>)
 800179a:	f001 fe19 	bl	80033d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200004d0 	.word	0x200004d0

080017a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017b0:	f001 f836 	bl	8002820 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	; (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f002 fd94 	bl	8004314 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20005000 	.word	0x20005000
 8001818:	00000400 	.word	0x00000400
 800181c:	200004cc 	.word	0x200004cc
 8001820:	20000758 	.word	0x20000758

08001824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <MX_TIM2_Init+0x98>)
 800184e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001852:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <MX_TIM2_Init+0x98>)
 8001856:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800185a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_TIM2_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <MX_TIM2_Init+0x98>)
 8001864:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001868:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_TIM2_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <MX_TIM2_Init+0x98>)
 8001872:	2200      	movs	r2, #0
 8001874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001876:	4814      	ldr	r0, [pc, #80]	; (80018c8 <MX_TIM2_Init+0x98>)
 8001878:	f001 fc0e 	bl	8003098 <HAL_TIM_Base_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001882:	f7ff fe7e 	bl	8001582 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4619      	mov	r1, r3
 8001892:	480d      	ldr	r0, [pc, #52]	; (80018c8 <MX_TIM2_Init+0x98>)
 8001894:	f001 ff62 	bl	800375c <HAL_TIM_ConfigClockSource>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800189e:	f7ff fe70 	bl	8001582 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018aa:	463b      	mov	r3, r7
 80018ac:	4619      	mov	r1, r3
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <MX_TIM2_Init+0x98>)
 80018b0:	f002 fae0 	bl	8003e74 <HAL_TIMEx_MasterConfigSynchronization>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018ba:	f7ff fe62 	bl	8001582 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200004d0 	.word	0x200004d0

080018cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	; 0x38
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	f107 0320 	add.w	r3, r7, #32
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <MX_TIM3_Init+0xe8>)
 80018fe:	4a2e      	ldr	r2, [pc, #184]	; (80019b8 <MX_TIM3_Init+0xec>)
 8001900:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1023;
 8001902:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <MX_TIM3_Init+0xe8>)
 8001904:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001908:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <MX_TIM3_Init+0xe8>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 624;
 8001910:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <MX_TIM3_Init+0xe8>)
 8001912:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001916:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <MX_TIM3_Init+0xe8>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <MX_TIM3_Init+0xe8>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001924:	4823      	ldr	r0, [pc, #140]	; (80019b4 <MX_TIM3_Init+0xe8>)
 8001926:	f001 fbb7 	bl	8003098 <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001930:	f7ff fe27 	bl	8001582 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193e:	4619      	mov	r1, r3
 8001940:	481c      	ldr	r0, [pc, #112]	; (80019b4 <MX_TIM3_Init+0xe8>)
 8001942:	f001 ff0b 	bl	800375c <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800194c:	f7ff fe19 	bl	8001582 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001950:	4818      	ldr	r0, [pc, #96]	; (80019b4 <MX_TIM3_Init+0xe8>)
 8001952:	f001 fc43 	bl	80031dc <HAL_TIM_PWM_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800195c:	f7ff fe11 	bl	8001582 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001968:	f107 0320 	add.w	r3, r7, #32
 800196c:	4619      	mov	r1, r3
 800196e:	4811      	ldr	r0, [pc, #68]	; (80019b4 <MX_TIM3_Init+0xe8>)
 8001970:	f002 fa80 	bl	8003e74 <HAL_TIMEx_MasterConfigSynchronization>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800197a:	f7ff fe02 	bl	8001582 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197e:	2360      	movs	r3, #96	; 0x60
 8001980:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2200      	movs	r2, #0
 8001992:	4619      	mov	r1, r3
 8001994:	4807      	ldr	r0, [pc, #28]	; (80019b4 <MX_TIM3_Init+0xe8>)
 8001996:	f001 fe23 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80019a0:	f7ff fdef 	bl	8001582 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019a4:	4803      	ldr	r0, [pc, #12]	; (80019b4 <MX_TIM3_Init+0xe8>)
 80019a6:	f000 f841 	bl	8001a2c <HAL_TIM_MspPostInit>

}
 80019aa:	bf00      	nop
 80019ac:	3738      	adds	r7, #56	; 0x38
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000518 	.word	0x20000518
 80019b8:	40000400 	.word	0x40000400

080019bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019cc:	d114      	bne.n	80019f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_TIM_Base_MspInit+0x68>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_TIM_Base_MspInit+0x68>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	61d3      	str	r3, [r2, #28]
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_TIM_Base_MspInit+0x68>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	201c      	movs	r0, #28
 80019ec:	f000 fd15 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f0:	201c      	movs	r0, #28
 80019f2:	f000 fd2e 	bl	8002452 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019f6:	e010      	b.n	8001a1a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d10b      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_TIM_Base_MspInit+0x68>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_TIM_Base_MspInit+0x68>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_TIM_Base_MspInit+0x68>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40000400 	.word	0x40000400

08001a2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_TIM_MspPostInit+0x58>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d117      	bne.n	8001a7c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_TIM_MspPostInit+0x5c>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <HAL_TIM_MspPostInit+0x5c>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_TIM_MspPostInit+0x5c>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 8001a64:	2340      	movs	r3, #64	; 0x40
 8001a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <HAL_TIM_MspPostInit+0x60>)
 8001a78:	f000 fd06 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40000400 	.word	0x40000400
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010800 	.word	0x40010800

08001a90 <setTrafficLight>:

uint16_t D_Pin[6] = {D2_Pin, D3_Pin, D4_Pin, D5_Pin, Ped_LIGHT1_Pin, Ped_LIGHT2_Pin};
GPIO_TypeDef *D_Port[6] = {D2_GPIO_Port, D3_GPIO_Port, D4_GPIO_Port, D5_GPIO_Port, Ped_LIGHT1_GPIO_Port, Ped_LIGHT2_GPIO_Port};


void setTrafficLight(int lane, int light){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
	switch (light){
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	3b0c      	subs	r3, #12
 8001a9e:	2b0b      	cmp	r3, #11
 8001aa0:	f200 8098 	bhi.w	8001bd4 <setTrafficLight+0x144>
 8001aa4:	a201      	add	r2, pc, #4	; (adr r2, 8001aac <setTrafficLight+0x1c>)
 8001aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aaa:	bf00      	nop
 8001aac:	08001b97 	.word	0x08001b97
 8001ab0:	08001bd5 	.word	0x08001bd5
 8001ab4:	08001bd5 	.word	0x08001bd5
 8001ab8:	08001bd5 	.word	0x08001bd5
 8001abc:	08001bd5 	.word	0x08001bd5
 8001ac0:	08001bd5 	.word	0x08001bd5
 8001ac4:	08001bd5 	.word	0x08001bd5
 8001ac8:	08001bd5 	.word	0x08001bd5
 8001acc:	08001bd5 	.word	0x08001bd5
 8001ad0:	08001add 	.word	0x08001add
 8001ad4:	08001b1b 	.word	0x08001b1b
 8001ad8:	08001b59 	.word	0x08001b59
		case RED:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], SET);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4a3f      	ldr	r2, [pc, #252]	; (8001be0 <setTrafficLight+0x150>)
 8001ae2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4a3e      	ldr	r2, [pc, #248]	; (8001be4 <setTrafficLight+0x154>)
 8001aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4619      	mov	r1, r3
 8001af4:	f000 fe63 	bl	80027be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	3301      	adds	r3, #1
 8001afe:	4a38      	ldr	r2, [pc, #224]	; (8001be0 <setTrafficLight+0x150>)
 8001b00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a36      	ldr	r2, [pc, #216]	; (8001be4 <setTrafficLight+0x154>)
 8001b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b10:	2200      	movs	r2, #0
 8001b12:	4619      	mov	r1, r3
 8001b14:	f000 fe53 	bl	80027be <HAL_GPIO_WritePin>
			break;
 8001b18:	e05d      	b.n	8001bd6 <setTrafficLight+0x146>
		case AMBER:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], SET);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4a30      	ldr	r2, [pc, #192]	; (8001be0 <setTrafficLight+0x150>)
 8001b20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4a2e      	ldr	r2, [pc, #184]	; (8001be4 <setTrafficLight+0x154>)
 8001b2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4619      	mov	r1, r3
 8001b32:	f000 fe44 	bl	80027be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], SET);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4a28      	ldr	r2, [pc, #160]	; (8001be0 <setTrafficLight+0x150>)
 8001b3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	3301      	adds	r3, #1
 8001b48:	4a26      	ldr	r2, [pc, #152]	; (8001be4 <setTrafficLight+0x154>)
 8001b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4619      	mov	r1, r3
 8001b52:	f000 fe34 	bl	80027be <HAL_GPIO_WritePin>
			break;
 8001b56:	e03e      	b.n	8001bd6 <setTrafficLight+0x146>
		case GREEN:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <setTrafficLight+0x150>)
 8001b5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <setTrafficLight+0x154>)
 8001b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f000 fe25 	bl	80027be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], SET);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <setTrafficLight+0x150>)
 8001b7c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	3301      	adds	r3, #1
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <setTrafficLight+0x154>)
 8001b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f000 fe15 	bl	80027be <HAL_GPIO_WritePin>
			break;
 8001b94:	e01f      	b.n	8001bd6 <setTrafficLight+0x146>
		case OFF:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <setTrafficLight+0x150>)
 8001b9c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <setTrafficLight+0x154>)
 8001ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001baa:	2200      	movs	r2, #0
 8001bac:	4619      	mov	r1, r3
 8001bae:	f000 fe06 	bl	80027be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <setTrafficLight+0x150>)
 8001bba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <setTrafficLight+0x154>)
 8001bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f000 fdf6 	bl	80027be <HAL_GPIO_WritePin>
			break;
 8001bd2:	e000      	b.n	8001bd6 <setTrafficLight+0x146>
		default:
			break;
 8001bd4:	bf00      	nop
	}
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200000d4 	.word	0x200000d4
 8001be4:	200000c8 	.word	0x200000c8

08001be8 <toggleLight>:


void toggleLight(int lane, int light){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
	switch (light){
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b17      	cmp	r3, #23
 8001bf6:	d047      	beq.n	8001c88 <toggleLight+0xa0>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b17      	cmp	r3, #23
 8001bfc:	dc63      	bgt.n	8001cc6 <toggleLight+0xde>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b15      	cmp	r3, #21
 8001c02:	d003      	beq.n	8001c0c <toggleLight+0x24>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	2b16      	cmp	r3, #22
 8001c08:	d01f      	beq.n	8001c4a <toggleLight+0x62>
		case GREEN:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
			break;
		default:
			break;
 8001c0a:	e05c      	b.n	8001cc6 <toggleLight+0xde>
			HAL_GPIO_TogglePin(D_Port[lane*2], D_Pin[lane*2]);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <toggleLight+0xe8>)
 8001c12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	492e      	ldr	r1, [pc, #184]	; (8001cd4 <toggleLight+0xec>)
 8001c1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c20:	4619      	mov	r1, r3
 8001c22:	4610      	mov	r0, r2
 8001c24:	f000 fde3 	bl	80027ee <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <toggleLight+0xe8>)
 8001c30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	3301      	adds	r3, #1
 8001c3a:	4a26      	ldr	r2, [pc, #152]	; (8001cd4 <toggleLight+0xec>)
 8001c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c40:	2200      	movs	r2, #0
 8001c42:	4619      	mov	r1, r3
 8001c44:	f000 fdbb 	bl	80027be <HAL_GPIO_WritePin>
			break;
 8001c48:	e03e      	b.n	8001cc8 <toggleLight+0xe0>
			HAL_GPIO_TogglePin(D_Port[lane*2], D_Pin[lane*2]);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4a20      	ldr	r2, [pc, #128]	; (8001cd0 <toggleLight+0xe8>)
 8001c50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	491e      	ldr	r1, [pc, #120]	; (8001cd4 <toggleLight+0xec>)
 8001c5a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f000 fdc4 	bl	80027ee <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <toggleLight+0xe8>)
 8001c6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	3301      	adds	r3, #1
 8001c78:	4916      	ldr	r1, [pc, #88]	; (8001cd4 <toggleLight+0xec>)
 8001c7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4610      	mov	r0, r2
 8001c82:	f000 fdb4 	bl	80027ee <HAL_GPIO_TogglePin>
			break;
 8001c86:	e01f      	b.n	8001cc8 <toggleLight+0xe0>
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <toggleLight+0xe8>)
 8001c8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4a0f      	ldr	r2, [pc, #60]	; (8001cd4 <toggleLight+0xec>)
 8001c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f000 fd8d 	bl	80027be <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	3301      	adds	r3, #1
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <toggleLight+0xe8>)
 8001cac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <toggleLight+0xec>)
 8001cb8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	f000 fd95 	bl	80027ee <HAL_GPIO_TogglePin>
			break;
 8001cc4:	e000      	b.n	8001cc8 <toggleLight+0xe0>
			break;
 8001cc6:	bf00      	nop
	}
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200000d4 	.word	0x200000d4
 8001cd4:	200000c8 	.word	0x200000c8

08001cd8 <displayUART>:
#include "uart_timer.h"
char str[100];

#define ASCII_ESC 27

void displayUART(int mode, int num0, int num1, int led0, int led1, int led2, int pedLed){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
	char* curMode0 = (led0 == RED)? "RED" : (led0 == AMBER)? "AMBER" : "GREEN";
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b15      	cmp	r3, #21
 8001cea:	d006      	beq.n	8001cfa <displayUART+0x22>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b16      	cmp	r3, #22
 8001cf0:	d101      	bne.n	8001cf6 <displayUART+0x1e>
 8001cf2:	4ba0      	ldr	r3, [pc, #640]	; (8001f74 <displayUART+0x29c>)
 8001cf4:	e002      	b.n	8001cfc <displayUART+0x24>
 8001cf6:	4ba0      	ldr	r3, [pc, #640]	; (8001f78 <displayUART+0x2a0>)
 8001cf8:	e000      	b.n	8001cfc <displayUART+0x24>
 8001cfa:	4ba0      	ldr	r3, [pc, #640]	; (8001f7c <displayUART+0x2a4>)
 8001cfc:	61fb      	str	r3, [r7, #28]
	char* curMode1 = (led1 == RED)? "RED" : (led1 == AMBER)? "AMBER" : "GREEN";
 8001cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d00:	2b15      	cmp	r3, #21
 8001d02:	d006      	beq.n	8001d12 <displayUART+0x3a>
 8001d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d06:	2b16      	cmp	r3, #22
 8001d08:	d101      	bne.n	8001d0e <displayUART+0x36>
 8001d0a:	4b9a      	ldr	r3, [pc, #616]	; (8001f74 <displayUART+0x29c>)
 8001d0c:	e002      	b.n	8001d14 <displayUART+0x3c>
 8001d0e:	4b9a      	ldr	r3, [pc, #616]	; (8001f78 <displayUART+0x2a0>)
 8001d10:	e000      	b.n	8001d14 <displayUART+0x3c>
 8001d12:	4b9a      	ldr	r3, [pc, #616]	; (8001f7c <displayUART+0x2a4>)
 8001d14:	61bb      	str	r3, [r7, #24]
	char* curMode2 = (led2 == RED)? "RED" : "GREEN";
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	2b15      	cmp	r3, #21
 8001d1a:	d101      	bne.n	8001d20 <displayUART+0x48>
 8001d1c:	4b97      	ldr	r3, [pc, #604]	; (8001f7c <displayUART+0x2a4>)
 8001d1e:	e000      	b.n	8001d22 <displayUART+0x4a>
 8001d20:	4b95      	ldr	r3, [pc, #596]	; (8001f78 <displayUART+0x2a0>)
 8001d22:	617b      	str	r3, [r7, #20]
	switch (mode){
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3b0b      	subs	r3, #11
 8001d28:	2b17      	cmp	r3, #23
 8001d2a:	f200 8196 	bhi.w	800205a <displayUART+0x382>
 8001d2e:	a201      	add	r2, pc, #4	; (adr r2, 8001d34 <displayUART+0x5c>)
 8001d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d34:	08002029 	.word	0x08002029
 8001d38:	0800205b 	.word	0x0800205b
 8001d3c:	08001fb1 	.word	0x08001fb1
 8001d40:	0800205b 	.word	0x0800205b
 8001d44:	0800205b 	.word	0x0800205b
 8001d48:	0800205b 	.word	0x0800205b
 8001d4c:	0800205b 	.word	0x0800205b
 8001d50:	0800205b 	.word	0x0800205b
 8001d54:	0800205b 	.word	0x0800205b
 8001d58:	0800205b 	.word	0x0800205b
 8001d5c:	08001e3d 	.word	0x08001e3d
 8001d60:	08001e9d 	.word	0x08001e9d
 8001d64:	08001efd 	.word	0x08001efd
 8001d68:	0800205b 	.word	0x0800205b
 8001d6c:	0800205b 	.word	0x0800205b
 8001d70:	0800205b 	.word	0x0800205b
 8001d74:	0800205b 	.word	0x0800205b
 8001d78:	0800205b 	.word	0x0800205b
 8001d7c:	0800205b 	.word	0x0800205b
 8001d80:	0800205b 	.word	0x0800205b
 8001d84:	08001f5d 	.word	0x08001f5d
 8001d88:	0800205b 	.word	0x0800205b
 8001d8c:	08001d95 	.word	0x08001d95
 8001d90:	08002041 	.word	0x08002041
		case COUNTDOWN:
			if (num0 != 0 && num1 != 0){
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8161 	beq.w	800205e <displayUART+0x386>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 815d 	beq.w	800205e <displayUART+0x386>
				HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "%c[2J", 0x1b), 100);
 8001da4:	221b      	movs	r2, #27
 8001da6:	4976      	ldr	r1, [pc, #472]	; (8001f80 <displayUART+0x2a8>)
 8001da8:	4876      	ldr	r0, [pc, #472]	; (8001f84 <displayUART+0x2ac>)
 8001daa:	f002 fa8b 	bl	80042c4 <siprintf>
 8001dae:	4603      	mov	r3, r0
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	2364      	movs	r3, #100	; 0x64
 8001db4:	4973      	ldr	r1, [pc, #460]	; (8001f84 <displayUART+0x2ac>)
 8001db6:	4874      	ldr	r0, [pc, #464]	; (8001f88 <displayUART+0x2b0>)
 8001db8:	f002 f919 	bl	8003fee <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "%c[0;0H", 0x1b), 100);
 8001dbc:	221b      	movs	r2, #27
 8001dbe:	4973      	ldr	r1, [pc, #460]	; (8001f8c <displayUART+0x2b4>)
 8001dc0:	4870      	ldr	r0, [pc, #448]	; (8001f84 <displayUART+0x2ac>)
 8001dc2:	f002 fa7f 	bl	80042c4 <siprintf>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	2364      	movs	r3, #100	; 0x64
 8001dcc:	496d      	ldr	r1, [pc, #436]	; (8001f84 <displayUART+0x2ac>)
 8001dce:	486e      	ldr	r0, [pc, #440]	; (8001f88 <displayUART+0x2b0>)
 8001dd0:	f002 f90d 	bl	8003fee <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "Lane 0: %s\n\rCountdown: %d\n\r", curMode0, num0), 100);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	496d      	ldr	r1, [pc, #436]	; (8001f90 <displayUART+0x2b8>)
 8001dda:	486a      	ldr	r0, [pc, #424]	; (8001f84 <displayUART+0x2ac>)
 8001ddc:	f002 fa72 	bl	80042c4 <siprintf>
 8001de0:	4603      	mov	r3, r0
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	2364      	movs	r3, #100	; 0x64
 8001de6:	4967      	ldr	r1, [pc, #412]	; (8001f84 <displayUART+0x2ac>)
 8001de8:	4867      	ldr	r0, [pc, #412]	; (8001f88 <displayUART+0x2b0>)
 8001dea:	f002 f900 	bl	8003fee <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "Lane 1: %s\n\rCountdown: %d\n\r", curMode1, num1), 100);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4968      	ldr	r1, [pc, #416]	; (8001f94 <displayUART+0x2bc>)
 8001df4:	4863      	ldr	r0, [pc, #396]	; (8001f84 <displayUART+0x2ac>)
 8001df6:	f002 fa65 	bl	80042c4 <siprintf>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	2364      	movs	r3, #100	; 0x64
 8001e00:	4960      	ldr	r1, [pc, #384]	; (8001f84 <displayUART+0x2ac>)
 8001e02:	4861      	ldr	r0, [pc, #388]	; (8001f88 <displayUART+0x2b0>)
 8001e04:	f002 f8f3 	bl	8003fee <HAL_UART_Transmit>
				if (pedLed == AUTO){
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	2b0b      	cmp	r3, #11
 8001e0c:	f040 8127 	bne.w	800205e <displayUART+0x386>
					int num2 = (led0 == GREEN)? num0 + 2: num0;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b17      	cmp	r3, #23
 8001e14:	d102      	bne.n	8001e1c <displayUART+0x144>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	3302      	adds	r3, #2
 8001e1a:	e000      	b.n	8001e1e <displayUART+0x146>
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	613b      	str	r3, [r7, #16]
					HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "Ped light: %s\n\rCountdown: %d\n\r", curMode2, num2), 100);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	495c      	ldr	r1, [pc, #368]	; (8001f98 <displayUART+0x2c0>)
 8001e26:	4857      	ldr	r0, [pc, #348]	; (8001f84 <displayUART+0x2ac>)
 8001e28:	f002 fa4c 	bl	80042c4 <siprintf>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	2364      	movs	r3, #100	; 0x64
 8001e32:	4954      	ldr	r1, [pc, #336]	; (8001f84 <displayUART+0x2ac>)
 8001e34:	4854      	ldr	r0, [pc, #336]	; (8001f88 <displayUART+0x2b0>)
 8001e36:	f002 f8da 	bl	8003fee <HAL_UART_Transmit>
				}
			}
			break;
 8001e3a:	e110      	b.n	800205e <displayUART+0x386>
		case RED:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "%c[2J", 0x1b), 100);
 8001e3c:	221b      	movs	r2, #27
 8001e3e:	4950      	ldr	r1, [pc, #320]	; (8001f80 <displayUART+0x2a8>)
 8001e40:	4850      	ldr	r0, [pc, #320]	; (8001f84 <displayUART+0x2ac>)
 8001e42:	f002 fa3f 	bl	80042c4 <siprintf>
 8001e46:	4603      	mov	r3, r0
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	2364      	movs	r3, #100	; 0x64
 8001e4c:	494d      	ldr	r1, [pc, #308]	; (8001f84 <displayUART+0x2ac>)
 8001e4e:	484e      	ldr	r0, [pc, #312]	; (8001f88 <displayUART+0x2b0>)
 8001e50:	f002 f8cd 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "%c[0;0H", 0x1b), 100);
 8001e54:	221b      	movs	r2, #27
 8001e56:	494d      	ldr	r1, [pc, #308]	; (8001f8c <displayUART+0x2b4>)
 8001e58:	484a      	ldr	r0, [pc, #296]	; (8001f84 <displayUART+0x2ac>)
 8001e5a:	f002 fa33 	bl	80042c4 <siprintf>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	2364      	movs	r3, #100	; 0x64
 8001e64:	4947      	ldr	r1, [pc, #284]	; (8001f84 <displayUART+0x2ac>)
 8001e66:	4848      	ldr	r0, [pc, #288]	; (8001f88 <displayUART+0x2b0>)
 8001e68:	f002 f8c1 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!TUNING#\n\r"), 100);
 8001e6c:	494b      	ldr	r1, [pc, #300]	; (8001f9c <displayUART+0x2c4>)
 8001e6e:	4845      	ldr	r0, [pc, #276]	; (8001f84 <displayUART+0x2ac>)
 8001e70:	f002 fa28 	bl	80042c4 <siprintf>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	2364      	movs	r3, #100	; 0x64
 8001e7a:	4942      	ldr	r1, [pc, #264]	; (8001f84 <displayUART+0x2ac>)
 8001e7c:	4842      	ldr	r0, [pc, #264]	; (8001f88 <displayUART+0x2b0>)
 8001e7e:	f002 f8b6 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!RED=%d#\n\r", num0), 100);
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	4946      	ldr	r1, [pc, #280]	; (8001fa0 <displayUART+0x2c8>)
 8001e86:	483f      	ldr	r0, [pc, #252]	; (8001f84 <displayUART+0x2ac>)
 8001e88:	f002 fa1c 	bl	80042c4 <siprintf>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	2364      	movs	r3, #100	; 0x64
 8001e92:	493c      	ldr	r1, [pc, #240]	; (8001f84 <displayUART+0x2ac>)
 8001e94:	483c      	ldr	r0, [pc, #240]	; (8001f88 <displayUART+0x2b0>)
 8001e96:	f002 f8aa 	bl	8003fee <HAL_UART_Transmit>
			break;
 8001e9a:	e0e1      	b.n	8002060 <displayUART+0x388>
		case AMBER:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "%c[2J", 0x1b), 100);
 8001e9c:	221b      	movs	r2, #27
 8001e9e:	4938      	ldr	r1, [pc, #224]	; (8001f80 <displayUART+0x2a8>)
 8001ea0:	4838      	ldr	r0, [pc, #224]	; (8001f84 <displayUART+0x2ac>)
 8001ea2:	f002 fa0f 	bl	80042c4 <siprintf>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	2364      	movs	r3, #100	; 0x64
 8001eac:	4935      	ldr	r1, [pc, #212]	; (8001f84 <displayUART+0x2ac>)
 8001eae:	4836      	ldr	r0, [pc, #216]	; (8001f88 <displayUART+0x2b0>)
 8001eb0:	f002 f89d 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "%c[0;0H", 0x1b), 100);
 8001eb4:	221b      	movs	r2, #27
 8001eb6:	4935      	ldr	r1, [pc, #212]	; (8001f8c <displayUART+0x2b4>)
 8001eb8:	4832      	ldr	r0, [pc, #200]	; (8001f84 <displayUART+0x2ac>)
 8001eba:	f002 fa03 	bl	80042c4 <siprintf>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	2364      	movs	r3, #100	; 0x64
 8001ec4:	492f      	ldr	r1, [pc, #188]	; (8001f84 <displayUART+0x2ac>)
 8001ec6:	4830      	ldr	r0, [pc, #192]	; (8001f88 <displayUART+0x2b0>)
 8001ec8:	f002 f891 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!TUNING#\n\r"), 100);
 8001ecc:	4933      	ldr	r1, [pc, #204]	; (8001f9c <displayUART+0x2c4>)
 8001ece:	482d      	ldr	r0, [pc, #180]	; (8001f84 <displayUART+0x2ac>)
 8001ed0:	f002 f9f8 	bl	80042c4 <siprintf>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	2364      	movs	r3, #100	; 0x64
 8001eda:	492a      	ldr	r1, [pc, #168]	; (8001f84 <displayUART+0x2ac>)
 8001edc:	482a      	ldr	r0, [pc, #168]	; (8001f88 <displayUART+0x2b0>)
 8001ede:	f002 f886 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!AMBER=%d#\n\r", num0), 100);
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	492f      	ldr	r1, [pc, #188]	; (8001fa4 <displayUART+0x2cc>)
 8001ee6:	4827      	ldr	r0, [pc, #156]	; (8001f84 <displayUART+0x2ac>)
 8001ee8:	f002 f9ec 	bl	80042c4 <siprintf>
 8001eec:	4603      	mov	r3, r0
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	2364      	movs	r3, #100	; 0x64
 8001ef2:	4924      	ldr	r1, [pc, #144]	; (8001f84 <displayUART+0x2ac>)
 8001ef4:	4824      	ldr	r0, [pc, #144]	; (8001f88 <displayUART+0x2b0>)
 8001ef6:	f002 f87a 	bl	8003fee <HAL_UART_Transmit>
			break;
 8001efa:	e0b1      	b.n	8002060 <displayUART+0x388>
		case GREEN:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "%c[2J", 0x1b), 100);
 8001efc:	221b      	movs	r2, #27
 8001efe:	4920      	ldr	r1, [pc, #128]	; (8001f80 <displayUART+0x2a8>)
 8001f00:	4820      	ldr	r0, [pc, #128]	; (8001f84 <displayUART+0x2ac>)
 8001f02:	f002 f9df 	bl	80042c4 <siprintf>
 8001f06:	4603      	mov	r3, r0
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	2364      	movs	r3, #100	; 0x64
 8001f0c:	491d      	ldr	r1, [pc, #116]	; (8001f84 <displayUART+0x2ac>)
 8001f0e:	481e      	ldr	r0, [pc, #120]	; (8001f88 <displayUART+0x2b0>)
 8001f10:	f002 f86d 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "%c[0;0H", 0x1b), 100);
 8001f14:	221b      	movs	r2, #27
 8001f16:	491d      	ldr	r1, [pc, #116]	; (8001f8c <displayUART+0x2b4>)
 8001f18:	481a      	ldr	r0, [pc, #104]	; (8001f84 <displayUART+0x2ac>)
 8001f1a:	f002 f9d3 	bl	80042c4 <siprintf>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	2364      	movs	r3, #100	; 0x64
 8001f24:	4917      	ldr	r1, [pc, #92]	; (8001f84 <displayUART+0x2ac>)
 8001f26:	4818      	ldr	r0, [pc, #96]	; (8001f88 <displayUART+0x2b0>)
 8001f28:	f002 f861 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!TUNING#\n\r"), 100);
 8001f2c:	491b      	ldr	r1, [pc, #108]	; (8001f9c <displayUART+0x2c4>)
 8001f2e:	4815      	ldr	r0, [pc, #84]	; (8001f84 <displayUART+0x2ac>)
 8001f30:	f002 f9c8 	bl	80042c4 <siprintf>
 8001f34:	4603      	mov	r3, r0
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	2364      	movs	r3, #100	; 0x64
 8001f3a:	4912      	ldr	r1, [pc, #72]	; (8001f84 <displayUART+0x2ac>)
 8001f3c:	4812      	ldr	r0, [pc, #72]	; (8001f88 <displayUART+0x2b0>)
 8001f3e:	f002 f856 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!GREEN=%d#\n\r", num0), 100);
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	4918      	ldr	r1, [pc, #96]	; (8001fa8 <displayUART+0x2d0>)
 8001f46:	480f      	ldr	r0, [pc, #60]	; (8001f84 <displayUART+0x2ac>)
 8001f48:	f002 f9bc 	bl	80042c4 <siprintf>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	2364      	movs	r3, #100	; 0x64
 8001f52:	490c      	ldr	r1, [pc, #48]	; (8001f84 <displayUART+0x2ac>)
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <displayUART+0x2b0>)
 8001f56:	f002 f84a 	bl	8003fee <HAL_UART_Transmit>
			break;
 8001f5a:	e081      	b.n	8002060 <displayUART+0x388>
		case SAVED:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!SAVED#\n\r"), 100);
 8001f5c:	4913      	ldr	r1, [pc, #76]	; (8001fac <displayUART+0x2d4>)
 8001f5e:	4809      	ldr	r0, [pc, #36]	; (8001f84 <displayUART+0x2ac>)
 8001f60:	f002 f9b0 	bl	80042c4 <siprintf>
 8001f64:	4603      	mov	r3, r0
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	2364      	movs	r3, #100	; 0x64
 8001f6a:	4906      	ldr	r1, [pc, #24]	; (8001f84 <displayUART+0x2ac>)
 8001f6c:	4806      	ldr	r0, [pc, #24]	; (8001f88 <displayUART+0x2b0>)
 8001f6e:	f002 f83e 	bl	8003fee <HAL_UART_Transmit>
			break;
 8001f72:	e075      	b.n	8002060 <displayUART+0x388>
 8001f74:	08004c40 	.word	0x08004c40
 8001f78:	08004c48 	.word	0x08004c48
 8001f7c:	08004c50 	.word	0x08004c50
 8001f80:	08004c54 	.word	0x08004c54
 8001f84:	20000560 	.word	0x20000560
 8001f88:	200005c4 	.word	0x200005c4
 8001f8c:	08004c5c 	.word	0x08004c5c
 8001f90:	08004c64 	.word	0x08004c64
 8001f94:	08004c80 	.word	0x08004c80
 8001f98:	08004c9c 	.word	0x08004c9c
 8001f9c:	08004cbc 	.word	0x08004cbc
 8001fa0:	08004cc8 	.word	0x08004cc8
 8001fa4:	08004cd4 	.word	0x08004cd4
 8001fa8:	08004ce4 	.word	0x08004ce4
 8001fac:	08004cf4 	.word	0x08004cf4
		case MANUAL:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "%c[2J", 0x1b), 100);
 8001fb0:	221b      	movs	r2, #27
 8001fb2:	492d      	ldr	r1, [pc, #180]	; (8002068 <displayUART+0x390>)
 8001fb4:	482d      	ldr	r0, [pc, #180]	; (800206c <displayUART+0x394>)
 8001fb6:	f002 f985 	bl	80042c4 <siprintf>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	2364      	movs	r3, #100	; 0x64
 8001fc0:	492a      	ldr	r1, [pc, #168]	; (800206c <displayUART+0x394>)
 8001fc2:	482b      	ldr	r0, [pc, #172]	; (8002070 <displayUART+0x398>)
 8001fc4:	f002 f813 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "%c[0;0H", 0x1b), 100);
 8001fc8:	221b      	movs	r2, #27
 8001fca:	492a      	ldr	r1, [pc, #168]	; (8002074 <displayUART+0x39c>)
 8001fcc:	4827      	ldr	r0, [pc, #156]	; (800206c <displayUART+0x394>)
 8001fce:	f002 f979 	bl	80042c4 <siprintf>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	2364      	movs	r3, #100	; 0x64
 8001fd8:	4924      	ldr	r1, [pc, #144]	; (800206c <displayUART+0x394>)
 8001fda:	4825      	ldr	r0, [pc, #148]	; (8002070 <displayUART+0x398>)
 8001fdc:	f002 f807 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!MANUAL#\n\r"), 100);
 8001fe0:	4925      	ldr	r1, [pc, #148]	; (8002078 <displayUART+0x3a0>)
 8001fe2:	4822      	ldr	r0, [pc, #136]	; (800206c <displayUART+0x394>)
 8001fe4:	f002 f96e 	bl	80042c4 <siprintf>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	2364      	movs	r3, #100	; 0x64
 8001fee:	491f      	ldr	r1, [pc, #124]	; (800206c <displayUART+0x394>)
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <displayUART+0x398>)
 8001ff2:	f001 fffc 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "Lane 0: %s\n\r", curMode0), 100);
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	4920      	ldr	r1, [pc, #128]	; (800207c <displayUART+0x3a4>)
 8001ffa:	481c      	ldr	r0, [pc, #112]	; (800206c <displayUART+0x394>)
 8001ffc:	f002 f962 	bl	80042c4 <siprintf>
 8002000:	4603      	mov	r3, r0
 8002002:	b29a      	uxth	r2, r3
 8002004:	2364      	movs	r3, #100	; 0x64
 8002006:	4919      	ldr	r1, [pc, #100]	; (800206c <displayUART+0x394>)
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <displayUART+0x398>)
 800200a:	f001 fff0 	bl	8003fee <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "Lane 1: %s\n\r", curMode1), 100);
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	491b      	ldr	r1, [pc, #108]	; (8002080 <displayUART+0x3a8>)
 8002012:	4816      	ldr	r0, [pc, #88]	; (800206c <displayUART+0x394>)
 8002014:	f002 f956 	bl	80042c4 <siprintf>
 8002018:	4603      	mov	r3, r0
 800201a:	b29a      	uxth	r2, r3
 800201c:	2364      	movs	r3, #100	; 0x64
 800201e:	4913      	ldr	r1, [pc, #76]	; (800206c <displayUART+0x394>)
 8002020:	4813      	ldr	r0, [pc, #76]	; (8002070 <displayUART+0x398>)
 8002022:	f001 ffe4 	bl	8003fee <HAL_UART_Transmit>
			break;
 8002026:	e01b      	b.n	8002060 <displayUART+0x388>
		case AUTO:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!AUTO#\n\r"), 100);
 8002028:	4916      	ldr	r1, [pc, #88]	; (8002084 <displayUART+0x3ac>)
 800202a:	4810      	ldr	r0, [pc, #64]	; (800206c <displayUART+0x394>)
 800202c:	f002 f94a 	bl	80042c4 <siprintf>
 8002030:	4603      	mov	r3, r0
 8002032:	b29a      	uxth	r2, r3
 8002034:	2364      	movs	r3, #100	; 0x64
 8002036:	490d      	ldr	r1, [pc, #52]	; (800206c <displayUART+0x394>)
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <displayUART+0x398>)
 800203a:	f001 ffd8 	bl	8003fee <HAL_UART_Transmit>
			break;
 800203e:	e00f      	b.n	8002060 <displayUART+0x388>
		case DEBUGGER:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "Countdown: %d\n\r", num0), 100);
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	4911      	ldr	r1, [pc, #68]	; (8002088 <displayUART+0x3b0>)
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <displayUART+0x394>)
 8002046:	f002 f93d 	bl	80042c4 <siprintf>
 800204a:	4603      	mov	r3, r0
 800204c:	b29a      	uxth	r2, r3
 800204e:	2364      	movs	r3, #100	; 0x64
 8002050:	4906      	ldr	r1, [pc, #24]	; (800206c <displayUART+0x394>)
 8002052:	4807      	ldr	r0, [pc, #28]	; (8002070 <displayUART+0x398>)
 8002054:	f001 ffcb 	bl	8003fee <HAL_UART_Transmit>
//			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "Countdown: %d\n\r", num1), 100);
			break;
 8002058:	e002      	b.n	8002060 <displayUART+0x388>
		default:
			break;
 800205a:	bf00      	nop
 800205c:	e000      	b.n	8002060 <displayUART+0x388>
			break;
 800205e:	bf00      	nop
	}



}
 8002060:	bf00      	nop
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	08004c54 	.word	0x08004c54
 800206c:	20000560 	.word	0x20000560
 8002070:	200005c4 	.word	0x200005c4
 8002074:	08004c5c 	.word	0x08004c5c
 8002078:	08004d00 	.word	0x08004d00
 800207c:	08004d0c 	.word	0x08004d0c
 8002080:	08004d1c 	.word	0x08004d1c
 8002084:	08004d2c 	.word	0x08004d2c
 8002088:	08004d38 	.word	0x08004d38

0800208c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <MX_USART2_UART_Init+0x50>)
 8002094:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 8002098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800209c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020b2:	220c      	movs	r2, #12
 80020b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020c4:	f001 ff46 	bl	8003f54 <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ce:	f7ff fa58 	bl	8001582 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200005c4 	.word	0x200005c4
 80020dc:	40004400 	.word	0x40004400

080020e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a15      	ldr	r2, [pc, #84]	; (8002150 <HAL_UART_MspInit+0x70>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d123      	bne.n	8002148 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_UART_MspInit+0x74>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	4a13      	ldr	r2, [pc, #76]	; (8002154 <HAL_UART_MspInit+0x74>)
 8002106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210a:	61d3      	str	r3, [r2, #28]
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_UART_MspInit+0x74>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_UART_MspInit+0x74>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <HAL_UART_MspInit+0x74>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_UART_MspInit+0x74>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002130:	230c      	movs	r3, #12
 8002132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2302      	movs	r3, #2
 800213a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	4619      	mov	r1, r3
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <HAL_UART_MspInit+0x78>)
 8002144:	f000 f9a0 	bl	8002488 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002148:	bf00      	nop
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40004400 	.word	0x40004400
 8002154:	40021000 	.word	0x40021000
 8002158:	40010800 	.word	0x40010800

0800215c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800215c:	f7ff fb62 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002160:	480b      	ldr	r0, [pc, #44]	; (8002190 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002162:	490c      	ldr	r1, [pc, #48]	; (8002194 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002164:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002168:	e002      	b.n	8002170 <LoopCopyDataInit>

0800216a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800216c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216e:	3304      	adds	r3, #4

08002170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002174:	d3f9      	bcc.n	800216a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002178:	4c09      	ldr	r4, [pc, #36]	; (80021a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800217c:	e001      	b.n	8002182 <LoopFillZerobss>

0800217e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002180:	3204      	adds	r2, #4

08002182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002184:	d3fb      	bcc.n	800217e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002186:	f002 f8cb 	bl	8004320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800218a:	f7ff f96d 	bl	8001468 <main>
  bx lr
 800218e:	4770      	bx	lr
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8002198:	08004dac 	.word	0x08004dac
  ldr r2, =_sbss
 800219c:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 80021a0:	20000754 	.word	0x20000754

080021a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <ADC1_2_IRQHandler>
	...

080021a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_Init+0x28>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_Init+0x28>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 f923 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 f808 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c4:	f7ff fa8c 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40022000 	.word	0x40022000

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x54>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_InitTick+0x58>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f93b 	bl	800246e <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0f      	cmp	r3, #15
 8002206:	d80a      	bhi.n	800221e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f000 f903 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <HAL_InitTick+0x5c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200000c4 	.word	0x200000c4
 800222c:	200000f0 	.word	0x200000f0
 8002230:	200000ec 	.word	0x200000ec

08002234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_IncTick+0x1c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_IncTick+0x20>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a03      	ldr	r2, [pc, #12]	; (8002254 <HAL_IncTick+0x20>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	200000f0 	.word	0x200000f0
 8002254:	20000608 	.word	0x20000608

08002258 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return uwTick;
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <HAL_GetTick+0x10>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000608 	.word	0x20000608

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4906      	ldr	r1, [pc, #24]	; (8002304 <__NVIC_EnableIRQ+0x34>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff90 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff2d 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff42 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff90 	bl	800235c <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5f 	bl	8002308 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff35 	bl	80022d0 <__NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffa2 	bl	80023c0 <SysTick_Config>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b08b      	sub	sp, #44	; 0x2c
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249a:	e169      	b.n	8002770 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800249c:	2201      	movs	r2, #1
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	f040 8158 	bne.w	800276a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4a9a      	ldr	r2, [pc, #616]	; (8002728 <HAL_GPIO_Init+0x2a0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d05e      	beq.n	8002582 <HAL_GPIO_Init+0xfa>
 80024c4:	4a98      	ldr	r2, [pc, #608]	; (8002728 <HAL_GPIO_Init+0x2a0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d875      	bhi.n	80025b6 <HAL_GPIO_Init+0x12e>
 80024ca:	4a98      	ldr	r2, [pc, #608]	; (800272c <HAL_GPIO_Init+0x2a4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d058      	beq.n	8002582 <HAL_GPIO_Init+0xfa>
 80024d0:	4a96      	ldr	r2, [pc, #600]	; (800272c <HAL_GPIO_Init+0x2a4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d86f      	bhi.n	80025b6 <HAL_GPIO_Init+0x12e>
 80024d6:	4a96      	ldr	r2, [pc, #600]	; (8002730 <HAL_GPIO_Init+0x2a8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d052      	beq.n	8002582 <HAL_GPIO_Init+0xfa>
 80024dc:	4a94      	ldr	r2, [pc, #592]	; (8002730 <HAL_GPIO_Init+0x2a8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d869      	bhi.n	80025b6 <HAL_GPIO_Init+0x12e>
 80024e2:	4a94      	ldr	r2, [pc, #592]	; (8002734 <HAL_GPIO_Init+0x2ac>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d04c      	beq.n	8002582 <HAL_GPIO_Init+0xfa>
 80024e8:	4a92      	ldr	r2, [pc, #584]	; (8002734 <HAL_GPIO_Init+0x2ac>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d863      	bhi.n	80025b6 <HAL_GPIO_Init+0x12e>
 80024ee:	4a92      	ldr	r2, [pc, #584]	; (8002738 <HAL_GPIO_Init+0x2b0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d046      	beq.n	8002582 <HAL_GPIO_Init+0xfa>
 80024f4:	4a90      	ldr	r2, [pc, #576]	; (8002738 <HAL_GPIO_Init+0x2b0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d85d      	bhi.n	80025b6 <HAL_GPIO_Init+0x12e>
 80024fa:	2b12      	cmp	r3, #18
 80024fc:	d82a      	bhi.n	8002554 <HAL_GPIO_Init+0xcc>
 80024fe:	2b12      	cmp	r3, #18
 8002500:	d859      	bhi.n	80025b6 <HAL_GPIO_Init+0x12e>
 8002502:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <HAL_GPIO_Init+0x80>)
 8002504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002508:	08002583 	.word	0x08002583
 800250c:	0800255d 	.word	0x0800255d
 8002510:	0800256f 	.word	0x0800256f
 8002514:	080025b1 	.word	0x080025b1
 8002518:	080025b7 	.word	0x080025b7
 800251c:	080025b7 	.word	0x080025b7
 8002520:	080025b7 	.word	0x080025b7
 8002524:	080025b7 	.word	0x080025b7
 8002528:	080025b7 	.word	0x080025b7
 800252c:	080025b7 	.word	0x080025b7
 8002530:	080025b7 	.word	0x080025b7
 8002534:	080025b7 	.word	0x080025b7
 8002538:	080025b7 	.word	0x080025b7
 800253c:	080025b7 	.word	0x080025b7
 8002540:	080025b7 	.word	0x080025b7
 8002544:	080025b7 	.word	0x080025b7
 8002548:	080025b7 	.word	0x080025b7
 800254c:	08002565 	.word	0x08002565
 8002550:	08002579 	.word	0x08002579
 8002554:	4a79      	ldr	r2, [pc, #484]	; (800273c <HAL_GPIO_Init+0x2b4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800255a:	e02c      	b.n	80025b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	623b      	str	r3, [r7, #32]
          break;
 8002562:	e029      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	3304      	adds	r3, #4
 800256a:	623b      	str	r3, [r7, #32]
          break;
 800256c:	e024      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	3308      	adds	r3, #8
 8002574:	623b      	str	r3, [r7, #32]
          break;
 8002576:	e01f      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	330c      	adds	r3, #12
 800257e:	623b      	str	r3, [r7, #32]
          break;
 8002580:	e01a      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800258a:	2304      	movs	r3, #4
 800258c:	623b      	str	r3, [r7, #32]
          break;
 800258e:	e013      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d105      	bne.n	80025a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002598:	2308      	movs	r3, #8
 800259a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	611a      	str	r2, [r3, #16]
          break;
 80025a2:	e009      	b.n	80025b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a4:	2308      	movs	r3, #8
 80025a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	615a      	str	r2, [r3, #20]
          break;
 80025ae:	e003      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025b0:	2300      	movs	r3, #0
 80025b2:	623b      	str	r3, [r7, #32]
          break;
 80025b4:	e000      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          break;
 80025b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2bff      	cmp	r3, #255	; 0xff
 80025bc:	d801      	bhi.n	80025c2 <HAL_GPIO_Init+0x13a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	e001      	b.n	80025c6 <HAL_GPIO_Init+0x13e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3304      	adds	r3, #4
 80025c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2bff      	cmp	r3, #255	; 0xff
 80025cc:	d802      	bhi.n	80025d4 <HAL_GPIO_Init+0x14c>
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	e002      	b.n	80025da <HAL_GPIO_Init+0x152>
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	3b08      	subs	r3, #8
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	210f      	movs	r1, #15
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	401a      	ands	r2, r3
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	431a      	orrs	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80b1 	beq.w	800276a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002608:	4b4d      	ldr	r3, [pc, #308]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	4a4c      	ldr	r2, [pc, #304]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6193      	str	r3, [r2, #24]
 8002614:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002620:	4a48      	ldr	r2, [pc, #288]	; (8002744 <HAL_GPIO_Init+0x2bc>)
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	3302      	adds	r3, #2
 8002628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	220f      	movs	r2, #15
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a40      	ldr	r2, [pc, #256]	; (8002748 <HAL_GPIO_Init+0x2c0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d013      	beq.n	8002674 <HAL_GPIO_Init+0x1ec>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a3f      	ldr	r2, [pc, #252]	; (800274c <HAL_GPIO_Init+0x2c4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00d      	beq.n	8002670 <HAL_GPIO_Init+0x1e8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a3e      	ldr	r2, [pc, #248]	; (8002750 <HAL_GPIO_Init+0x2c8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d007      	beq.n	800266c <HAL_GPIO_Init+0x1e4>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a3d      	ldr	r2, [pc, #244]	; (8002754 <HAL_GPIO_Init+0x2cc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d101      	bne.n	8002668 <HAL_GPIO_Init+0x1e0>
 8002664:	2303      	movs	r3, #3
 8002666:	e006      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 8002668:	2304      	movs	r3, #4
 800266a:	e004      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 800266c:	2302      	movs	r3, #2
 800266e:	e002      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 8002674:	2300      	movs	r3, #0
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	f002 0203 	and.w	r2, r2, #3
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	4093      	lsls	r3, r2
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002686:	492f      	ldr	r1, [pc, #188]	; (8002744 <HAL_GPIO_Init+0x2bc>)
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	492c      	ldr	r1, [pc, #176]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	4928      	ldr	r1, [pc, #160]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026c8:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4922      	ldr	r1, [pc, #136]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
 80026d4:	e006      	b.n	80026e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	43db      	mvns	r3, r3
 80026de:	491e      	ldr	r1, [pc, #120]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	4918      	ldr	r1, [pc, #96]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	43db      	mvns	r3, r3
 8002706:	4914      	ldr	r1, [pc, #80]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 8002708:	4013      	ands	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d021      	beq.n	800275c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	490e      	ldr	r1, [pc, #56]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
 8002724:	e021      	b.n	800276a <HAL_GPIO_Init+0x2e2>
 8002726:	bf00      	nop
 8002728:	10320000 	.word	0x10320000
 800272c:	10310000 	.word	0x10310000
 8002730:	10220000 	.word	0x10220000
 8002734:	10210000 	.word	0x10210000
 8002738:	10120000 	.word	0x10120000
 800273c:	10110000 	.word	0x10110000
 8002740:	40021000 	.word	0x40021000
 8002744:	40010000 	.word	0x40010000
 8002748:	40010800 	.word	0x40010800
 800274c:	40010c00 	.word	0x40010c00
 8002750:	40011000 	.word	0x40011000
 8002754:	40011400 	.word	0x40011400
 8002758:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_GPIO_Init+0x304>)
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	43db      	mvns	r3, r3
 8002764:	4909      	ldr	r1, [pc, #36]	; (800278c <HAL_GPIO_Init+0x304>)
 8002766:	4013      	ands	r3, r2
 8002768:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	3301      	adds	r3, #1
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	f47f ae8e 	bne.w	800249c <HAL_GPIO_Init+0x14>
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	372c      	adds	r7, #44	; 0x2c
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	40010400 	.word	0x40010400

08002790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	e001      	b.n	80027b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	807b      	strh	r3, [r7, #2]
 80027ca:	4613      	mov	r3, r2
 80027cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027ce:	787b      	ldrb	r3, [r7, #1]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d4:	887a      	ldrh	r2, [r7, #2]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027da:	e003      	b.n	80027e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	041a      	lsls	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	611a      	str	r2, [r3, #16]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002800:	887a      	ldrh	r2, [r7, #2]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	041a      	lsls	r2, r3, #16
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43d9      	mvns	r1, r3
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	400b      	ands	r3, r1
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	611a      	str	r2, [r3, #16]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d006      	beq.n	8002844 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002836:	4a05      	ldr	r2, [pc, #20]	; (800284c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f806 	bl	8002850 <HAL_GPIO_EXTI_Callback>
  }
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40010400 	.word	0x40010400

08002850 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e272      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8087 	beq.w	8002992 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002884:	4b92      	ldr	r3, [pc, #584]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b04      	cmp	r3, #4
 800288e:	d00c      	beq.n	80028aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002890:	4b8f      	ldr	r3, [pc, #572]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	d112      	bne.n	80028c2 <HAL_RCC_OscConfig+0x5e>
 800289c:	4b8c      	ldr	r3, [pc, #560]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a8:	d10b      	bne.n	80028c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028aa:	4b89      	ldr	r3, [pc, #548]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d06c      	beq.n	8002990 <HAL_RCC_OscConfig+0x12c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d168      	bne.n	8002990 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e24c      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x76>
 80028cc:	4b80      	ldr	r3, [pc, #512]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a7f      	ldr	r2, [pc, #508]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	e02e      	b.n	8002938 <HAL_RCC_OscConfig+0xd4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x98>
 80028e2:	4b7b      	ldr	r3, [pc, #492]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7a      	ldr	r2, [pc, #488]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b78      	ldr	r3, [pc, #480]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a77      	ldr	r2, [pc, #476]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e01d      	b.n	8002938 <HAL_RCC_OscConfig+0xd4>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002904:	d10c      	bne.n	8002920 <HAL_RCC_OscConfig+0xbc>
 8002906:	4b72      	ldr	r3, [pc, #456]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a71      	ldr	r2, [pc, #452]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 800290c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b6f      	ldr	r3, [pc, #444]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a6e      	ldr	r2, [pc, #440]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e00b      	b.n	8002938 <HAL_RCC_OscConfig+0xd4>
 8002920:	4b6b      	ldr	r3, [pc, #428]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a6a      	ldr	r2, [pc, #424]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a67      	ldr	r2, [pc, #412]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002936:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d013      	beq.n	8002968 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7ff fc8a 	bl	8002258 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7ff fc86 	bl	8002258 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e200      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	4b5d      	ldr	r3, [pc, #372]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0xe4>
 8002966:	e014      	b.n	8002992 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7ff fc76 	bl	8002258 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002970:	f7ff fc72 	bl	8002258 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e1ec      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002982:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x10c>
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d063      	beq.n	8002a66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800299e:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029aa:	4b49      	ldr	r3, [pc, #292]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d11c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x18c>
 80029b6:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d116      	bne.n	80029f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_RCC_OscConfig+0x176>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d001      	beq.n	80029da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e1c0      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029da:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4939      	ldr	r1, [pc, #228]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ee:	e03a      	b.n	8002a66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7ff fc2b 	bl	8002258 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a06:	f7ff fc27 	bl	8002258 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e1a1      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a18:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a24:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4927      	ldr	r1, [pc, #156]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
 8002a38:	e015      	b.n	8002a66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3a:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7ff fc0a 	bl	8002258 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a48:	f7ff fc06 	bl	8002258 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e180      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d03a      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d019      	beq.n	8002aae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a80:	f7ff fbea 	bl	8002258 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a88:	f7ff fbe6 	bl	8002258 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e160      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f000 fad8 	bl	800305c <RCC_Delay>
 8002aac:	e01c      	b.n	8002ae8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab4:	f7ff fbd0 	bl	8002258 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aba:	e00f      	b.n	8002adc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7ff fbcc 	bl	8002258 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d908      	bls.n	8002adc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e146      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	42420000 	.word	0x42420000
 8002ad8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	4b92      	ldr	r3, [pc, #584]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e9      	bne.n	8002abc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a6 	beq.w	8002c42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afa:	4b8b      	ldr	r3, [pc, #556]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10d      	bne.n	8002b22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b88      	ldr	r3, [pc, #544]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4a87      	ldr	r2, [pc, #540]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	61d3      	str	r3, [r2, #28]
 8002b12:	4b85      	ldr	r3, [pc, #532]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b82      	ldr	r3, [pc, #520]	; (8002d2c <HAL_RCC_OscConfig+0x4c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d118      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2e:	4b7f      	ldr	r3, [pc, #508]	; (8002d2c <HAL_RCC_OscConfig+0x4c8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7e      	ldr	r2, [pc, #504]	; (8002d2c <HAL_RCC_OscConfig+0x4c8>)
 8002b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3a:	f7ff fb8d 	bl	8002258 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b42:	f7ff fb89 	bl	8002258 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b64      	cmp	r3, #100	; 0x64
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e103      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	4b75      	ldr	r3, [pc, #468]	; (8002d2c <HAL_RCC_OscConfig+0x4c8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0x312>
 8002b68:	4b6f      	ldr	r3, [pc, #444]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4a6e      	ldr	r2, [pc, #440]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6213      	str	r3, [r2, #32]
 8002b74:	e02d      	b.n	8002bd2 <HAL_RCC_OscConfig+0x36e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x334>
 8002b7e:	4b6a      	ldr	r3, [pc, #424]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4a69      	ldr	r2, [pc, #420]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	6213      	str	r3, [r2, #32]
 8002b8a:	4b67      	ldr	r3, [pc, #412]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a66      	ldr	r2, [pc, #408]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	6213      	str	r3, [r2, #32]
 8002b96:	e01c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x36e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	d10c      	bne.n	8002bba <HAL_RCC_OscConfig+0x356>
 8002ba0:	4b61      	ldr	r3, [pc, #388]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4a60      	ldr	r2, [pc, #384]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	6213      	str	r3, [r2, #32]
 8002bac:	4b5e      	ldr	r3, [pc, #376]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4a5d      	ldr	r2, [pc, #372]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6213      	str	r3, [r2, #32]
 8002bb8:	e00b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x36e>
 8002bba:	4b5b      	ldr	r3, [pc, #364]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a5a      	ldr	r2, [pc, #360]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	4b58      	ldr	r3, [pc, #352]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a57      	ldr	r2, [pc, #348]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d015      	beq.n	8002c06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7ff fb3d 	bl	8002258 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7ff fb39 	bl	8002258 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0b1      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ee      	beq.n	8002be2 <HAL_RCC_OscConfig+0x37e>
 8002c04:	e014      	b.n	8002c30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7ff fb27 	bl	8002258 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7ff fb23 	bl	8002258 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e09b      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ee      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c36:	4b3c      	ldr	r3, [pc, #240]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4a3b      	ldr	r2, [pc, #236]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8087 	beq.w	8002d5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c4c:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d061      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d146      	bne.n	8002cee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c60:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7ff faf7 	bl	8002258 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7ff faf3 	bl	8002258 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e06d      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c80:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d108      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c96:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4921      	ldr	r1, [pc, #132]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a19      	ldr	r1, [r3, #32]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	491b      	ldr	r1, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7ff fac7 	bl	8002258 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cce:	f7ff fac3 	bl	8002258 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e03d      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x46a>
 8002cec:	e035      	b.n	8002d5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7ff fab0 	bl	8002258 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7ff faac 	bl	8002258 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e026      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x498>
 8002d1a:	e01e      	b.n	8002d5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e019      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_OscConfig+0x500>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000

08002d68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0d0      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d910      	bls.n	8002dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 0207 	bic.w	r2, r3, #7
 8002d92:	4965      	ldr	r1, [pc, #404]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b63      	ldr	r3, [pc, #396]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0b8      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d020      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc4:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4a58      	ldr	r2, [pc, #352]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ddc:	4b53      	ldr	r3, [pc, #332]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a52      	ldr	r2, [pc, #328]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002de6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de8:	4b50      	ldr	r3, [pc, #320]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	494d      	ldr	r1, [pc, #308]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d040      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d115      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e07f      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e073      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b3d      	ldr	r3, [pc, #244]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e06b      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4936      	ldr	r1, [pc, #216]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e58:	f7ff f9fe 	bl	8002258 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7ff f9fa 	bl	8002258 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e053      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 020c 	and.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1eb      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d210      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0207 	bic.w	r2, r3, #7
 8002e9e:	4922      	ldr	r1, [pc, #136]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e032      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec4:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4916      	ldr	r1, [pc, #88]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	490e      	ldr	r1, [pc, #56]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ef6:	f000 f821 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002efa:	4602      	mov	r2, r0
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	490a      	ldr	r1, [pc, #40]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	5ccb      	ldrb	r3, [r1, r3]
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <HAL_RCC_ClockConfig+0x1cc>)
 8002f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCC_ClockConfig+0x1d0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff f95c 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40022000 	.word	0x40022000
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08004d58 	.word	0x08004d58
 8002f34:	200000c4 	.word	0x200000c4
 8002f38:	200000ec 	.word	0x200000ec

08002f3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	b490      	push	{r4, r7}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f42:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f44:	1d3c      	adds	r4, r7, #4
 8002f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f4c:	f240 2301 	movw	r3, #513	; 0x201
 8002f50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f66:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d002      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x40>
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d003      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x46>
 8002f7a:	e02b      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f7e:	623b      	str	r3, [r7, #32]
      break;
 8002f80:	e02b      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	0c9b      	lsrs	r3, r3, #18
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	3328      	adds	r3, #40	; 0x28
 8002f8c:	443b      	add	r3, r7
 8002f8e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f92:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d012      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f9e:	4b13      	ldr	r3, [pc, #76]	; (8002fec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	0c5b      	lsrs	r3, r3, #17
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	3328      	adds	r3, #40	; 0x28
 8002faa:	443b      	add	r3, r7
 8002fac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fb6:	fb03 f202 	mul.w	r2, r3, r2
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	e004      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	623b      	str	r3, [r7, #32]
      break;
 8002fd2:	e002      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fd6:	623b      	str	r3, [r7, #32]
      break;
 8002fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fda:	6a3b      	ldr	r3, [r7, #32]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3728      	adds	r7, #40	; 0x28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc90      	pop	{r4, r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	08004d48 	.word	0x08004d48
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	007a1200 	.word	0x007a1200
 8002ff4:	003d0900 	.word	0x003d0900

08002ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ffc:	4b02      	ldr	r3, [pc, #8]	; (8003008 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	200000c4 	.word	0x200000c4

0800300c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003010:	f7ff fff2 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4903      	ldr	r1, [pc, #12]	; (8003030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	08004d68 	.word	0x08004d68

08003034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003038:	f7ff ffde 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	0adb      	lsrs	r3, r3, #11
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	4903      	ldr	r1, [pc, #12]	; (8003058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	08004d68 	.word	0x08004d68

0800305c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <RCC_Delay+0x34>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <RCC_Delay+0x38>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0a5b      	lsrs	r3, r3, #9
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003078:	bf00      	nop
  }
  while (Delay --);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1e5a      	subs	r2, r3, #1
 800307e:	60fa      	str	r2, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f9      	bne.n	8003078 <RCC_Delay+0x1c>
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	200000c4 	.word	0x200000c4
 8003094:	10624dd3 	.word	0x10624dd3

08003098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e041      	b.n	800312e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fc7c 	bl	80019bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f000 fc28 	bl	800392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b01      	cmp	r3, #1
 800314a:	d001      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e03a      	b.n	80031c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_TIM_Base_Start_IT+0x98>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00e      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x58>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317a:	d009      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x58>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x58>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d111      	bne.n	80031b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d010      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b2:	e007      	b.n	80031c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800

080031dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e041      	b.n	8003272 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f839 	bl	800327a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f000 fb86 	bl	800392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_TIM_PWM_Start+0x24>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e022      	b.n	80032f6 <HAL_TIM_PWM_Start+0x6a>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d109      	bne.n	80032ca <HAL_TIM_PWM_Start+0x3e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	e015      	b.n	80032f6 <HAL_TIM_PWM_Start+0x6a>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d109      	bne.n	80032e4 <HAL_TIM_PWM_Start+0x58>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e008      	b.n	80032f6 <HAL_TIM_PWM_Start+0x6a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e05e      	b.n	80033bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <HAL_TIM_PWM_Start+0x82>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800330c:	e013      	b.n	8003336 <HAL_TIM_PWM_Start+0xaa>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b04      	cmp	r3, #4
 8003312:	d104      	bne.n	800331e <HAL_TIM_PWM_Start+0x92>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800331c:	e00b      	b.n	8003336 <HAL_TIM_PWM_Start+0xaa>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d104      	bne.n	800332e <HAL_TIM_PWM_Start+0xa2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800332c:	e003      	b.n	8003336 <HAL_TIM_PWM_Start+0xaa>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2201      	movs	r2, #1
 800333c:	6839      	ldr	r1, [r7, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fd74 	bl	8003e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <HAL_TIM_PWM_Start+0x138>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d107      	bne.n	800335e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_TIM_PWM_Start+0x138>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <HAL_TIM_PWM_Start+0xfa>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003370:	d009      	beq.n	8003386 <HAL_TIM_PWM_Start+0xfa>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a14      	ldr	r2, [pc, #80]	; (80033c8 <HAL_TIM_PWM_Start+0x13c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_TIM_PWM_Start+0xfa>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a12      	ldr	r2, [pc, #72]	; (80033cc <HAL_TIM_PWM_Start+0x140>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d111      	bne.n	80033aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b06      	cmp	r3, #6
 8003396:	d010      	beq.n	80033ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a8:	e007      	b.n	80033ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40012c00 	.word	0x40012c00
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40000800 	.word	0x40000800

080033d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0202 	mvn.w	r2, #2
 80033fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fa6f 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fa62 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fa71 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b04      	cmp	r3, #4
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0204 	mvn.w	r2, #4
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa45 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fa38 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fa47 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b08      	cmp	r3, #8
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b08      	cmp	r3, #8
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0208 	mvn.w	r2, #8
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2204      	movs	r2, #4
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fa1b 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa0e 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fa1d 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d122      	bne.n	8003528 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d11b      	bne.n	8003528 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0210 	mvn.w	r2, #16
 80034f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2208      	movs	r2, #8
 80034fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f9f1 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 8003514:	e005      	b.n	8003522 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f9e4 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f9f3 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d10e      	bne.n	8003554 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0201 	mvn.w	r2, #1
 800354c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd ffff 	bl	8001552 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b80      	cmp	r3, #128	; 0x80
 8003560:	d10e      	bne.n	8003580 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d107      	bne.n	8003580 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fce1 	bl	8003f42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d10e      	bne.n	80035ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003598:	2b40      	cmp	r3, #64	; 0x40
 800359a:	d107      	bne.n	80035ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f9b7 	bl	800391a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d10e      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d107      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0220 	mvn.w	r2, #32
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fcac 	bl	8003f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0ac      	b.n	8003754 <HAL_TIM_PWM_ConfigChannel+0x174>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	f200 809f 	bhi.w	8003748 <HAL_TIM_PWM_ConfigChannel+0x168>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003645 	.word	0x08003645
 8003614:	08003749 	.word	0x08003749
 8003618:	08003749 	.word	0x08003749
 800361c:	08003749 	.word	0x08003749
 8003620:	08003685 	.word	0x08003685
 8003624:	08003749 	.word	0x08003749
 8003628:	08003749 	.word	0x08003749
 800362c:	08003749 	.word	0x08003749
 8003630:	080036c7 	.word	0x080036c7
 8003634:	08003749 	.word	0x08003749
 8003638:	08003749 	.word	0x08003749
 800363c:	08003749 	.word	0x08003749
 8003640:	08003707 	.word	0x08003707
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f9d0 	bl	80039f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699a      	ldr	r2, [r3, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0208 	orr.w	r2, r2, #8
 800365e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0204 	bic.w	r2, r2, #4
 800366e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6999      	ldr	r1, [r3, #24]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	619a      	str	r2, [r3, #24]
      break;
 8003682:	e062      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fa16 	bl	8003abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800369e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6999      	ldr	r1, [r3, #24]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	021a      	lsls	r2, r3, #8
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	619a      	str	r2, [r3, #24]
      break;
 80036c4:	e041      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fa5f 	bl	8003b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0208 	orr.w	r2, r2, #8
 80036e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0204 	bic.w	r2, r2, #4
 80036f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69d9      	ldr	r1, [r3, #28]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	61da      	str	r2, [r3, #28]
      break;
 8003704:	e021      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	4618      	mov	r0, r3
 800370e:	f000 faa9 	bl	8003c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69d9      	ldr	r1, [r3, #28]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	021a      	lsls	r2, r3, #8
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	61da      	str	r2, [r3, #28]
      break;
 8003746:	e000      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003748:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_TIM_ConfigClockSource+0x18>
 8003770:	2302      	movs	r3, #2
 8003772:	e0b3      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x180>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800379a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ac:	d03e      	beq.n	800382c <HAL_TIM_ConfigClockSource+0xd0>
 80037ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b2:	f200 8087 	bhi.w	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	f000 8085 	beq.w	80038c8 <HAL_TIM_ConfigClockSource+0x16c>
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c2:	d87f      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037c4:	2b70      	cmp	r3, #112	; 0x70
 80037c6:	d01a      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0xa2>
 80037c8:	2b70      	cmp	r3, #112	; 0x70
 80037ca:	d87b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037cc:	2b60      	cmp	r3, #96	; 0x60
 80037ce:	d050      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x116>
 80037d0:	2b60      	cmp	r3, #96	; 0x60
 80037d2:	d877      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037d4:	2b50      	cmp	r3, #80	; 0x50
 80037d6:	d03c      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xf6>
 80037d8:	2b50      	cmp	r3, #80	; 0x50
 80037da:	d873      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d058      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x136>
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d86f      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037e4:	2b30      	cmp	r3, #48	; 0x30
 80037e6:	d064      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x156>
 80037e8:	2b30      	cmp	r3, #48	; 0x30
 80037ea:	d86b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d060      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x156>
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d867      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05c      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x156>
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d05a      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037fc:	e062      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6899      	ldr	r1, [r3, #8]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f000 faee 	bl	8003dee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003820:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	609a      	str	r2, [r3, #8]
      break;
 800382a:	e04e      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6899      	ldr	r1, [r3, #8]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f000 fad7 	bl	8003dee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800384e:	609a      	str	r2, [r3, #8]
      break;
 8003850:	e03b      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	461a      	mov	r2, r3
 8003860:	f000 fa4e 	bl	8003d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2150      	movs	r1, #80	; 0x50
 800386a:	4618      	mov	r0, r3
 800386c:	f000 faa5 	bl	8003dba <TIM_ITRx_SetConfig>
      break;
 8003870:	e02b      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	461a      	mov	r2, r3
 8003880:	f000 fa6c 	bl	8003d5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2160      	movs	r1, #96	; 0x60
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fa95 	bl	8003dba <TIM_ITRx_SetConfig>
      break;
 8003890:	e01b      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	461a      	mov	r2, r3
 80038a0:	f000 fa2e 	bl	8003d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fa85 	bl	8003dba <TIM_ITRx_SetConfig>
      break;
 80038b0:	e00b      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f000 fa7c 	bl	8003dba <TIM_ITRx_SetConfig>
        break;
 80038c2:	e002      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a29      	ldr	r2, [pc, #164]	; (80039e4 <TIM_Base_SetConfig+0xb8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00b      	beq.n	800395c <TIM_Base_SetConfig+0x30>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d007      	beq.n	800395c <TIM_Base_SetConfig+0x30>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <TIM_Base_SetConfig+0xbc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_Base_SetConfig+0x30>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a25      	ldr	r2, [pc, #148]	; (80039ec <TIM_Base_SetConfig+0xc0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d108      	bne.n	800396e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <TIM_Base_SetConfig+0xb8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00b      	beq.n	800398e <TIM_Base_SetConfig+0x62>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397c:	d007      	beq.n	800398e <TIM_Base_SetConfig+0x62>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <TIM_Base_SetConfig+0xbc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_Base_SetConfig+0x62>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a18      	ldr	r2, [pc, #96]	; (80039ec <TIM_Base_SetConfig+0xc0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d108      	bne.n	80039a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a07      	ldr	r2, [pc, #28]	; (80039e4 <TIM_Base_SetConfig+0xb8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d103      	bne.n	80039d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	615a      	str	r2, [r3, #20]
}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	40012c00 	.word	0x40012c00
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800

080039f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0201 	bic.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 0302 	bic.w	r3, r3, #2
 8003a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <TIM_OC1_SetConfig+0xc8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d10c      	bne.n	8003a66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0308 	bic.w	r3, r3, #8
 8003a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <TIM_OC1_SetConfig+0xc8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d111      	bne.n	8003a92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	621a      	str	r2, [r3, #32]
}
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40012c00 	.word	0x40012c00

08003abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f023 0210 	bic.w	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0320 	bic.w	r3, r3, #32
 8003b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <TIM_OC2_SetConfig+0xd0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d10d      	bne.n	8003b38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <TIM_OC2_SetConfig+0xd0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d113      	bne.n	8003b68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	40012c00 	.word	0x40012c00

08003b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <TIM_OC3_SetConfig+0xd0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d10d      	bne.n	8003c0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <TIM_OC3_SetConfig+0xd0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d113      	bne.n	8003c3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	621a      	str	r2, [r3, #32]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40012c00 	.word	0x40012c00

08003c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	031b      	lsls	r3, r3, #12
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0f      	ldr	r2, [pc, #60]	; (8003cfc <TIM_OC4_SetConfig+0x98>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d109      	bne.n	8003cd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	019b      	lsls	r3, r3, #6
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	40012c00 	.word	0x40012c00

08003d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f023 0201 	bic.w	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f023 030a 	bic.w	r3, r3, #10
 8003d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f023 0210 	bic.w	r2, r3, #16
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	031b      	lsls	r3, r3, #12
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	621a      	str	r2, [r3, #32]
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr

08003dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f043 0307 	orr.w	r3, r3, #7
 8003ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	609a      	str	r2, [r3, #8]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b087      	sub	sp, #28
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	021a      	lsls	r2, r3, #8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	609a      	str	r2, [r3, #8]
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2201      	movs	r2, #1
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1a      	ldr	r2, [r3, #32]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	401a      	ands	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e046      	b.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a16      	ldr	r2, [pc, #88]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00e      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed8:	d009      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d10c      	bne.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800

08003f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e03f      	b.n	8003fe6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe f8b0 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f905 	bl	80041a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b08a      	sub	sp, #40	; 0x28
 8003ff2:	af02      	add	r7, sp, #8
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b20      	cmp	r3, #32
 800400c:	d17c      	bne.n	8004108 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_UART_Transmit+0x2c>
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e075      	b.n	800410a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_UART_Transmit+0x3e>
 8004028:	2302      	movs	r3, #2
 800402a:	e06e      	b.n	800410a <HAL_UART_Transmit+0x11c>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2221      	movs	r2, #33	; 0x21
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004042:	f7fe f909 	bl	8002258 <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	88fa      	ldrh	r2, [r7, #6]
 8004052:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405c:	d108      	bne.n	8004070 <HAL_UART_Transmit+0x82>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d104      	bne.n	8004070 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	e003      	b.n	8004078 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004074:	2300      	movs	r3, #0
 8004076:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004080:	e02a      	b.n	80040d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2200      	movs	r2, #0
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f840 	bl	8004112 <UART_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e036      	b.n	800410a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	3302      	adds	r3, #2
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	e007      	b.n	80040ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	3301      	adds	r3, #1
 80040c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1cf      	bne.n	8004082 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2200      	movs	r2, #0
 80040ea:	2140      	movs	r1, #64	; 0x40
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f810 	bl	8004112 <UART_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e006      	b.n	800410a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e000      	b.n	800410a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004108:	2302      	movs	r3, #2
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	4613      	mov	r3, r2
 8004120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004122:	e02c      	b.n	800417e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	d028      	beq.n	800417e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <UART_WaitOnFlagUntilTimeout+0x30>
 8004132:	f7fe f891 	bl	8002258 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	429a      	cmp	r2, r3
 8004140:	d21d      	bcs.n	800417e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004150:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e00f      	b.n	800419e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4013      	ands	r3, r2
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	bf0c      	ite	eq
 800418e:	2301      	moveq	r3, #1
 8004190:	2300      	movne	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	429a      	cmp	r2, r3
 800419a:	d0c3      	beq.n	8004124 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041e2:	f023 030c 	bic.w	r3, r3, #12
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <UART_SetConfig+0x114>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d103      	bne.n	8004218 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004210:	f7fe ff10 	bl	8003034 <HAL_RCC_GetPCLK2Freq>
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	e002      	b.n	800421e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004218:	f7fe fef8 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 800421c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009a      	lsls	r2, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	4a22      	ldr	r2, [pc, #136]	; (80042c0 <UART_SetConfig+0x118>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	0119      	lsls	r1, r3, #4
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009a      	lsls	r2, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	fbb2 f2f3 	udiv	r2, r2, r3
 8004254:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <UART_SetConfig+0x118>)
 8004256:	fba3 0302 	umull	r0, r3, r3, r2
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2064      	movs	r0, #100	; 0x64
 800425e:	fb00 f303 	mul.w	r3, r0, r3
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	3332      	adds	r3, #50	; 0x32
 8004268:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <UART_SetConfig+0x118>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004274:	4419      	add	r1, r3
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009a      	lsls	r2, r3, #2
 8004280:	441a      	add	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	fbb2 f2f3 	udiv	r2, r2, r3
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <UART_SetConfig+0x118>)
 800428e:	fba3 0302 	umull	r0, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2064      	movs	r0, #100	; 0x64
 8004296:	fb00 f303 	mul.w	r3, r0, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	3332      	adds	r3, #50	; 0x32
 80042a0:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <UART_SetConfig+0x118>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	f003 020f 	and.w	r2, r3, #15
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	440a      	add	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40013800 	.word	0x40013800
 80042c0:	51eb851f 	.word	0x51eb851f

080042c4 <siprintf>:
 80042c4:	b40e      	push	{r1, r2, r3}
 80042c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042ca:	b500      	push	{lr}
 80042cc:	b09c      	sub	sp, #112	; 0x70
 80042ce:	ab1d      	add	r3, sp, #116	; 0x74
 80042d0:	9002      	str	r0, [sp, #8]
 80042d2:	9006      	str	r0, [sp, #24]
 80042d4:	9107      	str	r1, [sp, #28]
 80042d6:	9104      	str	r1, [sp, #16]
 80042d8:	4808      	ldr	r0, [pc, #32]	; (80042fc <siprintf+0x38>)
 80042da:	4909      	ldr	r1, [pc, #36]	; (8004300 <siprintf+0x3c>)
 80042dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80042e0:	9105      	str	r1, [sp, #20]
 80042e2:	6800      	ldr	r0, [r0, #0]
 80042e4:	a902      	add	r1, sp, #8
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	f000 f98e 	bl	8004608 <_svfiprintf_r>
 80042ec:	2200      	movs	r2, #0
 80042ee:	9b02      	ldr	r3, [sp, #8]
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	b01c      	add	sp, #112	; 0x70
 80042f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042f8:	b003      	add	sp, #12
 80042fa:	4770      	bx	lr
 80042fc:	20000140 	.word	0x20000140
 8004300:	ffff0208 	.word	0xffff0208

08004304 <memset>:
 8004304:	4603      	mov	r3, r0
 8004306:	4402      	add	r2, r0
 8004308:	4293      	cmp	r3, r2
 800430a:	d100      	bne.n	800430e <memset+0xa>
 800430c:	4770      	bx	lr
 800430e:	f803 1b01 	strb.w	r1, [r3], #1
 8004312:	e7f9      	b.n	8004308 <memset+0x4>

08004314 <__errno>:
 8004314:	4b01      	ldr	r3, [pc, #4]	; (800431c <__errno+0x8>)
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000140 	.word	0x20000140

08004320 <__libc_init_array>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	2600      	movs	r6, #0
 8004324:	4d0c      	ldr	r5, [pc, #48]	; (8004358 <__libc_init_array+0x38>)
 8004326:	4c0d      	ldr	r4, [pc, #52]	; (800435c <__libc_init_array+0x3c>)
 8004328:	1b64      	subs	r4, r4, r5
 800432a:	10a4      	asrs	r4, r4, #2
 800432c:	42a6      	cmp	r6, r4
 800432e:	d109      	bne.n	8004344 <__libc_init_array+0x24>
 8004330:	f000 fc7a 	bl	8004c28 <_init>
 8004334:	2600      	movs	r6, #0
 8004336:	4d0a      	ldr	r5, [pc, #40]	; (8004360 <__libc_init_array+0x40>)
 8004338:	4c0a      	ldr	r4, [pc, #40]	; (8004364 <__libc_init_array+0x44>)
 800433a:	1b64      	subs	r4, r4, r5
 800433c:	10a4      	asrs	r4, r4, #2
 800433e:	42a6      	cmp	r6, r4
 8004340:	d105      	bne.n	800434e <__libc_init_array+0x2e>
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	f855 3b04 	ldr.w	r3, [r5], #4
 8004348:	4798      	blx	r3
 800434a:	3601      	adds	r6, #1
 800434c:	e7ee      	b.n	800432c <__libc_init_array+0xc>
 800434e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004352:	4798      	blx	r3
 8004354:	3601      	adds	r6, #1
 8004356:	e7f2      	b.n	800433e <__libc_init_array+0x1e>
 8004358:	08004da4 	.word	0x08004da4
 800435c:	08004da4 	.word	0x08004da4
 8004360:	08004da4 	.word	0x08004da4
 8004364:	08004da8 	.word	0x08004da8

08004368 <__retarget_lock_acquire_recursive>:
 8004368:	4770      	bx	lr

0800436a <__retarget_lock_release_recursive>:
 800436a:	4770      	bx	lr

0800436c <_free_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	4605      	mov	r5, r0
 8004370:	2900      	cmp	r1, #0
 8004372:	d040      	beq.n	80043f6 <_free_r+0x8a>
 8004374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004378:	1f0c      	subs	r4, r1, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	bfb8      	it	lt
 800437e:	18e4      	addlt	r4, r4, r3
 8004380:	f000 f8dc 	bl	800453c <__malloc_lock>
 8004384:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <_free_r+0x8c>)
 8004386:	6813      	ldr	r3, [r2, #0]
 8004388:	b933      	cbnz	r3, 8004398 <_free_r+0x2c>
 800438a:	6063      	str	r3, [r4, #4]
 800438c:	6014      	str	r4, [r2, #0]
 800438e:	4628      	mov	r0, r5
 8004390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004394:	f000 b8d8 	b.w	8004548 <__malloc_unlock>
 8004398:	42a3      	cmp	r3, r4
 800439a:	d908      	bls.n	80043ae <_free_r+0x42>
 800439c:	6820      	ldr	r0, [r4, #0]
 800439e:	1821      	adds	r1, r4, r0
 80043a0:	428b      	cmp	r3, r1
 80043a2:	bf01      	itttt	eq
 80043a4:	6819      	ldreq	r1, [r3, #0]
 80043a6:	685b      	ldreq	r3, [r3, #4]
 80043a8:	1809      	addeq	r1, r1, r0
 80043aa:	6021      	streq	r1, [r4, #0]
 80043ac:	e7ed      	b.n	800438a <_free_r+0x1e>
 80043ae:	461a      	mov	r2, r3
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	b10b      	cbz	r3, 80043b8 <_free_r+0x4c>
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	d9fa      	bls.n	80043ae <_free_r+0x42>
 80043b8:	6811      	ldr	r1, [r2, #0]
 80043ba:	1850      	adds	r0, r2, r1
 80043bc:	42a0      	cmp	r0, r4
 80043be:	d10b      	bne.n	80043d8 <_free_r+0x6c>
 80043c0:	6820      	ldr	r0, [r4, #0]
 80043c2:	4401      	add	r1, r0
 80043c4:	1850      	adds	r0, r2, r1
 80043c6:	4283      	cmp	r3, r0
 80043c8:	6011      	str	r1, [r2, #0]
 80043ca:	d1e0      	bne.n	800438e <_free_r+0x22>
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4408      	add	r0, r1
 80043d2:	6010      	str	r0, [r2, #0]
 80043d4:	6053      	str	r3, [r2, #4]
 80043d6:	e7da      	b.n	800438e <_free_r+0x22>
 80043d8:	d902      	bls.n	80043e0 <_free_r+0x74>
 80043da:	230c      	movs	r3, #12
 80043dc:	602b      	str	r3, [r5, #0]
 80043de:	e7d6      	b.n	800438e <_free_r+0x22>
 80043e0:	6820      	ldr	r0, [r4, #0]
 80043e2:	1821      	adds	r1, r4, r0
 80043e4:	428b      	cmp	r3, r1
 80043e6:	bf01      	itttt	eq
 80043e8:	6819      	ldreq	r1, [r3, #0]
 80043ea:	685b      	ldreq	r3, [r3, #4]
 80043ec:	1809      	addeq	r1, r1, r0
 80043ee:	6021      	streq	r1, [r4, #0]
 80043f0:	6063      	str	r3, [r4, #4]
 80043f2:	6054      	str	r4, [r2, #4]
 80043f4:	e7cb      	b.n	800438e <_free_r+0x22>
 80043f6:	bd38      	pop	{r3, r4, r5, pc}
 80043f8:	2000074c 	.word	0x2000074c

080043fc <sbrk_aligned>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	4e0e      	ldr	r6, [pc, #56]	; (8004438 <sbrk_aligned+0x3c>)
 8004400:	460c      	mov	r4, r1
 8004402:	6831      	ldr	r1, [r6, #0]
 8004404:	4605      	mov	r5, r0
 8004406:	b911      	cbnz	r1, 800440e <sbrk_aligned+0x12>
 8004408:	f000 fbaa 	bl	8004b60 <_sbrk_r>
 800440c:	6030      	str	r0, [r6, #0]
 800440e:	4621      	mov	r1, r4
 8004410:	4628      	mov	r0, r5
 8004412:	f000 fba5 	bl	8004b60 <_sbrk_r>
 8004416:	1c43      	adds	r3, r0, #1
 8004418:	d00a      	beq.n	8004430 <sbrk_aligned+0x34>
 800441a:	1cc4      	adds	r4, r0, #3
 800441c:	f024 0403 	bic.w	r4, r4, #3
 8004420:	42a0      	cmp	r0, r4
 8004422:	d007      	beq.n	8004434 <sbrk_aligned+0x38>
 8004424:	1a21      	subs	r1, r4, r0
 8004426:	4628      	mov	r0, r5
 8004428:	f000 fb9a 	bl	8004b60 <_sbrk_r>
 800442c:	3001      	adds	r0, #1
 800442e:	d101      	bne.n	8004434 <sbrk_aligned+0x38>
 8004430:	f04f 34ff 	mov.w	r4, #4294967295
 8004434:	4620      	mov	r0, r4
 8004436:	bd70      	pop	{r4, r5, r6, pc}
 8004438:	20000750 	.word	0x20000750

0800443c <_malloc_r>:
 800443c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004440:	1ccd      	adds	r5, r1, #3
 8004442:	f025 0503 	bic.w	r5, r5, #3
 8004446:	3508      	adds	r5, #8
 8004448:	2d0c      	cmp	r5, #12
 800444a:	bf38      	it	cc
 800444c:	250c      	movcc	r5, #12
 800444e:	2d00      	cmp	r5, #0
 8004450:	4607      	mov	r7, r0
 8004452:	db01      	blt.n	8004458 <_malloc_r+0x1c>
 8004454:	42a9      	cmp	r1, r5
 8004456:	d905      	bls.n	8004464 <_malloc_r+0x28>
 8004458:	230c      	movs	r3, #12
 800445a:	2600      	movs	r6, #0
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	4630      	mov	r0, r6
 8004460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004464:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004538 <_malloc_r+0xfc>
 8004468:	f000 f868 	bl	800453c <__malloc_lock>
 800446c:	f8d8 3000 	ldr.w	r3, [r8]
 8004470:	461c      	mov	r4, r3
 8004472:	bb5c      	cbnz	r4, 80044cc <_malloc_r+0x90>
 8004474:	4629      	mov	r1, r5
 8004476:	4638      	mov	r0, r7
 8004478:	f7ff ffc0 	bl	80043fc <sbrk_aligned>
 800447c:	1c43      	adds	r3, r0, #1
 800447e:	4604      	mov	r4, r0
 8004480:	d155      	bne.n	800452e <_malloc_r+0xf2>
 8004482:	f8d8 4000 	ldr.w	r4, [r8]
 8004486:	4626      	mov	r6, r4
 8004488:	2e00      	cmp	r6, #0
 800448a:	d145      	bne.n	8004518 <_malloc_r+0xdc>
 800448c:	2c00      	cmp	r4, #0
 800448e:	d048      	beq.n	8004522 <_malloc_r+0xe6>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	4631      	mov	r1, r6
 8004494:	4638      	mov	r0, r7
 8004496:	eb04 0903 	add.w	r9, r4, r3
 800449a:	f000 fb61 	bl	8004b60 <_sbrk_r>
 800449e:	4581      	cmp	r9, r0
 80044a0:	d13f      	bne.n	8004522 <_malloc_r+0xe6>
 80044a2:	6821      	ldr	r1, [r4, #0]
 80044a4:	4638      	mov	r0, r7
 80044a6:	1a6d      	subs	r5, r5, r1
 80044a8:	4629      	mov	r1, r5
 80044aa:	f7ff ffa7 	bl	80043fc <sbrk_aligned>
 80044ae:	3001      	adds	r0, #1
 80044b0:	d037      	beq.n	8004522 <_malloc_r+0xe6>
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	442b      	add	r3, r5
 80044b6:	6023      	str	r3, [r4, #0]
 80044b8:	f8d8 3000 	ldr.w	r3, [r8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d038      	beq.n	8004532 <_malloc_r+0xf6>
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	42a2      	cmp	r2, r4
 80044c4:	d12b      	bne.n	800451e <_malloc_r+0xe2>
 80044c6:	2200      	movs	r2, #0
 80044c8:	605a      	str	r2, [r3, #4]
 80044ca:	e00f      	b.n	80044ec <_malloc_r+0xb0>
 80044cc:	6822      	ldr	r2, [r4, #0]
 80044ce:	1b52      	subs	r2, r2, r5
 80044d0:	d41f      	bmi.n	8004512 <_malloc_r+0xd6>
 80044d2:	2a0b      	cmp	r2, #11
 80044d4:	d917      	bls.n	8004506 <_malloc_r+0xca>
 80044d6:	1961      	adds	r1, r4, r5
 80044d8:	42a3      	cmp	r3, r4
 80044da:	6025      	str	r5, [r4, #0]
 80044dc:	bf18      	it	ne
 80044de:	6059      	strne	r1, [r3, #4]
 80044e0:	6863      	ldr	r3, [r4, #4]
 80044e2:	bf08      	it	eq
 80044e4:	f8c8 1000 	streq.w	r1, [r8]
 80044e8:	5162      	str	r2, [r4, r5]
 80044ea:	604b      	str	r3, [r1, #4]
 80044ec:	4638      	mov	r0, r7
 80044ee:	f104 060b 	add.w	r6, r4, #11
 80044f2:	f000 f829 	bl	8004548 <__malloc_unlock>
 80044f6:	f026 0607 	bic.w	r6, r6, #7
 80044fa:	1d23      	adds	r3, r4, #4
 80044fc:	1af2      	subs	r2, r6, r3
 80044fe:	d0ae      	beq.n	800445e <_malloc_r+0x22>
 8004500:	1b9b      	subs	r3, r3, r6
 8004502:	50a3      	str	r3, [r4, r2]
 8004504:	e7ab      	b.n	800445e <_malloc_r+0x22>
 8004506:	42a3      	cmp	r3, r4
 8004508:	6862      	ldr	r2, [r4, #4]
 800450a:	d1dd      	bne.n	80044c8 <_malloc_r+0x8c>
 800450c:	f8c8 2000 	str.w	r2, [r8]
 8004510:	e7ec      	b.n	80044ec <_malloc_r+0xb0>
 8004512:	4623      	mov	r3, r4
 8004514:	6864      	ldr	r4, [r4, #4]
 8004516:	e7ac      	b.n	8004472 <_malloc_r+0x36>
 8004518:	4634      	mov	r4, r6
 800451a:	6876      	ldr	r6, [r6, #4]
 800451c:	e7b4      	b.n	8004488 <_malloc_r+0x4c>
 800451e:	4613      	mov	r3, r2
 8004520:	e7cc      	b.n	80044bc <_malloc_r+0x80>
 8004522:	230c      	movs	r3, #12
 8004524:	4638      	mov	r0, r7
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	f000 f80e 	bl	8004548 <__malloc_unlock>
 800452c:	e797      	b.n	800445e <_malloc_r+0x22>
 800452e:	6025      	str	r5, [r4, #0]
 8004530:	e7dc      	b.n	80044ec <_malloc_r+0xb0>
 8004532:	605b      	str	r3, [r3, #4]
 8004534:	deff      	udf	#255	; 0xff
 8004536:	bf00      	nop
 8004538:	2000074c 	.word	0x2000074c

0800453c <__malloc_lock>:
 800453c:	4801      	ldr	r0, [pc, #4]	; (8004544 <__malloc_lock+0x8>)
 800453e:	f7ff bf13 	b.w	8004368 <__retarget_lock_acquire_recursive>
 8004542:	bf00      	nop
 8004544:	20000748 	.word	0x20000748

08004548 <__malloc_unlock>:
 8004548:	4801      	ldr	r0, [pc, #4]	; (8004550 <__malloc_unlock+0x8>)
 800454a:	f7ff bf0e 	b.w	800436a <__retarget_lock_release_recursive>
 800454e:	bf00      	nop
 8004550:	20000748 	.word	0x20000748

08004554 <__ssputs_r>:
 8004554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004558:	461f      	mov	r7, r3
 800455a:	688e      	ldr	r6, [r1, #8]
 800455c:	4682      	mov	sl, r0
 800455e:	42be      	cmp	r6, r7
 8004560:	460c      	mov	r4, r1
 8004562:	4690      	mov	r8, r2
 8004564:	680b      	ldr	r3, [r1, #0]
 8004566:	d82c      	bhi.n	80045c2 <__ssputs_r+0x6e>
 8004568:	898a      	ldrh	r2, [r1, #12]
 800456a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800456e:	d026      	beq.n	80045be <__ssputs_r+0x6a>
 8004570:	6965      	ldr	r5, [r4, #20]
 8004572:	6909      	ldr	r1, [r1, #16]
 8004574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004578:	eba3 0901 	sub.w	r9, r3, r1
 800457c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004580:	1c7b      	adds	r3, r7, #1
 8004582:	444b      	add	r3, r9
 8004584:	106d      	asrs	r5, r5, #1
 8004586:	429d      	cmp	r5, r3
 8004588:	bf38      	it	cc
 800458a:	461d      	movcc	r5, r3
 800458c:	0553      	lsls	r3, r2, #21
 800458e:	d527      	bpl.n	80045e0 <__ssputs_r+0x8c>
 8004590:	4629      	mov	r1, r5
 8004592:	f7ff ff53 	bl	800443c <_malloc_r>
 8004596:	4606      	mov	r6, r0
 8004598:	b360      	cbz	r0, 80045f4 <__ssputs_r+0xa0>
 800459a:	464a      	mov	r2, r9
 800459c:	6921      	ldr	r1, [r4, #16]
 800459e:	f000 fafd 	bl	8004b9c <memcpy>
 80045a2:	89a3      	ldrh	r3, [r4, #12]
 80045a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ac:	81a3      	strh	r3, [r4, #12]
 80045ae:	6126      	str	r6, [r4, #16]
 80045b0:	444e      	add	r6, r9
 80045b2:	6026      	str	r6, [r4, #0]
 80045b4:	463e      	mov	r6, r7
 80045b6:	6165      	str	r5, [r4, #20]
 80045b8:	eba5 0509 	sub.w	r5, r5, r9
 80045bc:	60a5      	str	r5, [r4, #8]
 80045be:	42be      	cmp	r6, r7
 80045c0:	d900      	bls.n	80045c4 <__ssputs_r+0x70>
 80045c2:	463e      	mov	r6, r7
 80045c4:	4632      	mov	r2, r6
 80045c6:	4641      	mov	r1, r8
 80045c8:	6820      	ldr	r0, [r4, #0]
 80045ca:	f000 faaf 	bl	8004b2c <memmove>
 80045ce:	2000      	movs	r0, #0
 80045d0:	68a3      	ldr	r3, [r4, #8]
 80045d2:	1b9b      	subs	r3, r3, r6
 80045d4:	60a3      	str	r3, [r4, #8]
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	4433      	add	r3, r6
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e0:	462a      	mov	r2, r5
 80045e2:	f000 fae9 	bl	8004bb8 <_realloc_r>
 80045e6:	4606      	mov	r6, r0
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d1e0      	bne.n	80045ae <__ssputs_r+0x5a>
 80045ec:	4650      	mov	r0, sl
 80045ee:	6921      	ldr	r1, [r4, #16]
 80045f0:	f7ff febc 	bl	800436c <_free_r>
 80045f4:	230c      	movs	r3, #12
 80045f6:	f8ca 3000 	str.w	r3, [sl]
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004604:	81a3      	strh	r3, [r4, #12]
 8004606:	e7e9      	b.n	80045dc <__ssputs_r+0x88>

08004608 <_svfiprintf_r>:
 8004608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460c:	4698      	mov	r8, r3
 800460e:	898b      	ldrh	r3, [r1, #12]
 8004610:	4607      	mov	r7, r0
 8004612:	061b      	lsls	r3, r3, #24
 8004614:	460d      	mov	r5, r1
 8004616:	4614      	mov	r4, r2
 8004618:	b09d      	sub	sp, #116	; 0x74
 800461a:	d50e      	bpl.n	800463a <_svfiprintf_r+0x32>
 800461c:	690b      	ldr	r3, [r1, #16]
 800461e:	b963      	cbnz	r3, 800463a <_svfiprintf_r+0x32>
 8004620:	2140      	movs	r1, #64	; 0x40
 8004622:	f7ff ff0b 	bl	800443c <_malloc_r>
 8004626:	6028      	str	r0, [r5, #0]
 8004628:	6128      	str	r0, [r5, #16]
 800462a:	b920      	cbnz	r0, 8004636 <_svfiprintf_r+0x2e>
 800462c:	230c      	movs	r3, #12
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	f04f 30ff 	mov.w	r0, #4294967295
 8004634:	e0d0      	b.n	80047d8 <_svfiprintf_r+0x1d0>
 8004636:	2340      	movs	r3, #64	; 0x40
 8004638:	616b      	str	r3, [r5, #20]
 800463a:	2300      	movs	r3, #0
 800463c:	9309      	str	r3, [sp, #36]	; 0x24
 800463e:	2320      	movs	r3, #32
 8004640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004644:	2330      	movs	r3, #48	; 0x30
 8004646:	f04f 0901 	mov.w	r9, #1
 800464a:	f8cd 800c 	str.w	r8, [sp, #12]
 800464e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80047f0 <_svfiprintf_r+0x1e8>
 8004652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004656:	4623      	mov	r3, r4
 8004658:	469a      	mov	sl, r3
 800465a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800465e:	b10a      	cbz	r2, 8004664 <_svfiprintf_r+0x5c>
 8004660:	2a25      	cmp	r2, #37	; 0x25
 8004662:	d1f9      	bne.n	8004658 <_svfiprintf_r+0x50>
 8004664:	ebba 0b04 	subs.w	fp, sl, r4
 8004668:	d00b      	beq.n	8004682 <_svfiprintf_r+0x7a>
 800466a:	465b      	mov	r3, fp
 800466c:	4622      	mov	r2, r4
 800466e:	4629      	mov	r1, r5
 8004670:	4638      	mov	r0, r7
 8004672:	f7ff ff6f 	bl	8004554 <__ssputs_r>
 8004676:	3001      	adds	r0, #1
 8004678:	f000 80a9 	beq.w	80047ce <_svfiprintf_r+0x1c6>
 800467c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800467e:	445a      	add	r2, fp
 8004680:	9209      	str	r2, [sp, #36]	; 0x24
 8004682:	f89a 3000 	ldrb.w	r3, [sl]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80a1 	beq.w	80047ce <_svfiprintf_r+0x1c6>
 800468c:	2300      	movs	r3, #0
 800468e:	f04f 32ff 	mov.w	r2, #4294967295
 8004692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004696:	f10a 0a01 	add.w	sl, sl, #1
 800469a:	9304      	str	r3, [sp, #16]
 800469c:	9307      	str	r3, [sp, #28]
 800469e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046a2:	931a      	str	r3, [sp, #104]	; 0x68
 80046a4:	4654      	mov	r4, sl
 80046a6:	2205      	movs	r2, #5
 80046a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ac:	4850      	ldr	r0, [pc, #320]	; (80047f0 <_svfiprintf_r+0x1e8>)
 80046ae:	f000 fa67 	bl	8004b80 <memchr>
 80046b2:	9a04      	ldr	r2, [sp, #16]
 80046b4:	b9d8      	cbnz	r0, 80046ee <_svfiprintf_r+0xe6>
 80046b6:	06d0      	lsls	r0, r2, #27
 80046b8:	bf44      	itt	mi
 80046ba:	2320      	movmi	r3, #32
 80046bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046c0:	0711      	lsls	r1, r2, #28
 80046c2:	bf44      	itt	mi
 80046c4:	232b      	movmi	r3, #43	; 0x2b
 80046c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ca:	f89a 3000 	ldrb.w	r3, [sl]
 80046ce:	2b2a      	cmp	r3, #42	; 0x2a
 80046d0:	d015      	beq.n	80046fe <_svfiprintf_r+0xf6>
 80046d2:	4654      	mov	r4, sl
 80046d4:	2000      	movs	r0, #0
 80046d6:	f04f 0c0a 	mov.w	ip, #10
 80046da:	9a07      	ldr	r2, [sp, #28]
 80046dc:	4621      	mov	r1, r4
 80046de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046e2:	3b30      	subs	r3, #48	; 0x30
 80046e4:	2b09      	cmp	r3, #9
 80046e6:	d94d      	bls.n	8004784 <_svfiprintf_r+0x17c>
 80046e8:	b1b0      	cbz	r0, 8004718 <_svfiprintf_r+0x110>
 80046ea:	9207      	str	r2, [sp, #28]
 80046ec:	e014      	b.n	8004718 <_svfiprintf_r+0x110>
 80046ee:	eba0 0308 	sub.w	r3, r0, r8
 80046f2:	fa09 f303 	lsl.w	r3, r9, r3
 80046f6:	4313      	orrs	r3, r2
 80046f8:	46a2      	mov	sl, r4
 80046fa:	9304      	str	r3, [sp, #16]
 80046fc:	e7d2      	b.n	80046a4 <_svfiprintf_r+0x9c>
 80046fe:	9b03      	ldr	r3, [sp, #12]
 8004700:	1d19      	adds	r1, r3, #4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	9103      	str	r1, [sp, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	bfbb      	ittet	lt
 800470a:	425b      	neglt	r3, r3
 800470c:	f042 0202 	orrlt.w	r2, r2, #2
 8004710:	9307      	strge	r3, [sp, #28]
 8004712:	9307      	strlt	r3, [sp, #28]
 8004714:	bfb8      	it	lt
 8004716:	9204      	strlt	r2, [sp, #16]
 8004718:	7823      	ldrb	r3, [r4, #0]
 800471a:	2b2e      	cmp	r3, #46	; 0x2e
 800471c:	d10c      	bne.n	8004738 <_svfiprintf_r+0x130>
 800471e:	7863      	ldrb	r3, [r4, #1]
 8004720:	2b2a      	cmp	r3, #42	; 0x2a
 8004722:	d134      	bne.n	800478e <_svfiprintf_r+0x186>
 8004724:	9b03      	ldr	r3, [sp, #12]
 8004726:	3402      	adds	r4, #2
 8004728:	1d1a      	adds	r2, r3, #4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	9203      	str	r2, [sp, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	bfb8      	it	lt
 8004732:	f04f 33ff 	movlt.w	r3, #4294967295
 8004736:	9305      	str	r3, [sp, #20]
 8004738:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80047f4 <_svfiprintf_r+0x1ec>
 800473c:	2203      	movs	r2, #3
 800473e:	4650      	mov	r0, sl
 8004740:	7821      	ldrb	r1, [r4, #0]
 8004742:	f000 fa1d 	bl	8004b80 <memchr>
 8004746:	b138      	cbz	r0, 8004758 <_svfiprintf_r+0x150>
 8004748:	2240      	movs	r2, #64	; 0x40
 800474a:	9b04      	ldr	r3, [sp, #16]
 800474c:	eba0 000a 	sub.w	r0, r0, sl
 8004750:	4082      	lsls	r2, r0
 8004752:	4313      	orrs	r3, r2
 8004754:	3401      	adds	r4, #1
 8004756:	9304      	str	r3, [sp, #16]
 8004758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800475c:	2206      	movs	r2, #6
 800475e:	4826      	ldr	r0, [pc, #152]	; (80047f8 <_svfiprintf_r+0x1f0>)
 8004760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004764:	f000 fa0c 	bl	8004b80 <memchr>
 8004768:	2800      	cmp	r0, #0
 800476a:	d038      	beq.n	80047de <_svfiprintf_r+0x1d6>
 800476c:	4b23      	ldr	r3, [pc, #140]	; (80047fc <_svfiprintf_r+0x1f4>)
 800476e:	bb1b      	cbnz	r3, 80047b8 <_svfiprintf_r+0x1b0>
 8004770:	9b03      	ldr	r3, [sp, #12]
 8004772:	3307      	adds	r3, #7
 8004774:	f023 0307 	bic.w	r3, r3, #7
 8004778:	3308      	adds	r3, #8
 800477a:	9303      	str	r3, [sp, #12]
 800477c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800477e:	4433      	add	r3, r6
 8004780:	9309      	str	r3, [sp, #36]	; 0x24
 8004782:	e768      	b.n	8004656 <_svfiprintf_r+0x4e>
 8004784:	460c      	mov	r4, r1
 8004786:	2001      	movs	r0, #1
 8004788:	fb0c 3202 	mla	r2, ip, r2, r3
 800478c:	e7a6      	b.n	80046dc <_svfiprintf_r+0xd4>
 800478e:	2300      	movs	r3, #0
 8004790:	f04f 0c0a 	mov.w	ip, #10
 8004794:	4619      	mov	r1, r3
 8004796:	3401      	adds	r4, #1
 8004798:	9305      	str	r3, [sp, #20]
 800479a:	4620      	mov	r0, r4
 800479c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047a0:	3a30      	subs	r2, #48	; 0x30
 80047a2:	2a09      	cmp	r2, #9
 80047a4:	d903      	bls.n	80047ae <_svfiprintf_r+0x1a6>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0c6      	beq.n	8004738 <_svfiprintf_r+0x130>
 80047aa:	9105      	str	r1, [sp, #20]
 80047ac:	e7c4      	b.n	8004738 <_svfiprintf_r+0x130>
 80047ae:	4604      	mov	r4, r0
 80047b0:	2301      	movs	r3, #1
 80047b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80047b6:	e7f0      	b.n	800479a <_svfiprintf_r+0x192>
 80047b8:	ab03      	add	r3, sp, #12
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	462a      	mov	r2, r5
 80047be:	4638      	mov	r0, r7
 80047c0:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <_svfiprintf_r+0x1f8>)
 80047c2:	a904      	add	r1, sp, #16
 80047c4:	f3af 8000 	nop.w
 80047c8:	1c42      	adds	r2, r0, #1
 80047ca:	4606      	mov	r6, r0
 80047cc:	d1d6      	bne.n	800477c <_svfiprintf_r+0x174>
 80047ce:	89ab      	ldrh	r3, [r5, #12]
 80047d0:	065b      	lsls	r3, r3, #25
 80047d2:	f53f af2d 	bmi.w	8004630 <_svfiprintf_r+0x28>
 80047d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047d8:	b01d      	add	sp, #116	; 0x74
 80047da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047de:	ab03      	add	r3, sp, #12
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	462a      	mov	r2, r5
 80047e4:	4638      	mov	r0, r7
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <_svfiprintf_r+0x1f8>)
 80047e8:	a904      	add	r1, sp, #16
 80047ea:	f000 f87d 	bl	80048e8 <_printf_i>
 80047ee:	e7eb      	b.n	80047c8 <_svfiprintf_r+0x1c0>
 80047f0:	08004d70 	.word	0x08004d70
 80047f4:	08004d76 	.word	0x08004d76
 80047f8:	08004d7a 	.word	0x08004d7a
 80047fc:	00000000 	.word	0x00000000
 8004800:	08004555 	.word	0x08004555

08004804 <_printf_common>:
 8004804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004808:	4616      	mov	r6, r2
 800480a:	4699      	mov	r9, r3
 800480c:	688a      	ldr	r2, [r1, #8]
 800480e:	690b      	ldr	r3, [r1, #16]
 8004810:	4607      	mov	r7, r0
 8004812:	4293      	cmp	r3, r2
 8004814:	bfb8      	it	lt
 8004816:	4613      	movlt	r3, r2
 8004818:	6033      	str	r3, [r6, #0]
 800481a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800481e:	460c      	mov	r4, r1
 8004820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004824:	b10a      	cbz	r2, 800482a <_printf_common+0x26>
 8004826:	3301      	adds	r3, #1
 8004828:	6033      	str	r3, [r6, #0]
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	0699      	lsls	r1, r3, #26
 800482e:	bf42      	ittt	mi
 8004830:	6833      	ldrmi	r3, [r6, #0]
 8004832:	3302      	addmi	r3, #2
 8004834:	6033      	strmi	r3, [r6, #0]
 8004836:	6825      	ldr	r5, [r4, #0]
 8004838:	f015 0506 	ands.w	r5, r5, #6
 800483c:	d106      	bne.n	800484c <_printf_common+0x48>
 800483e:	f104 0a19 	add.w	sl, r4, #25
 8004842:	68e3      	ldr	r3, [r4, #12]
 8004844:	6832      	ldr	r2, [r6, #0]
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	42ab      	cmp	r3, r5
 800484a:	dc2b      	bgt.n	80048a4 <_printf_common+0xa0>
 800484c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004850:	1e13      	subs	r3, r2, #0
 8004852:	6822      	ldr	r2, [r4, #0]
 8004854:	bf18      	it	ne
 8004856:	2301      	movne	r3, #1
 8004858:	0692      	lsls	r2, r2, #26
 800485a:	d430      	bmi.n	80048be <_printf_common+0xba>
 800485c:	4649      	mov	r1, r9
 800485e:	4638      	mov	r0, r7
 8004860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004864:	47c0      	blx	r8
 8004866:	3001      	adds	r0, #1
 8004868:	d023      	beq.n	80048b2 <_printf_common+0xae>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	6922      	ldr	r2, [r4, #16]
 800486e:	f003 0306 	and.w	r3, r3, #6
 8004872:	2b04      	cmp	r3, #4
 8004874:	bf14      	ite	ne
 8004876:	2500      	movne	r5, #0
 8004878:	6833      	ldreq	r3, [r6, #0]
 800487a:	f04f 0600 	mov.w	r6, #0
 800487e:	bf08      	it	eq
 8004880:	68e5      	ldreq	r5, [r4, #12]
 8004882:	f104 041a 	add.w	r4, r4, #26
 8004886:	bf08      	it	eq
 8004888:	1aed      	subeq	r5, r5, r3
 800488a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800488e:	bf08      	it	eq
 8004890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004894:	4293      	cmp	r3, r2
 8004896:	bfc4      	itt	gt
 8004898:	1a9b      	subgt	r3, r3, r2
 800489a:	18ed      	addgt	r5, r5, r3
 800489c:	42b5      	cmp	r5, r6
 800489e:	d11a      	bne.n	80048d6 <_printf_common+0xd2>
 80048a0:	2000      	movs	r0, #0
 80048a2:	e008      	b.n	80048b6 <_printf_common+0xb2>
 80048a4:	2301      	movs	r3, #1
 80048a6:	4652      	mov	r2, sl
 80048a8:	4649      	mov	r1, r9
 80048aa:	4638      	mov	r0, r7
 80048ac:	47c0      	blx	r8
 80048ae:	3001      	adds	r0, #1
 80048b0:	d103      	bne.n	80048ba <_printf_common+0xb6>
 80048b2:	f04f 30ff 	mov.w	r0, #4294967295
 80048b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ba:	3501      	adds	r5, #1
 80048bc:	e7c1      	b.n	8004842 <_printf_common+0x3e>
 80048be:	2030      	movs	r0, #48	; 0x30
 80048c0:	18e1      	adds	r1, r4, r3
 80048c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048cc:	4422      	add	r2, r4
 80048ce:	3302      	adds	r3, #2
 80048d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048d4:	e7c2      	b.n	800485c <_printf_common+0x58>
 80048d6:	2301      	movs	r3, #1
 80048d8:	4622      	mov	r2, r4
 80048da:	4649      	mov	r1, r9
 80048dc:	4638      	mov	r0, r7
 80048de:	47c0      	blx	r8
 80048e0:	3001      	adds	r0, #1
 80048e2:	d0e6      	beq.n	80048b2 <_printf_common+0xae>
 80048e4:	3601      	adds	r6, #1
 80048e6:	e7d9      	b.n	800489c <_printf_common+0x98>

080048e8 <_printf_i>:
 80048e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048ec:	7e0f      	ldrb	r7, [r1, #24]
 80048ee:	4691      	mov	r9, r2
 80048f0:	2f78      	cmp	r7, #120	; 0x78
 80048f2:	4680      	mov	r8, r0
 80048f4:	460c      	mov	r4, r1
 80048f6:	469a      	mov	sl, r3
 80048f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048fe:	d807      	bhi.n	8004910 <_printf_i+0x28>
 8004900:	2f62      	cmp	r7, #98	; 0x62
 8004902:	d80a      	bhi.n	800491a <_printf_i+0x32>
 8004904:	2f00      	cmp	r7, #0
 8004906:	f000 80d5 	beq.w	8004ab4 <_printf_i+0x1cc>
 800490a:	2f58      	cmp	r7, #88	; 0x58
 800490c:	f000 80c1 	beq.w	8004a92 <_printf_i+0x1aa>
 8004910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004918:	e03a      	b.n	8004990 <_printf_i+0xa8>
 800491a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800491e:	2b15      	cmp	r3, #21
 8004920:	d8f6      	bhi.n	8004910 <_printf_i+0x28>
 8004922:	a101      	add	r1, pc, #4	; (adr r1, 8004928 <_printf_i+0x40>)
 8004924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004928:	08004981 	.word	0x08004981
 800492c:	08004995 	.word	0x08004995
 8004930:	08004911 	.word	0x08004911
 8004934:	08004911 	.word	0x08004911
 8004938:	08004911 	.word	0x08004911
 800493c:	08004911 	.word	0x08004911
 8004940:	08004995 	.word	0x08004995
 8004944:	08004911 	.word	0x08004911
 8004948:	08004911 	.word	0x08004911
 800494c:	08004911 	.word	0x08004911
 8004950:	08004911 	.word	0x08004911
 8004954:	08004a9b 	.word	0x08004a9b
 8004958:	080049c1 	.word	0x080049c1
 800495c:	08004a55 	.word	0x08004a55
 8004960:	08004911 	.word	0x08004911
 8004964:	08004911 	.word	0x08004911
 8004968:	08004abd 	.word	0x08004abd
 800496c:	08004911 	.word	0x08004911
 8004970:	080049c1 	.word	0x080049c1
 8004974:	08004911 	.word	0x08004911
 8004978:	08004911 	.word	0x08004911
 800497c:	08004a5d 	.word	0x08004a5d
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	602a      	str	r2, [r5, #0]
 8004988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800498c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004990:	2301      	movs	r3, #1
 8004992:	e0a0      	b.n	8004ad6 <_printf_i+0x1ee>
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	682b      	ldr	r3, [r5, #0]
 8004998:	0607      	lsls	r7, r0, #24
 800499a:	f103 0104 	add.w	r1, r3, #4
 800499e:	6029      	str	r1, [r5, #0]
 80049a0:	d501      	bpl.n	80049a6 <_printf_i+0xbe>
 80049a2:	681e      	ldr	r6, [r3, #0]
 80049a4:	e003      	b.n	80049ae <_printf_i+0xc6>
 80049a6:	0646      	lsls	r6, r0, #25
 80049a8:	d5fb      	bpl.n	80049a2 <_printf_i+0xba>
 80049aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049ae:	2e00      	cmp	r6, #0
 80049b0:	da03      	bge.n	80049ba <_printf_i+0xd2>
 80049b2:	232d      	movs	r3, #45	; 0x2d
 80049b4:	4276      	negs	r6, r6
 80049b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ba:	230a      	movs	r3, #10
 80049bc:	4859      	ldr	r0, [pc, #356]	; (8004b24 <_printf_i+0x23c>)
 80049be:	e012      	b.n	80049e6 <_printf_i+0xfe>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	6820      	ldr	r0, [r4, #0]
 80049c4:	1d19      	adds	r1, r3, #4
 80049c6:	6029      	str	r1, [r5, #0]
 80049c8:	0605      	lsls	r5, r0, #24
 80049ca:	d501      	bpl.n	80049d0 <_printf_i+0xe8>
 80049cc:	681e      	ldr	r6, [r3, #0]
 80049ce:	e002      	b.n	80049d6 <_printf_i+0xee>
 80049d0:	0641      	lsls	r1, r0, #25
 80049d2:	d5fb      	bpl.n	80049cc <_printf_i+0xe4>
 80049d4:	881e      	ldrh	r6, [r3, #0]
 80049d6:	2f6f      	cmp	r7, #111	; 0x6f
 80049d8:	bf0c      	ite	eq
 80049da:	2308      	moveq	r3, #8
 80049dc:	230a      	movne	r3, #10
 80049de:	4851      	ldr	r0, [pc, #324]	; (8004b24 <_printf_i+0x23c>)
 80049e0:	2100      	movs	r1, #0
 80049e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049e6:	6865      	ldr	r5, [r4, #4]
 80049e8:	2d00      	cmp	r5, #0
 80049ea:	bfa8      	it	ge
 80049ec:	6821      	ldrge	r1, [r4, #0]
 80049ee:	60a5      	str	r5, [r4, #8]
 80049f0:	bfa4      	itt	ge
 80049f2:	f021 0104 	bicge.w	r1, r1, #4
 80049f6:	6021      	strge	r1, [r4, #0]
 80049f8:	b90e      	cbnz	r6, 80049fe <_printf_i+0x116>
 80049fa:	2d00      	cmp	r5, #0
 80049fc:	d04b      	beq.n	8004a96 <_printf_i+0x1ae>
 80049fe:	4615      	mov	r5, r2
 8004a00:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a04:	fb03 6711 	mls	r7, r3, r1, r6
 8004a08:	5dc7      	ldrb	r7, [r0, r7]
 8004a0a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a0e:	4637      	mov	r7, r6
 8004a10:	42bb      	cmp	r3, r7
 8004a12:	460e      	mov	r6, r1
 8004a14:	d9f4      	bls.n	8004a00 <_printf_i+0x118>
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d10b      	bne.n	8004a32 <_printf_i+0x14a>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	07de      	lsls	r6, r3, #31
 8004a1e:	d508      	bpl.n	8004a32 <_printf_i+0x14a>
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	6861      	ldr	r1, [r4, #4]
 8004a24:	4299      	cmp	r1, r3
 8004a26:	bfde      	ittt	le
 8004a28:	2330      	movle	r3, #48	; 0x30
 8004a2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a32:	1b52      	subs	r2, r2, r5
 8004a34:	6122      	str	r2, [r4, #16]
 8004a36:	464b      	mov	r3, r9
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f8cd a000 	str.w	sl, [sp]
 8004a40:	aa03      	add	r2, sp, #12
 8004a42:	f7ff fedf 	bl	8004804 <_printf_common>
 8004a46:	3001      	adds	r0, #1
 8004a48:	d14a      	bne.n	8004ae0 <_printf_i+0x1f8>
 8004a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4e:	b004      	add	sp, #16
 8004a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	f043 0320 	orr.w	r3, r3, #32
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	2778      	movs	r7, #120	; 0x78
 8004a5e:	4832      	ldr	r0, [pc, #200]	; (8004b28 <_printf_i+0x240>)
 8004a60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	6829      	ldr	r1, [r5, #0]
 8004a68:	061f      	lsls	r7, r3, #24
 8004a6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a6e:	d402      	bmi.n	8004a76 <_printf_i+0x18e>
 8004a70:	065f      	lsls	r7, r3, #25
 8004a72:	bf48      	it	mi
 8004a74:	b2b6      	uxthmi	r6, r6
 8004a76:	07df      	lsls	r7, r3, #31
 8004a78:	bf48      	it	mi
 8004a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a7e:	6029      	str	r1, [r5, #0]
 8004a80:	bf48      	it	mi
 8004a82:	6023      	strmi	r3, [r4, #0]
 8004a84:	b91e      	cbnz	r6, 8004a8e <_printf_i+0x1a6>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	f023 0320 	bic.w	r3, r3, #32
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	2310      	movs	r3, #16
 8004a90:	e7a6      	b.n	80049e0 <_printf_i+0xf8>
 8004a92:	4824      	ldr	r0, [pc, #144]	; (8004b24 <_printf_i+0x23c>)
 8004a94:	e7e4      	b.n	8004a60 <_printf_i+0x178>
 8004a96:	4615      	mov	r5, r2
 8004a98:	e7bd      	b.n	8004a16 <_printf_i+0x12e>
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	6826      	ldr	r6, [r4, #0]
 8004a9e:	1d18      	adds	r0, r3, #4
 8004aa0:	6961      	ldr	r1, [r4, #20]
 8004aa2:	6028      	str	r0, [r5, #0]
 8004aa4:	0635      	lsls	r5, r6, #24
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	d501      	bpl.n	8004aae <_printf_i+0x1c6>
 8004aaa:	6019      	str	r1, [r3, #0]
 8004aac:	e002      	b.n	8004ab4 <_printf_i+0x1cc>
 8004aae:	0670      	lsls	r0, r6, #25
 8004ab0:	d5fb      	bpl.n	8004aaa <_printf_i+0x1c2>
 8004ab2:	8019      	strh	r1, [r3, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	4615      	mov	r5, r2
 8004ab8:	6123      	str	r3, [r4, #16]
 8004aba:	e7bc      	b.n	8004a36 <_printf_i+0x14e>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	2100      	movs	r1, #0
 8004ac0:	1d1a      	adds	r2, r3, #4
 8004ac2:	602a      	str	r2, [r5, #0]
 8004ac4:	681d      	ldr	r5, [r3, #0]
 8004ac6:	6862      	ldr	r2, [r4, #4]
 8004ac8:	4628      	mov	r0, r5
 8004aca:	f000 f859 	bl	8004b80 <memchr>
 8004ace:	b108      	cbz	r0, 8004ad4 <_printf_i+0x1ec>
 8004ad0:	1b40      	subs	r0, r0, r5
 8004ad2:	6060      	str	r0, [r4, #4]
 8004ad4:	6863      	ldr	r3, [r4, #4]
 8004ad6:	6123      	str	r3, [r4, #16]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ade:	e7aa      	b.n	8004a36 <_printf_i+0x14e>
 8004ae0:	462a      	mov	r2, r5
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	6923      	ldr	r3, [r4, #16]
 8004ae8:	47d0      	blx	sl
 8004aea:	3001      	adds	r0, #1
 8004aec:	d0ad      	beq.n	8004a4a <_printf_i+0x162>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	079b      	lsls	r3, r3, #30
 8004af2:	d413      	bmi.n	8004b1c <_printf_i+0x234>
 8004af4:	68e0      	ldr	r0, [r4, #12]
 8004af6:	9b03      	ldr	r3, [sp, #12]
 8004af8:	4298      	cmp	r0, r3
 8004afa:	bfb8      	it	lt
 8004afc:	4618      	movlt	r0, r3
 8004afe:	e7a6      	b.n	8004a4e <_printf_i+0x166>
 8004b00:	2301      	movs	r3, #1
 8004b02:	4632      	mov	r2, r6
 8004b04:	4649      	mov	r1, r9
 8004b06:	4640      	mov	r0, r8
 8004b08:	47d0      	blx	sl
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d09d      	beq.n	8004a4a <_printf_i+0x162>
 8004b0e:	3501      	adds	r5, #1
 8004b10:	68e3      	ldr	r3, [r4, #12]
 8004b12:	9903      	ldr	r1, [sp, #12]
 8004b14:	1a5b      	subs	r3, r3, r1
 8004b16:	42ab      	cmp	r3, r5
 8004b18:	dcf2      	bgt.n	8004b00 <_printf_i+0x218>
 8004b1a:	e7eb      	b.n	8004af4 <_printf_i+0x20c>
 8004b1c:	2500      	movs	r5, #0
 8004b1e:	f104 0619 	add.w	r6, r4, #25
 8004b22:	e7f5      	b.n	8004b10 <_printf_i+0x228>
 8004b24:	08004d81 	.word	0x08004d81
 8004b28:	08004d92 	.word	0x08004d92

08004b2c <memmove>:
 8004b2c:	4288      	cmp	r0, r1
 8004b2e:	b510      	push	{r4, lr}
 8004b30:	eb01 0402 	add.w	r4, r1, r2
 8004b34:	d902      	bls.n	8004b3c <memmove+0x10>
 8004b36:	4284      	cmp	r4, r0
 8004b38:	4623      	mov	r3, r4
 8004b3a:	d807      	bhi.n	8004b4c <memmove+0x20>
 8004b3c:	1e43      	subs	r3, r0, #1
 8004b3e:	42a1      	cmp	r1, r4
 8004b40:	d008      	beq.n	8004b54 <memmove+0x28>
 8004b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b4a:	e7f8      	b.n	8004b3e <memmove+0x12>
 8004b4c:	4601      	mov	r1, r0
 8004b4e:	4402      	add	r2, r0
 8004b50:	428a      	cmp	r2, r1
 8004b52:	d100      	bne.n	8004b56 <memmove+0x2a>
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b5e:	e7f7      	b.n	8004b50 <memmove+0x24>

08004b60 <_sbrk_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	2300      	movs	r3, #0
 8004b64:	4d05      	ldr	r5, [pc, #20]	; (8004b7c <_sbrk_r+0x1c>)
 8004b66:	4604      	mov	r4, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	602b      	str	r3, [r5, #0]
 8004b6c:	f7fc fe24 	bl	80017b8 <_sbrk>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d102      	bne.n	8004b7a <_sbrk_r+0x1a>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	b103      	cbz	r3, 8004b7a <_sbrk_r+0x1a>
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	bd38      	pop	{r3, r4, r5, pc}
 8004b7c:	20000744 	.word	0x20000744

08004b80 <memchr>:
 8004b80:	4603      	mov	r3, r0
 8004b82:	b510      	push	{r4, lr}
 8004b84:	b2c9      	uxtb	r1, r1
 8004b86:	4402      	add	r2, r0
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	d101      	bne.n	8004b92 <memchr+0x12>
 8004b8e:	2000      	movs	r0, #0
 8004b90:	e003      	b.n	8004b9a <memchr+0x1a>
 8004b92:	7804      	ldrb	r4, [r0, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	428c      	cmp	r4, r1
 8004b98:	d1f6      	bne.n	8004b88 <memchr+0x8>
 8004b9a:	bd10      	pop	{r4, pc}

08004b9c <memcpy>:
 8004b9c:	440a      	add	r2, r1
 8004b9e:	4291      	cmp	r1, r2
 8004ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ba4:	d100      	bne.n	8004ba8 <memcpy+0xc>
 8004ba6:	4770      	bx	lr
 8004ba8:	b510      	push	{r4, lr}
 8004baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bae:	4291      	cmp	r1, r2
 8004bb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bb4:	d1f9      	bne.n	8004baa <memcpy+0xe>
 8004bb6:	bd10      	pop	{r4, pc}

08004bb8 <_realloc_r>:
 8004bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bbc:	4680      	mov	r8, r0
 8004bbe:	4614      	mov	r4, r2
 8004bc0:	460e      	mov	r6, r1
 8004bc2:	b921      	cbnz	r1, 8004bce <_realloc_r+0x16>
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bca:	f7ff bc37 	b.w	800443c <_malloc_r>
 8004bce:	b92a      	cbnz	r2, 8004bdc <_realloc_r+0x24>
 8004bd0:	f7ff fbcc 	bl	800436c <_free_r>
 8004bd4:	4625      	mov	r5, r4
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bdc:	f000 f81b 	bl	8004c16 <_malloc_usable_size_r>
 8004be0:	4284      	cmp	r4, r0
 8004be2:	4607      	mov	r7, r0
 8004be4:	d802      	bhi.n	8004bec <_realloc_r+0x34>
 8004be6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bea:	d812      	bhi.n	8004c12 <_realloc_r+0x5a>
 8004bec:	4621      	mov	r1, r4
 8004bee:	4640      	mov	r0, r8
 8004bf0:	f7ff fc24 	bl	800443c <_malloc_r>
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d0ed      	beq.n	8004bd6 <_realloc_r+0x1e>
 8004bfa:	42bc      	cmp	r4, r7
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	4631      	mov	r1, r6
 8004c00:	bf28      	it	cs
 8004c02:	463a      	movcs	r2, r7
 8004c04:	f7ff ffca 	bl	8004b9c <memcpy>
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	f7ff fbae 	bl	800436c <_free_r>
 8004c10:	e7e1      	b.n	8004bd6 <_realloc_r+0x1e>
 8004c12:	4635      	mov	r5, r6
 8004c14:	e7df      	b.n	8004bd6 <_realloc_r+0x1e>

08004c16 <_malloc_usable_size_r>:
 8004c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c1a:	1f18      	subs	r0, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bfbc      	itt	lt
 8004c20:	580b      	ldrlt	r3, [r1, r0]
 8004c22:	18c0      	addlt	r0, r0, r3
 8004c24:	4770      	bx	lr
	...

08004c28 <_init>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	bf00      	nop
 8004c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2e:	bc08      	pop	{r3}
 8004c30:	469e      	mov	lr, r3
 8004c32:	4770      	bx	lr

08004c34 <_fini>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	bf00      	nop
 8004c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	469e      	mov	lr, r3
 8004c3e:	4770      	bx	lr
