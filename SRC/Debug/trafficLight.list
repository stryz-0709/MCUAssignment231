
trafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004034  08004034  00020128  2**0
                  CONTENTS
  4 .ARM          00000000  08004034  08004034  00020128  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004034  08004034  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004038  08004038  00014038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  0800403c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000128  08004164  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08004164  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d6a  00000000  00000000  00020151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c83  00000000  00000000  00034ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00037b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00038898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196a9  00000000  00000000  000394c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011800  00000000  00000000  00052b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b28e  00000000  00000000  00064369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef5f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000392c  00000000  00000000  000ef64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000128 	.word	0x20000128
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f78 	.word	0x08003f78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000012c 	.word	0x2000012c
 8000148:	08003f78 	.word	0x08003f78

0800014c <isButtonPressed>:
int KeyReg1 [4] = {NORMAL_STATE};
int KeyReg2 [4] = {NORMAL_STATE};
int KeyReg3 [4] = {NORMAL_STATE};
int TimerForKeyPress [4] = {500};

int isButtonPressed(int button){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[button]){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d006      	beq.n	800016e <isButtonPressed+0x22>
		button_flag[button] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000144 	.word	0x20000144

08000180 <subKeyProcess>:

void subKeyProcess(int button){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[button] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000144 	.word	0x20000144

080001a0 <getKeyInput>:


void getKeyInput(int button){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	KeyReg0[button] = KeyReg1[button];
 80001a8:	4a37      	ldr	r2, [pc, #220]	; (8000288 <getKeyInput+0xe8>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	4936      	ldr	r1, [pc, #216]	; (800028c <getKeyInput+0xec>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[button] = KeyReg2[button];
 80001b8:	4a35      	ldr	r2, [pc, #212]	; (8000290 <getKeyInput+0xf0>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4931      	ldr	r1, [pc, #196]	; (8000288 <getKeyInput+0xe8>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[button] = HAL_GPIO_ReadPin(BUTTON_PORT[button], BUTTON_PIN[button]);
 80001c8:	4a32      	ldr	r2, [pc, #200]	; (8000294 <getKeyInput+0xf4>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d0:	4931      	ldr	r1, [pc, #196]	; (8000298 <getKeyInput+0xf8>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001d8:	4619      	mov	r1, r3
 80001da:	4610      	mov	r0, r2
 80001dc:	f001 fbe8 	bl	80019b0 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4619      	mov	r1, r3
 80001e4:	4a2a      	ldr	r2, [pc, #168]	; (8000290 <getKeyInput+0xf0>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if ((KeyReg0[button] == KeyReg1[button]) && (KeyReg1[button] == KeyReg2[button])){
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <getKeyInput+0xec>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	4924      	ldr	r1, [pc, #144]	; (8000288 <getKeyInput+0xe8>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d13f      	bne.n	8000280 <getKeyInput+0xe0>
 8000200:	4a21      	ldr	r2, [pc, #132]	; (8000288 <getKeyInput+0xe8>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4921      	ldr	r1, [pc, #132]	; (8000290 <getKeyInput+0xf0>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000210:	429a      	cmp	r2, r3
 8000212:	d135      	bne.n	8000280 <getKeyInput+0xe0>
		if (KeyReg3[button] != KeyReg2[button]){
 8000214:	4a21      	ldr	r2, [pc, #132]	; (800029c <getKeyInput+0xfc>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	491c      	ldr	r1, [pc, #112]	; (8000290 <getKeyInput+0xf0>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000224:	429a      	cmp	r2, r3
 8000226:	d017      	beq.n	8000258 <getKeyInput+0xb8>
			KeyReg3[button] = KeyReg2[button];
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <getKeyInput+0xf0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	491a      	ldr	r1, [pc, #104]	; (800029c <getKeyInput+0xfc>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg2[button] == PRESSED_STATE){
 8000238:	4a15      	ldr	r2, [pc, #84]	; (8000290 <getKeyInput+0xf0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d11d      	bne.n	8000280 <getKeyInput+0xe0>
				subKeyProcess(button);
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f7ff ff9b 	bl	8000180 <subKeyProcess>
				TimerForKeyPress[button] = 500;
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <getKeyInput+0x100>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
				KeyReg3[button] = NORMAL_STATE;
			}
		}
	}
}
 8000256:	e013      	b.n	8000280 <getKeyInput+0xe0>
			TimerForKeyPress[button]--;
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <getKeyInput+0x100>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	1e5a      	subs	r2, r3, #1
 8000262:	490f      	ldr	r1, [pc, #60]	; (80002a0 <getKeyInput+0x100>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
 800026a:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <getKeyInput+0x100>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	dc04      	bgt.n	8000280 <getKeyInput+0xe0>
				KeyReg3[button] = NORMAL_STATE;
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <getKeyInput+0xfc>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000028 	.word	0x20000028
 800028c:	20000018 	.word	0x20000018
 8000290:	20000038 	.word	0x20000038
 8000294:	20000000 	.word	0x20000000
 8000298:	20000010 	.word	0x20000010
 800029c:	20000048 	.word	0x20000048
 80002a0:	20000058 	.word	0x20000058

080002a4 <displayCountdown>:

#include "fsm_automatic.h"

int initMode[3] = {RED_MODE, GREEN_MODE, EDIT_MODE};

void displayCountdown(int lane){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	if (timer_counter[lane] % 100 == 0){
 80002ac:	4a11      	ldr	r2, [pc, #68]	; (80002f4 <displayCountdown+0x50>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <displayCountdown+0x54>)
 80002b6:	fb83 1302 	smull	r1, r3, r3, r2
 80002ba:	1159      	asrs	r1, r3, #5
 80002bc:	17d3      	asrs	r3, r2, #31
 80002be:	1acb      	subs	r3, r1, r3
 80002c0:	2164      	movs	r1, #100	; 0x64
 80002c2:	fb01 f303 	mul.w	r3, r1, r3
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d10e      	bne.n	80002ea <displayCountdown+0x46>
		int remaining_time = timer_counter[lane] / 100;
 80002cc:	4a09      	ldr	r2, [pc, #36]	; (80002f4 <displayCountdown+0x50>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	4a08      	ldr	r2, [pc, #32]	; (80002f8 <displayCountdown+0x54>)
 80002d6:	fb82 1203 	smull	r1, r2, r2, r3
 80002da:	1152      	asrs	r2, r2, #5
 80002dc:	17db      	asrs	r3, r3, #31
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	60fb      	str	r3, [r7, #12]
		displayUART(AUTO_MODE, remaining_time);
 80002e2:	68f9      	ldr	r1, [r7, #12]
 80002e4:	200b      	movs	r0, #11
 80002e6:	f000 ff03 	bl	80010f0 <displayUART>
	}
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	2000015c 	.word	0x2000015c
 80002f8:	51eb851f 	.word	0x51eb851f

080002fc <initDuration>:

int initDuration(int lane){
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	return (lane == 1)? GREEN_DURATION : RED_DURATION;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d102      	bne.n	8000310 <initDuration+0x14>
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <initDuration+0x24>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	e001      	b.n	8000314 <initDuration+0x18>
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <initDuration+0x28>)
 8000312:	681b      	ldr	r3, [r3, #0]
}
 8000314:	4618      	mov	r0, r3
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	20000090 	.word	0x20000090
 8000324:	20000088 	.word	0x20000088

08000328 <fsm_automatic_run>:

void fsm_automatic_run(int lane){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	switch(LED_MODE[lane]){
 8000330:	4a60      	ldr	r2, [pc, #384]	; (80004b4 <fsm_automatic_run+0x18c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000338:	3b01      	subs	r3, #1
 800033a:	2b16      	cmp	r3, #22
 800033c:	f200 80af 	bhi.w	800049e <fsm_automatic_run+0x176>
 8000340:	a201      	add	r2, pc, #4	; (adr r2, 8000348 <fsm_automatic_run+0x20>)
 8000342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000346:	bf00      	nop
 8000348:	080003a5 	.word	0x080003a5
 800034c:	0800049f 	.word	0x0800049f
 8000350:	0800049f 	.word	0x0800049f
 8000354:	0800049f 	.word	0x0800049f
 8000358:	0800049f 	.word	0x0800049f
 800035c:	0800049f 	.word	0x0800049f
 8000360:	0800049f 	.word	0x0800049f
 8000364:	0800049f 	.word	0x0800049f
 8000368:	0800049f 	.word	0x0800049f
 800036c:	0800049f 	.word	0x0800049f
 8000370:	0800049f 	.word	0x0800049f
 8000374:	0800049f 	.word	0x0800049f
 8000378:	0800049f 	.word	0x0800049f
 800037c:	0800049f 	.word	0x0800049f
 8000380:	0800049f 	.word	0x0800049f
 8000384:	0800049f 	.word	0x0800049f
 8000388:	0800049f 	.word	0x0800049f
 800038c:	0800049f 	.word	0x0800049f
 8000390:	0800049f 	.word	0x0800049f
 8000394:	0800049f 	.word	0x0800049f
 8000398:	080003d5 	.word	0x080003d5
 800039c:	08000413 	.word	0x08000413
 80003a0:	08000461 	.word	0x08000461
		case INIT:
			//Turn off all lights
			setTrafficLight(lane, EDIT_MODE);
 80003a4:	210c      	movs	r1, #12
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f000 fd94 	bl	8000ed4 <setTrafficLight>

			//Change mode and duration
			LED_MODE[lane] = initMode[lane];
 80003ac:	4a42      	ldr	r2, [pc, #264]	; (80004b8 <fsm_automatic_run+0x190>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b4:	493f      	ldr	r1, [pc, #252]	; (80004b4 <fsm_automatic_run+0x18c>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setTimer(lane, initDuration(lane)*100);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff9d 	bl	80002fc <initDuration>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2264      	movs	r2, #100	; 0x64
 80003c6:	fb02 f303 	mul.w	r3, r2, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f000 fbff 	bl	8000bd0 <setTimer>
			break;
 80003d2:	e06b      	b.n	80004ac <fsm_automatic_run+0x184>
		case RED_MODE:
			//Display countdown and turn on light
			if (lane == 0) displayCountdown(lane);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d102      	bne.n	80003e0 <fsm_automatic_run+0xb8>
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f7ff ff62 	bl	80002a4 <displayCountdown>
			setTrafficLight(lane, RED_MODE);
 80003e0:	2115      	movs	r1, #21
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f000 fd76 	bl	8000ed4 <setTrafficLight>


			//Timer flag to change light
			if(timer_flag[lane]){
 80003e8:	4a34      	ldr	r2, [pc, #208]	; (80004bc <fsm_automatic_run+0x194>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d056      	beq.n	80004a2 <fsm_automatic_run+0x17a>
				LED_MODE[lane] = GREEN_MODE;
 80003f4:	4a2f      	ldr	r2, [pc, #188]	; (80004b4 <fsm_automatic_run+0x18c>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2117      	movs	r1, #23
 80003fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 80003fe:	4b30      	ldr	r3, [pc, #192]	; (80004c0 <fsm_automatic_run+0x198>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2264      	movs	r2, #100	; 0x64
 8000404:	fb02 f303 	mul.w	r3, r2, r3
 8000408:	4619      	mov	r1, r3
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f000 fbe0 	bl	8000bd0 <setTimer>
			}
			break;
 8000410:	e047      	b.n	80004a2 <fsm_automatic_run+0x17a>
		case AMBER_MODE:
			//Display countdown and turn on light
			if (lane == 0) displayCountdown(lane);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d102      	bne.n	800041e <fsm_automatic_run+0xf6>
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f7ff ff43 	bl	80002a4 <displayCountdown>
			if (lane == 2) setTrafficLight(lane, GREEN_MODE);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b02      	cmp	r3, #2
 8000422:	d104      	bne.n	800042e <fsm_automatic_run+0x106>
 8000424:	2117      	movs	r1, #23
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f000 fd54 	bl	8000ed4 <setTrafficLight>
 800042c:	e003      	b.n	8000436 <fsm_automatic_run+0x10e>
			else setTrafficLight(lane, AMBER_MODE);
 800042e:	2116      	movs	r1, #22
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f000 fd4f 	bl	8000ed4 <setTrafficLight>


			//Timer flag to change light
			if(timer_flag[lane]){
 8000436:	4a21      	ldr	r2, [pc, #132]	; (80004bc <fsm_automatic_run+0x194>)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d031      	beq.n	80004a6 <fsm_automatic_run+0x17e>
				LED_MODE[lane] = RED_MODE;
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <fsm_automatic_run+0x18c>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2115      	movs	r1, #21
 8000448:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <fsm_automatic_run+0x19c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2264      	movs	r2, #100	; 0x64
 8000452:	fb02 f303 	mul.w	r3, r2, r3
 8000456:	4619      	mov	r1, r3
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f000 fbb9 	bl	8000bd0 <setTimer>
			}
			break;
 800045e:	e022      	b.n	80004a6 <fsm_automatic_run+0x17e>
		case GREEN_MODE:
			//Display countdown and turn on light
			if (lane == 0) displayCountdown(lane);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d102      	bne.n	800046c <fsm_automatic_run+0x144>
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f7ff ff1c 	bl	80002a4 <displayCountdown>
			setTrafficLight(lane, GREEN_MODE);
 800046c:	2117      	movs	r1, #23
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f000 fd30 	bl	8000ed4 <setTrafficLight>

			//Timer flag to change light
			if(timer_flag[lane]){
 8000474:	4a11      	ldr	r2, [pc, #68]	; (80004bc <fsm_automatic_run+0x194>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d014      	beq.n	80004aa <fsm_automatic_run+0x182>
				LED_MODE[lane] = AMBER_MODE;
 8000480:	4a0c      	ldr	r2, [pc, #48]	; (80004b4 <fsm_automatic_run+0x18c>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2116      	movs	r1, #22
 8000486:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, AMBER_DURATION*100);
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <fsm_automatic_run+0x1a0>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2264      	movs	r2, #100	; 0x64
 8000490:	fb02 f303 	mul.w	r3, r2, r3
 8000494:	4619      	mov	r1, r3
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f000 fb9a 	bl	8000bd0 <setTimer>
			}
			break;
 800049c:	e005      	b.n	80004aa <fsm_automatic_run+0x182>
		default:
			break;
 800049e:	bf00      	nop
 80004a0:	e004      	b.n	80004ac <fsm_automatic_run+0x184>
			break;
 80004a2:	bf00      	nop
 80004a4:	e002      	b.n	80004ac <fsm_automatic_run+0x184>
			break;
 80004a6:	bf00      	nop
 80004a8:	e000      	b.n	80004ac <fsm_automatic_run+0x184>
			break;
 80004aa:	bf00      	nop
	}
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000074 	.word	0x20000074
 80004b8:	20000068 	.word	0x20000068
 80004bc:	2000016c 	.word	0x2000016c
 80004c0:	20000090 	.word	0x20000090
 80004c4:	20000088 	.word	0x20000088
 80004c8:	2000008c 	.word	0x2000008c

080004cc <changeMode>:

int tempDuration = 0;


//Change mode
void changeMode(int mode, int duration, int ledMode){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	//Display duration
	displayUART(mode, duration);
 80004d8:	68b9      	ldr	r1, [r7, #8]
 80004da:	68f8      	ldr	r0, [r7, #12]
 80004dc:	f000 fe08 	bl	80010f0 <displayUART>
	tempDuration = duration;
 80004e0:	4a12      	ldr	r2, [pc, #72]	; (800052c <changeMode+0x60>)
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	6013      	str	r3, [r2, #0]

	//Change traffic lights to toggle the right color
	LED_MODE[0] = ledMode;
 80004e6:	4a12      	ldr	r2, [pc, #72]	; (8000530 <changeMode+0x64>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6013      	str	r3, [r2, #0]
	LED_MODE[1] = ledMode;
 80004ec:	4a10      	ldr	r2, [pc, #64]	; (8000530 <changeMode+0x64>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6053      	str	r3, [r2, #4]

	//Change ped light mode
	LED_MODE[2] = ledMode;
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <changeMode+0x64>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6093      	str	r3, [r2, #8]

	//Turn off all lights
	setTrafficLight(0, INIT);
 80004f8:	2101      	movs	r1, #1
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 fcea 	bl	8000ed4 <setTrafficLight>
	setTrafficLight(1, INIT);
 8000500:	2101      	movs	r1, #1
 8000502:	2001      	movs	r0, #1
 8000504:	f000 fce6 	bl	8000ed4 <setTrafficLight>
	setTrafficLight(2, INIT);
 8000508:	2101      	movs	r1, #1
 800050a:	2002      	movs	r0, #2
 800050c:	f000 fce2 	bl	8000ed4 <setTrafficLight>

	//Update mode
	MODE = mode;
 8000510:	4a08      	ldr	r2, [pc, #32]	; (8000534 <changeMode+0x68>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6013      	str	r3, [r2, #0]
	TRAFFIC_MODE = ledMode;
 8000516:	4a08      	ldr	r2, [pc, #32]	; (8000538 <changeMode+0x6c>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6013      	str	r3, [r2, #0]

	//Set timer to toggle lights
	setTimer(3, 25);
 800051c:	2119      	movs	r1, #25
 800051e:	2003      	movs	r0, #3
 8000520:	f000 fb56 	bl	8000bd0 <setTimer>
}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000154 	.word	0x20000154
 8000530:	20000074 	.word	0x20000074
 8000534:	20000080 	.word	0x20000080
 8000538:	20000084 	.word	0x20000084

0800053c <changeDuration>:


//Increment duration
void changeDuration(int mode){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	tempDuration++;
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <changeDuration+0x34>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	4a09      	ldr	r2, [pc, #36]	; (8000570 <changeDuration+0x34>)
 800054c:	6013      	str	r3, [r2, #0]
	if (tempDuration == 100) tempDuration = 1;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <changeDuration+0x34>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b64      	cmp	r3, #100	; 0x64
 8000554:	d102      	bne.n	800055c <changeDuration+0x20>
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <changeDuration+0x34>)
 8000558:	2201      	movs	r2, #1
 800055a:	601a      	str	r2, [r3, #0]

	//Display duration
	displayUART(mode, tempDuration);
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <changeDuration+0x34>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 fdc4 	bl	80010f0 <displayUART>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000154 	.word	0x20000154

08000574 <toggle>:


//Toggle Lights
void toggle(int mode){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	toggleLight(0, mode);
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	2000      	movs	r0, #0
 8000580:	f000 fd3e 	bl	8001000 <toggleLight>
	toggleLight(1, mode);
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	2001      	movs	r0, #1
 8000588:	f000 fd3a 	bl	8001000 <toggleLight>
	toggleLight(2, mode);
 800058c:	6879      	ldr	r1, [r7, #4]
 800058e:	2002      	movs	r0, #2
 8000590:	f000 fd36 	bl	8001000 <toggleLight>
	setTimer(3, 25);
 8000594:	2119      	movs	r1, #25
 8000596:	2003      	movs	r0, #3
 8000598:	f000 fb1a 	bl	8000bd0 <setTimer>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <checkDuration>:


//Check and update duration so that RED = GREEN + AMBER
void checkDuration(int mode){
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	int lane = GREEN_DURATION + AMBER_DURATION;
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <checkDuration+0x84>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <checkDuration+0x88>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4413      	add	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
	switch (mode){
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b17      	cmp	r3, #23
 80005bc:	d01f      	beq.n	80005fe <checkDuration+0x5a>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b17      	cmp	r3, #23
 80005c2:	dc2c      	bgt.n	800061e <checkDuration+0x7a>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b15      	cmp	r3, #21
 80005c8:	d003      	beq.n	80005d2 <checkDuration+0x2e>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b16      	cmp	r3, #22
 80005ce:	d00b      	beq.n	80005e8 <checkDuration+0x44>
		break;
	case GREEN_MODE:
		if (lane != RED_MODE) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
		break;
	}
}
 80005d0:	e025      	b.n	800061e <checkDuration+0x7a>
		if (lane != RED_MODE) GREEN_DURATION = RED_DURATION - AMBER_DURATION;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2b15      	cmp	r3, #21
 80005d6:	d01d      	beq.n	8000614 <checkDuration+0x70>
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <checkDuration+0x8c>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <checkDuration+0x88>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <checkDuration+0x84>)
 80005e4:	6013      	str	r3, [r2, #0]
		break;
 80005e6:	e015      	b.n	8000614 <checkDuration+0x70>
		if (lane != RED_MODE) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2b15      	cmp	r3, #21
 80005ec:	d014      	beq.n	8000618 <checkDuration+0x74>
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <checkDuration+0x84>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <checkDuration+0x88>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4413      	add	r3, r2
 80005f8:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <checkDuration+0x8c>)
 80005fa:	6013      	str	r3, [r2, #0]
		break;
 80005fc:	e00c      	b.n	8000618 <checkDuration+0x74>
		if (lane != RED_MODE) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b15      	cmp	r3, #21
 8000602:	d00b      	beq.n	800061c <checkDuration+0x78>
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <checkDuration+0x84>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <checkDuration+0x88>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4413      	add	r3, r2
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <checkDuration+0x8c>)
 8000610:	6013      	str	r3, [r2, #0]
		break;
 8000612:	e003      	b.n	800061c <checkDuration+0x78>
		break;
 8000614:	bf00      	nop
 8000616:	e002      	b.n	800061e <checkDuration+0x7a>
		break;
 8000618:	bf00      	nop
 800061a:	e000      	b.n	800061e <checkDuration+0x7a>
		break;
 800061c:	bf00      	nop
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20000090 	.word	0x20000090
 800062c:	2000008c 	.word	0x2000008c
 8000630:	20000088 	.word	0x20000088

08000634 <fsm_manual_run>:

void fsm_manual_run(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	switch(MODE){
 8000638:	4b67      	ldr	r3, [pc, #412]	; (80007d8 <fsm_manual_run+0x1a4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3b0b      	subs	r3, #11
 800063e:	2b0c      	cmp	r3, #12
 8000640:	f200 80be 	bhi.w	80007c0 <fsm_manual_run+0x18c>
 8000644:	a201      	add	r2, pc, #4	; (adr r2, 800064c <fsm_manual_run+0x18>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	08000681 	.word	0x08000681
 8000650:	080007c1 	.word	0x080007c1
 8000654:	080007c1 	.word	0x080007c1
 8000658:	080007c1 	.word	0x080007c1
 800065c:	080007c1 	.word	0x080007c1
 8000660:	080007c1 	.word	0x080007c1
 8000664:	080007c1 	.word	0x080007c1
 8000668:	080007c1 	.word	0x080007c1
 800066c:	080007c1 	.word	0x080007c1
 8000670:	080007c1 	.word	0x080007c1
 8000674:	0800069f 	.word	0x0800069f
 8000678:	08000701 	.word	0x08000701
 800067c:	08000763 	.word	0x08000763
		case AUTO_MODE:
			//Change mode
			if (isButtonPressed(0)) changeMode(RED_MODE, RED_DURATION, EDIT_MODE);
 8000680:	2000      	movs	r0, #0
 8000682:	f7ff fd63 	bl	800014c <isButtonPressed>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	f000 809b 	beq.w	80007c4 <fsm_manual_run+0x190>
 800068e:	4b53      	ldr	r3, [pc, #332]	; (80007dc <fsm_manual_run+0x1a8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	220c      	movs	r2, #12
 8000694:	4619      	mov	r1, r3
 8000696:	2015      	movs	r0, #21
 8000698:	f7ff ff18 	bl	80004cc <changeMode>
			break;
 800069c:	e092      	b.n	80007c4 <fsm_manual_run+0x190>

		case RED_MODE:
			//Change mode
			if (isButtonPressed(0)) changeMode(AMBER_MODE, AMBER_DURATION, EDIT_MODE);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff fd54 	bl	800014c <isButtonPressed>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d006      	beq.n	80006b8 <fsm_manual_run+0x84>
 80006aa:	4b4d      	ldr	r3, [pc, #308]	; (80007e0 <fsm_manual_run+0x1ac>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	220c      	movs	r2, #12
 80006b0:	4619      	mov	r1, r3
 80006b2:	2016      	movs	r0, #22
 80006b4:	f7ff ff0a 	bl	80004cc <changeMode>

			//Change duration
			if (isButtonPressed(1))	changeDuration(RED_MODE);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff fd47 	bl	800014c <isButtonPressed>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d002      	beq.n	80006ca <fsm_manual_run+0x96>
 80006c4:	2015      	movs	r0, #21
 80006c6:	f7ff ff39 	bl	800053c <changeDuration>

			//Save duration
			if (isButtonPressed(2)){
 80006ca:	2002      	movs	r0, #2
 80006cc:	f7ff fd3e 	bl	800014c <isButtonPressed>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00c      	beq.n	80006f0 <fsm_manual_run+0xbc>
				RED_DURATION = tempDuration;
 80006d6:	4b43      	ldr	r3, [pc, #268]	; (80007e4 <fsm_manual_run+0x1b0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a40      	ldr	r2, [pc, #256]	; (80007dc <fsm_manual_run+0x1a8>)
 80006dc:	6013      	str	r3, [r2, #0]
				checkDuration(RED_MODE);
 80006de:	2015      	movs	r0, #21
 80006e0:	f7ff ff60 	bl	80005a4 <checkDuration>
				displayUART(SAVED, tempDuration);
 80006e4:	4b3f      	ldr	r3, [pc, #252]	; (80007e4 <fsm_manual_run+0x1b0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	201f      	movs	r0, #31
 80006ec:	f000 fd00 	bl	80010f0 <displayUART>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(RED_MODE);
 80006f0:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <fsm_manual_run+0x1b4>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d067      	beq.n	80007c8 <fsm_manual_run+0x194>
 80006f8:	2015      	movs	r0, #21
 80006fa:	f7ff ff3b 	bl	8000574 <toggle>
			break;
 80006fe:	e063      	b.n	80007c8 <fsm_manual_run+0x194>

		case AMBER_MODE:
			//Change mode
			if (isButtonPressed(0)) changeMode(GREEN_MODE, GREEN_DURATION, EDIT_MODE);
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff fd23 	bl	800014c <isButtonPressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d006      	beq.n	800071a <fsm_manual_run+0xe6>
 800070c:	4b37      	ldr	r3, [pc, #220]	; (80007ec <fsm_manual_run+0x1b8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	220c      	movs	r2, #12
 8000712:	4619      	mov	r1, r3
 8000714:	2017      	movs	r0, #23
 8000716:	f7ff fed9 	bl	80004cc <changeMode>

			//Change duration
			if (isButtonPressed(1))	changeDuration(AMBER_MODE);
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff fd16 	bl	800014c <isButtonPressed>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d002      	beq.n	800072c <fsm_manual_run+0xf8>
 8000726:	2016      	movs	r0, #22
 8000728:	f7ff ff08 	bl	800053c <changeDuration>

			//Save duration
			if (isButtonPressed(2)){
 800072c:	2002      	movs	r0, #2
 800072e:	f7ff fd0d 	bl	800014c <isButtonPressed>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00c      	beq.n	8000752 <fsm_manual_run+0x11e>
				AMBER_DURATION = tempDuration;
 8000738:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <fsm_manual_run+0x1b0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a28      	ldr	r2, [pc, #160]	; (80007e0 <fsm_manual_run+0x1ac>)
 800073e:	6013      	str	r3, [r2, #0]
				checkDuration(AMBER_MODE);
 8000740:	2016      	movs	r0, #22
 8000742:	f7ff ff2f 	bl	80005a4 <checkDuration>
				displayUART(SAVED, tempDuration);
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <fsm_manual_run+0x1b0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4619      	mov	r1, r3
 800074c:	201f      	movs	r0, #31
 800074e:	f000 fccf 	bl	80010f0 <displayUART>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(AMBER_MODE);
 8000752:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <fsm_manual_run+0x1b4>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d038      	beq.n	80007cc <fsm_manual_run+0x198>
 800075a:	2016      	movs	r0, #22
 800075c:	f7ff ff0a 	bl	8000574 <toggle>
			break;
 8000760:	e034      	b.n	80007cc <fsm_manual_run+0x198>

		case GREEN_MODE:
			//Change mode
			if (isButtonPressed(0)) changeMode(AUTO_MODE, 0, INIT);
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff fcf2 	bl	800014c <isButtonPressed>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d004      	beq.n	8000778 <fsm_manual_run+0x144>
 800076e:	2201      	movs	r2, #1
 8000770:	2100      	movs	r1, #0
 8000772:	200b      	movs	r0, #11
 8000774:	f7ff feaa 	bl	80004cc <changeMode>

			//Change duration
			if (isButtonPressed(1)) changeDuration(GREEN_MODE);
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff fce7 	bl	800014c <isButtonPressed>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <fsm_manual_run+0x156>
 8000784:	2017      	movs	r0, #23
 8000786:	f7ff fed9 	bl	800053c <changeDuration>

			//Save duration
			if (isButtonPressed(2)){
 800078a:	2002      	movs	r0, #2
 800078c:	f7ff fcde 	bl	800014c <isButtonPressed>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00c      	beq.n	80007b0 <fsm_manual_run+0x17c>
				GREEN_DURATION = tempDuration;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <fsm_manual_run+0x1b0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <fsm_manual_run+0x1b8>)
 800079c:	6013      	str	r3, [r2, #0]
				checkDuration(GREEN_MODE);
 800079e:	2017      	movs	r0, #23
 80007a0:	f7ff ff00 	bl	80005a4 <checkDuration>
				displayUART(SAVED, tempDuration);
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <fsm_manual_run+0x1b0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	201f      	movs	r0, #31
 80007ac:	f000 fca0 	bl	80010f0 <displayUART>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(GREEN_MODE);
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <fsm_manual_run+0x1b4>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00b      	beq.n	80007d0 <fsm_manual_run+0x19c>
 80007b8:	2017      	movs	r0, #23
 80007ba:	f7ff fedb 	bl	8000574 <toggle>
			break;
 80007be:	e007      	b.n	80007d0 <fsm_manual_run+0x19c>

		default:
			 break;
 80007c0:	bf00      	nop
 80007c2:	e006      	b.n	80007d2 <fsm_manual_run+0x19e>
			break;
 80007c4:	bf00      	nop
 80007c6:	e004      	b.n	80007d2 <fsm_manual_run+0x19e>
			break;
 80007c8:	bf00      	nop
 80007ca:	e002      	b.n	80007d2 <fsm_manual_run+0x19e>
			break;
 80007cc:	bf00      	nop
 80007ce:	e000      	b.n	80007d2 <fsm_manual_run+0x19e>
			break;
 80007d0:	bf00      	nop
	}
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000080 	.word	0x20000080
 80007dc:	20000088 	.word	0x20000088
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	20000154 	.word	0x20000154
 80007e8:	2000016c 	.word	0x2000016c
 80007ec:	20000090 	.word	0x20000090

080007f0 <turnPedLed>:
 *      Author: minht
 */

#include "fsm_ped.h"

void turnPedLed(int mode){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	if (mode == 1){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10a      	bne.n	8000814 <turnPedLed+0x24>
		setTimer(2, timer_counter[0]);
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <turnPedLed+0x3c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4619      	mov	r1, r3
 8000804:	2002      	movs	r0, #2
 8000806:	f000 f9e3 	bl	8000bd0 <setTimer>
		LED_MODE[2] = LED_MODE[0];
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <turnPedLed+0x40>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <turnPedLed+0x40>)
 8000810:	6093      	str	r3, [r2, #8]
	}
	else{
		LED_MODE[2] = EDIT_MODE;
		setTrafficLight(2, INIT);
	}
}
 8000812:	e006      	b.n	8000822 <turnPedLed+0x32>
		LED_MODE[2] = EDIT_MODE;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <turnPedLed+0x40>)
 8000816:	220c      	movs	r2, #12
 8000818:	609a      	str	r2, [r3, #8]
		setTrafficLight(2, INIT);
 800081a:	2101      	movs	r1, #1
 800081c:	2002      	movs	r0, #2
 800081e:	f000 fb59 	bl	8000ed4 <setTrafficLight>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000015c 	.word	0x2000015c
 8000830:	20000074 	.word	0x20000074

08000834 <fsm_ped_run>:

void fsm_ped_run(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	switch(TRAFFIC_MODE){
 8000838:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <fsm_ped_run+0x9c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b0c      	cmp	r3, #12
 800083e:	d01c      	beq.n	800087a <fsm_ped_run+0x46>
 8000840:	2b0c      	cmp	r3, #12
 8000842:	dc3e      	bgt.n	80008c2 <fsm_ped_run+0x8e>
 8000844:	2b01      	cmp	r3, #1
 8000846:	d002      	beq.n	800084e <fsm_ped_run+0x1a>
 8000848:	2b0b      	cmp	r3, #11
 800084a:	d02a      	beq.n	80008a2 <fsm_ped_run+0x6e>
				PED = 0;
				TRAFFIC_MODE = EDIT_MODE;
			}
			break;
		default:
			break;
 800084c:	e039      	b.n	80008c2 <fsm_ped_run+0x8e>
			if (PED == 1){
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <fsm_ped_run+0xa0>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d108      	bne.n	8000868 <fsm_ped_run+0x34>
				turnPedLed(PED);
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <fsm_ped_run+0xa0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffc8 	bl	80007f0 <turnPedLed>
				TRAFFIC_MODE = AUTO_MODE;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <fsm_ped_run+0x9c>)
 8000862:	220b      	movs	r2, #11
 8000864:	601a      	str	r2, [r3, #0]
			break;
 8000866:	e031      	b.n	80008cc <fsm_ped_run+0x98>
				turnPedLed(PED);
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <fsm_ped_run+0xa0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ffbf 	bl	80007f0 <turnPedLed>
				TRAFFIC_MODE = EDIT_MODE;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <fsm_ped_run+0x9c>)
 8000874:	220c      	movs	r2, #12
 8000876:	601a      	str	r2, [r3, #0]
			break;
 8000878:	e028      	b.n	80008cc <fsm_ped_run+0x98>
			if (isButtonPressed(3)){
 800087a:	2003      	movs	r0, #3
 800087c:	f7ff fc66 	bl	800014c <isButtonPressed>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01f      	beq.n	80008c6 <fsm_ped_run+0x92>
				turnPedLed(1);
 8000886:	2001      	movs	r0, #1
 8000888:	f7ff ffb2 	bl	80007f0 <turnPedLed>
				if (MODE == AUTO_MODE){
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <fsm_ped_run+0xa4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b0b      	cmp	r3, #11
 8000892:	d118      	bne.n	80008c6 <fsm_ped_run+0x92>
					PED = 1;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <fsm_ped_run+0xa0>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
					TRAFFIC_MODE = AUTO_MODE;
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <fsm_ped_run+0x9c>)
 800089c:	220b      	movs	r2, #11
 800089e:	601a      	str	r2, [r3, #0]
			break;
 80008a0:	e011      	b.n	80008c6 <fsm_ped_run+0x92>
			if (isButtonPressed(3)){
 80008a2:	2003      	movs	r0, #3
 80008a4:	f7ff fc52 	bl	800014c <isButtonPressed>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00d      	beq.n	80008ca <fsm_ped_run+0x96>
				turnPedLed(0);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff ff9e 	bl	80007f0 <turnPedLed>
				PED = 0;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <fsm_ped_run+0xa0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
				TRAFFIC_MODE = EDIT_MODE;
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <fsm_ped_run+0x9c>)
 80008bc:	220c      	movs	r2, #12
 80008be:	601a      	str	r2, [r3, #0]
			break;
 80008c0:	e003      	b.n	80008ca <fsm_ped_run+0x96>
			break;
 80008c2:	bf00      	nop
 80008c4:	e002      	b.n	80008cc <fsm_ped_run+0x98>
			break;
 80008c6:	bf00      	nop
 80008c8:	e000      	b.n	80008cc <fsm_ped_run+0x98>
			break;
 80008ca:	bf00      	nop
	}
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000084 	.word	0x20000084
 80008d4:	20000158 	.word	0x20000158
 80008d8:	20000080 	.word	0x20000080

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e0:	f000 fcc0 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e4:	f000 f826 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e8:	f000 f8dc 	bl	8000aa4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008ec:	f000 f864 	bl	80009b8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80008f0:	f000 f8ae 	bl	8000a50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80008f4:	480e      	ldr	r0, [pc, #56]	; (8000930 <main+0x54>)
 80008f6:	f001 fd01 	bl	80022fc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTrafficLight(0, INIT);
 80008fa:	2101      	movs	r1, #1
 80008fc:	2000      	movs	r0, #0
 80008fe:	f000 fae9 	bl	8000ed4 <setTrafficLight>
  setTrafficLight(1, INIT);
 8000902:	2101      	movs	r1, #1
 8000904:	2001      	movs	r0, #1
 8000906:	f000 fae5 	bl	8000ed4 <setTrafficLight>
  setTrafficLight(2, INIT);
 800090a:	2101      	movs	r1, #1
 800090c:	2002      	movs	r0, #2
 800090e:	f000 fae1 	bl	8000ed4 <setTrafficLight>
  while (1)
  {

    /* USER CODE END WHILE */
	  fsm_ped_run();
 8000912:	f7ff ff8f 	bl	8000834 <fsm_ped_run>
	  fsm_manual_run();
 8000916:	f7ff fe8d 	bl	8000634 <fsm_manual_run>
	  fsm_automatic_run(0);
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fd04 	bl	8000328 <fsm_automatic_run>
	  fsm_automatic_run(1);
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fd01 	bl	8000328 <fsm_automatic_run>
	  fsm_automatic_run(2);
 8000926:	2002      	movs	r0, #2
 8000928:	f7ff fcfe 	bl	8000328 <fsm_automatic_run>
	  fsm_ped_run();
 800092c:	e7f1      	b.n	8000912 <main+0x36>
 800092e:	bf00      	nop
 8000930:	200001d0 	.word	0x200001d0

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b090      	sub	sp, #64	; 0x40
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	2228      	movs	r2, #40	; 0x28
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f002 fed6 	bl	80036f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095a:	2301      	movs	r3, #1
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095e:	2310      	movs	r3, #16
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000966:	2300      	movs	r3, #0
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800096a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	4618      	mov	r0, r3
 8000976:	f001 f863 	bl	8001a40 <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000980:	f000 f920 	bl	8000bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2302      	movs	r3, #2
 800098a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2102      	movs	r1, #2
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 face 	bl	8001f40 <HAL_RCC_ClockConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80009aa:	f000 f90b 	bl	8000bc4 <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3740      	adds	r7, #64	; 0x40
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009de:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80009e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009ec:	2263      	movs	r2, #99	; 0x63
 80009ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009fe:	f001 fc2d 	bl	800225c <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a08:	f000 f8dc 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_TIM2_Init+0x94>)
 8000a1a:	f001 fdc9 	bl	80025b0 <HAL_TIM_ConfigClockSource>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a24:	f000 f8ce 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM2_Init+0x94>)
 8000a36:	f001 ff9f 	bl	8002978 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 f8c0 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200001d0 	.word	0x200001d0

08000a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_USART2_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a88:	f001 ffe6 	bl	8002a58 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f000 f897 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000188 	.word	0x20000188
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <MX_GPIO_Init+0xe8>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a33      	ldr	r2, [pc, #204]	; (8000b8c <MX_GPIO_Init+0xe8>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <MX_GPIO_Init+0xe8>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <MX_GPIO_Init+0xe8>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a2d      	ldr	r2, [pc, #180]	; (8000b8c <MX_GPIO_Init+0xe8>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <MX_GPIO_Init+0xe8>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0308 	and.w	r3, r3, #8
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Ped_LIGHT2_Pin|D2_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000aee:	4828      	ldr	r0, [pc, #160]	; (8000b90 <MX_GPIO_Init+0xec>)
 8000af0:	f000 ff75 	bl	80019de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ped_LIGHT1_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000afa:	4826      	ldr	r0, [pc, #152]	; (8000b94 <MX_GPIO_Init+0xf0>)
 8000afc:	f000 ff6f 	bl	80019de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Ped_BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = Ped_BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000b00:	2313      	movs	r3, #19
 8000b02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	4619      	mov	r1, r3
 8000b12:	481f      	ldr	r0, [pc, #124]	; (8000b90 <MX_GPIO_Init+0xec>)
 8000b14:	f000 fdc8 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Ped_LIGHT2_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Ped_LIGHT2_Pin|D2_Pin;
 8000b18:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000b1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2302      	movs	r3, #2
 8000b28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4817      	ldr	r0, [pc, #92]	; (8000b90 <MX_GPIO_Init+0xec>)
 8000b32:	f000 fdb9 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	4619      	mov	r1, r3
 8000b48:	4811      	ldr	r0, [pc, #68]	; (8000b90 <MX_GPIO_Init+0xec>)
 8000b4a:	f000 fdad 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_GPIO_Init+0xf0>)
 8000b62:	f000 fda1 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ped_LIGHT1_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = Ped_LIGHT1_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000b66:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000b6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2302      	movs	r3, #2
 8000b76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_GPIO_Init+0xf0>)
 8000b80:	f000 fd92 	bl	80016a8 <HAL_GPIO_Init>

}
 8000b84:	bf00      	nop
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00

08000b98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000ba0:	f000 f82e 	bl	8000c00 <timerRun>
	getKeyInput(0);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff fafb 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 8000baa:	2001      	movs	r0, #1
 8000bac:	f7ff faf8 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f7ff faf5 	bl	80001a0 <getKeyInput>
	getKeyInput(3);
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f7ff faf2 	bl	80001a0 <getKeyInput>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <setTimer>:
#include "software_timer.h"

int timer_counter [4] = {0};
int timer_flag [4] = {0};

void setTimer(int type, int duration){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
	timer_counter[type] = duration;
 8000bda:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <setTimer+0x28>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[type] = 0;
 8000be4:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <setTimer+0x2c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2100      	movs	r1, #0
 8000bea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	2000015c 	.word	0x2000015c
 8000bfc:	2000016c 	.word	0x2000016c

08000c00 <timerRun>:

void timerRun(){
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	if(timer_counter[0] > 0){
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <timerRun+0x8c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	dd0b      	ble.n	8000c24 <timerRun+0x24>
		timer_counter[0]--;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <timerRun+0x8c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <timerRun+0x8c>)
 8000c14:	6013      	str	r3, [r2, #0]
		if(timer_counter[0] <= 0){
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <timerRun+0x8c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	dc02      	bgt.n	8000c24 <timerRun+0x24>
			timer_flag[0] = 1;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <timerRun+0x90>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter[1] > 0){
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <timerRun+0x8c>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	dd0b      	ble.n	8000c44 <timerRun+0x44>
		timer_counter[1]--;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <timerRun+0x8c>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	4a16      	ldr	r2, [pc, #88]	; (8000c8c <timerRun+0x8c>)
 8000c34:	6053      	str	r3, [r2, #4]
		if(timer_counter[1] <= 0){
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <timerRun+0x8c>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	dc02      	bgt.n	8000c44 <timerRun+0x44>
			timer_flag[1] = 1;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <timerRun+0x90>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	605a      	str	r2, [r3, #4]
		}
	}
	if(timer_counter[2] > 0){
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <timerRun+0x8c>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dd0b      	ble.n	8000c64 <timerRun+0x64>
		timer_counter[2]--;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <timerRun+0x8c>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <timerRun+0x8c>)
 8000c54:	6093      	str	r3, [r2, #8]
		if(timer_counter[2] <= 0){
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <timerRun+0x8c>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	dc02      	bgt.n	8000c64 <timerRun+0x64>
			timer_flag[2] = 1;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <timerRun+0x90>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	609a      	str	r2, [r3, #8]
		}
	}
	if(timer_counter[3] > 0){
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <timerRun+0x8c>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dd0b      	ble.n	8000c84 <timerRun+0x84>
		timer_counter[3]--;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <timerRun+0x8c>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <timerRun+0x8c>)
 8000c74:	60d3      	str	r3, [r2, #12]
		if(timer_counter[3] <= 0){
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <timerRun+0x8c>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	dc02      	bgt.n	8000c84 <timerRun+0x84>
			timer_flag[3] = 1;
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <timerRun+0x90>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	60da      	str	r2, [r3, #12]
		}
	}
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	2000015c 	.word	0x2000015c
 8000c90:	2000016c 	.word	0x2000016c

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_MspInit+0x60>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_MspInit+0x60>)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000

08000cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d08:	d113      	bne.n	8000d32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_TIM_Base_MspInit+0x44>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_TIM_Base_MspInit+0x44>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_TIM_Base_MspInit+0x44>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	201c      	movs	r0, #28
 8000d28:	f000 fbd5 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d2c:	201c      	movs	r0, #28
 8000d2e:	f000 fbee 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <HAL_UART_MspInit+0x98>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d137      	bne.n	8000dd0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_UART_MspInit+0x9c>)
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_UART_MspInit+0x9c>)
 8000d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6a:	61d3      	str	r3, [r2, #28]
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_UART_MspInit+0x9c>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_UART_MspInit+0x9c>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_UART_MspInit+0x9c>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_UART_MspInit+0x9c>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d90:	2304      	movs	r3, #4
 8000d92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	480f      	ldr	r0, [pc, #60]	; (8000de0 <HAL_UART_MspInit+0xa0>)
 8000da4:	f000 fc80 	bl	80016a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000da8:	2308      	movs	r3, #8
 8000daa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	4809      	ldr	r0, [pc, #36]	; (8000de0 <HAL_UART_MspInit+0xa0>)
 8000dbc:	f000 fc74 	bl	80016a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2026      	movs	r0, #38	; 0x26
 8000dc6:	f000 fb86 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dca:	2026      	movs	r0, #38	; 0x26
 8000dcc:	f000 fb9f 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2a:	f000 fa61 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <TIM2_IRQHandler+0x10>)
 8000e3a:	f001 fab1 	bl	80023a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001d0 	.word	0x200001d0

08000e48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <USART2_IRQHandler+0x10>)
 8000e4e:	f001 fed7 	bl	8002c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000188 	.word	0x20000188

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f002 fc08 	bl	80036a0 <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20005000 	.word	0x20005000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	2000017c 	.word	0x2000017c
 8000ec4:	20000240 	.word	0x20000240

08000ec8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <setTrafficLight>:

uint16_t D_Pin[6] = {D2_Pin, D3_Pin, D4_Pin, D5_Pin, Ped_LIGHT1_Pin, Ped_LIGHT2_Pin};
GPIO_TypeDef *D_Port[6] = {D2_GPIO_Port, D3_GPIO_Port, D4_GPIO_Port, D5_GPIO_Port, Ped_LIGHT1_GPIO_Port, Ped_LIGHT2_GPIO_Port};


void setTrafficLight(int lane, int light){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	switch (light){
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2b17      	cmp	r3, #23
 8000ee2:	d047      	beq.n	8000f74 <setTrafficLight+0xa0>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2b17      	cmp	r3, #23
 8000ee8:	dc63      	bgt.n	8000fb2 <setTrafficLight+0xde>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	2b15      	cmp	r3, #21
 8000eee:	d003      	beq.n	8000ef8 <setTrafficLight+0x24>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	2b16      	cmp	r3, #22
 8000ef4:	d01f      	beq.n	8000f36 <setTrafficLight+0x62>
 8000ef6:	e05c      	b.n	8000fb2 <setTrafficLight+0xde>
		case RED_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], SET);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4a3e      	ldr	r2, [pc, #248]	; (8000ff8 <setTrafficLight+0x124>)
 8000efe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4a3d      	ldr	r2, [pc, #244]	; (8000ffc <setTrafficLight+0x128>)
 8000f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f000 fd65 	bl	80019de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	3301      	adds	r3, #1
 8000f1a:	4a37      	ldr	r2, [pc, #220]	; (8000ff8 <setTrafficLight+0x124>)
 8000f1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	3301      	adds	r3, #1
 8000f26:	4a35      	ldr	r2, [pc, #212]	; (8000ffc <setTrafficLight+0x128>)
 8000f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f000 fd55 	bl	80019de <HAL_GPIO_WritePin>
			break;
 8000f34:	e05c      	b.n	8000ff0 <setTrafficLight+0x11c>
		case AMBER_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], SET);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ff8 <setTrafficLight+0x124>)
 8000f3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4a2d      	ldr	r2, [pc, #180]	; (8000ffc <setTrafficLight+0x128>)
 8000f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f000 fd46 	bl	80019de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], SET);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	3301      	adds	r3, #1
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <setTrafficLight+0x124>)
 8000f5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <setTrafficLight+0x128>)
 8000f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f000 fd36 	bl	80019de <HAL_GPIO_WritePin>
			break;
 8000f72:	e03d      	b.n	8000ff0 <setTrafficLight+0x11c>
		case GREEN_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <setTrafficLight+0x124>)
 8000f7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <setTrafficLight+0x128>)
 8000f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f000 fd27 	bl	80019de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], SET);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	3301      	adds	r3, #1
 8000f96:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <setTrafficLight+0x124>)
 8000f98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <setTrafficLight+0x128>)
 8000fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	f000 fd17 	bl	80019de <HAL_GPIO_WritePin>
			break;
 8000fb0:	e01e      	b.n	8000ff0 <setTrafficLight+0x11c>
		default:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <setTrafficLight+0x124>)
 8000fb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <setTrafficLight+0x128>)
 8000fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f000 fd08 	bl	80019de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <setTrafficLight+0x124>)
 8000fd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <setTrafficLight+0x128>)
 8000fe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f000 fcf8 	bl	80019de <HAL_GPIO_WritePin>
			break;
 8000fee:	bf00      	nop
	}
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200000a4 	.word	0x200000a4
 8000ffc:	20000098 	.word	0x20000098

08001000 <toggleLight>:


void toggleLight(int lane, int light){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
	switch (light){
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b17      	cmp	r3, #23
 800100e:	d047      	beq.n	80010a0 <toggleLight+0xa0>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	2b17      	cmp	r3, #23
 8001014:	dc63      	bgt.n	80010de <toggleLight+0xde>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	2b15      	cmp	r3, #21
 800101a:	d003      	beq.n	8001024 <toggleLight+0x24>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b16      	cmp	r3, #22
 8001020:	d01f      	beq.n	8001062 <toggleLight+0x62>
		case GREEN_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
			break;
		default:
			break;
 8001022:	e05c      	b.n	80010de <toggleLight+0xde>
			HAL_GPIO_TogglePin(D_Port[lane*2], D_Pin[lane*2]);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4a2f      	ldr	r2, [pc, #188]	; (80010e8 <toggleLight+0xe8>)
 800102a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	492e      	ldr	r1, [pc, #184]	; (80010ec <toggleLight+0xec>)
 8001034:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001038:	4619      	mov	r1, r3
 800103a:	4610      	mov	r0, r2
 800103c:	f000 fce7 	bl	8001a0e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	3301      	adds	r3, #1
 8001046:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <toggleLight+0xe8>)
 8001048:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	3301      	adds	r3, #1
 8001052:	4a26      	ldr	r2, [pc, #152]	; (80010ec <toggleLight+0xec>)
 8001054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	f000 fcbf 	bl	80019de <HAL_GPIO_WritePin>
			break;
 8001060:	e03e      	b.n	80010e0 <toggleLight+0xe0>
			HAL_GPIO_TogglePin(D_Port[lane*2], D_Pin[lane*2]);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <toggleLight+0xe8>)
 8001068:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	491e      	ldr	r1, [pc, #120]	; (80010ec <toggleLight+0xec>)
 8001072:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001076:	4619      	mov	r1, r3
 8001078:	4610      	mov	r0, r2
 800107a:	f000 fcc8 	bl	8001a0e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	3301      	adds	r3, #1
 8001084:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <toggleLight+0xe8>)
 8001086:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	3301      	adds	r3, #1
 8001090:	4916      	ldr	r1, [pc, #88]	; (80010ec <toggleLight+0xec>)
 8001092:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001096:	4619      	mov	r1, r3
 8001098:	4610      	mov	r0, r2
 800109a:	f000 fcb8 	bl	8001a0e <HAL_GPIO_TogglePin>
			break;
 800109e:	e01f      	b.n	80010e0 <toggleLight+0xe0>
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <toggleLight+0xe8>)
 80010a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <toggleLight+0xec>)
 80010b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	f000 fc91 	bl	80019de <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <toggleLight+0xe8>)
 80010c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	3301      	adds	r3, #1
 80010ce:	4907      	ldr	r1, [pc, #28]	; (80010ec <toggleLight+0xec>)
 80010d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4610      	mov	r0, r2
 80010d8:	f000 fc99 	bl	8001a0e <HAL_GPIO_TogglePin>
			break;
 80010dc:	e000      	b.n	80010e0 <toggleLight+0xe0>
			break;
 80010de:	bf00      	nop
	}
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000a4 	.word	0x200000a4
 80010ec:	20000098 	.word	0x20000098

080010f0 <displayUART>:
 */

#include "uart_timer.h"
char str[20];

void displayUART(int mode, int num){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3b0b      	subs	r3, #11
 80010fe:	2b14      	cmp	r3, #20
 8001100:	d874      	bhi.n	80011ec <displayUART+0xfc>
 8001102:	a201      	add	r2, pc, #4	; (adr r2, 8001108 <displayUART+0x18>)
 8001104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001108:	0800115d 	.word	0x0800115d
 800110c:	080011ed 	.word	0x080011ed
 8001110:	080011ed 	.word	0x080011ed
 8001114:	080011ed 	.word	0x080011ed
 8001118:	080011ed 	.word	0x080011ed
 800111c:	080011ed 	.word	0x080011ed
 8001120:	080011ed 	.word	0x080011ed
 8001124:	080011ed 	.word	0x080011ed
 8001128:	080011ed 	.word	0x080011ed
 800112c:	080011ed 	.word	0x080011ed
 8001130:	0800117f 	.word	0x0800117f
 8001134:	0800119b 	.word	0x0800119b
 8001138:	080011b7 	.word	0x080011b7
 800113c:	080011ed 	.word	0x080011ed
 8001140:	080011ed 	.word	0x080011ed
 8001144:	080011ed 	.word	0x080011ed
 8001148:	080011ed 	.word	0x080011ed
 800114c:	080011ed 	.word	0x080011ed
 8001150:	080011ed 	.word	0x080011ed
 8001154:	080011ed 	.word	0x080011ed
 8001158:	080011d3 	.word	0x080011d3
	switch (mode){
		case AUTO_MODE:
			if (num != 0) HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!7SEG=%d#\n\r", num), 1000);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d046      	beq.n	80011f0 <displayUART+0x100>
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	4925      	ldr	r1, [pc, #148]	; (80011fc <displayUART+0x10c>)
 8001166:	4826      	ldr	r0, [pc, #152]	; (8001200 <displayUART+0x110>)
 8001168:	f002 facc 	bl	8003704 <siprintf>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	4922      	ldr	r1, [pc, #136]	; (8001200 <displayUART+0x110>)
 8001176:	4823      	ldr	r0, [pc, #140]	; (8001204 <displayUART+0x114>)
 8001178:	f001 fcbe 	bl	8002af8 <HAL_UART_Transmit>
			break;
 800117c:	e038      	b.n	80011f0 <displayUART+0x100>
		case RED_MODE:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!RED=%d#\n\r", num), 1000);
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	4921      	ldr	r1, [pc, #132]	; (8001208 <displayUART+0x118>)
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <displayUART+0x110>)
 8001184:	f002 fabe 	bl	8003704 <siprintf>
 8001188:	4603      	mov	r3, r0
 800118a:	b29a      	uxth	r2, r3
 800118c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001190:	491b      	ldr	r1, [pc, #108]	; (8001200 <displayUART+0x110>)
 8001192:	481c      	ldr	r0, [pc, #112]	; (8001204 <displayUART+0x114>)
 8001194:	f001 fcb0 	bl	8002af8 <HAL_UART_Transmit>
			break;
 8001198:	e02b      	b.n	80011f2 <displayUART+0x102>
		case AMBER_MODE:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!AMBER=%d#\n\r", num), 1000);
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	491b      	ldr	r1, [pc, #108]	; (800120c <displayUART+0x11c>)
 800119e:	4818      	ldr	r0, [pc, #96]	; (8001200 <displayUART+0x110>)
 80011a0:	f002 fab0 	bl	8003704 <siprintf>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ac:	4914      	ldr	r1, [pc, #80]	; (8001200 <displayUART+0x110>)
 80011ae:	4815      	ldr	r0, [pc, #84]	; (8001204 <displayUART+0x114>)
 80011b0:	f001 fca2 	bl	8002af8 <HAL_UART_Transmit>
			break;
 80011b4:	e01d      	b.n	80011f2 <displayUART+0x102>
		case GREEN_MODE:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!GREEN=%d#\n\r", num), 1000);
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	4915      	ldr	r1, [pc, #84]	; (8001210 <displayUART+0x120>)
 80011ba:	4811      	ldr	r0, [pc, #68]	; (8001200 <displayUART+0x110>)
 80011bc:	f002 faa2 	bl	8003704 <siprintf>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c8:	490d      	ldr	r1, [pc, #52]	; (8001200 <displayUART+0x110>)
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <displayUART+0x114>)
 80011cc:	f001 fc94 	bl	8002af8 <HAL_UART_Transmit>
			break;
 80011d0:	e00f      	b.n	80011f2 <displayUART+0x102>
		case SAVED:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!SAVED#\n\r"), 1000);
 80011d2:	4910      	ldr	r1, [pc, #64]	; (8001214 <displayUART+0x124>)
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <displayUART+0x110>)
 80011d6:	f002 fa95 	bl	8003704 <siprintf>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	4907      	ldr	r1, [pc, #28]	; (8001200 <displayUART+0x110>)
 80011e4:	4807      	ldr	r0, [pc, #28]	; (8001204 <displayUART+0x114>)
 80011e6:	f001 fc87 	bl	8002af8 <HAL_UART_Transmit>
			break;
 80011ea:	e002      	b.n	80011f2 <displayUART+0x102>
		default:
			break;
 80011ec:	bf00      	nop
 80011ee:	e000      	b.n	80011f2 <displayUART+0x102>
			break;
 80011f0:	bf00      	nop
	}



}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	08003f90 	.word	0x08003f90
 8001200:	20000218 	.word	0x20000218
 8001204:	20000188 	.word	0x20000188
 8001208:	08003f9c 	.word	0x08003f9c
 800120c:	08003fa8 	.word	0x08003fa8
 8001210:	08003fb8 	.word	0x08003fb8
 8001214:	08003fc8 	.word	0x08003fc8

08001218 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001218:	f7ff fe56 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800121e:	490c      	ldr	r1, [pc, #48]	; (8001250 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001220:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a09      	ldr	r2, [pc, #36]	; (8001258 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001234:	4c09      	ldr	r4, [pc, #36]	; (800125c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001242:	f002 fa33 	bl	80036ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001246:	f7ff fb49 	bl	80008dc <main>
  bx lr
 800124a:	4770      	bx	lr
  ldr r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001250:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001254:	0800403c 	.word	0x0800403c
  ldr r2, =_sbss
 8001258:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 800125c:	20000240 	.word	0x20000240

08001260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC1_2_IRQHandler>
	...

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_Init+0x28>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_Init+0x28>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f923 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	200f      	movs	r0, #15
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fd08 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40022000 	.word	0x40022000

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f93b 	bl	800152a <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 f903 	bl	80014d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000094 	.word	0x20000094
 80012e8:	200000c0 	.word	0x200000c0
 80012ec:	200000bc 	.word	0x200000bc

080012f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_IncTick+0x1c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_IncTick+0x20>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a03      	ldr	r2, [pc, #12]	; (8001310 <HAL_IncTick+0x20>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	200000c0 	.word	0x200000c0
 8001310:	2000022c 	.word	0x2000022c

08001314 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b02      	ldr	r3, [pc, #8]	; (8001324 <HAL_GetTick+0x10>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	2000022c 	.word	0x2000022c

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4906      	ldr	r1, [pc, #24]	; (80013c0 <__NVIC_EnableIRQ+0x34>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f7ff ff90 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff2d 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff42 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff90 	bl	8001418 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5f 	bl	80013c4 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff35 	bl	800138c <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffa2 	bl	800147c <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d008      	beq.n	800156c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2204      	movs	r2, #4
 800155e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e020      	b.n	80015ae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 020e 	bic.w	r2, r2, #14
 800157a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	2101      	movs	r1, #1
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d005      	beq.n	80015dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2204      	movs	r2, #4
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e051      	b.n	8001680 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 020e 	bic.w	r2, r2, #14
 80015ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a22      	ldr	r2, [pc, #136]	; (800168c <HAL_DMA_Abort_IT+0xd4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d029      	beq.n	800165a <HAL_DMA_Abort_IT+0xa2>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a21      	ldr	r2, [pc, #132]	; (8001690 <HAL_DMA_Abort_IT+0xd8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d022      	beq.n	8001656 <HAL_DMA_Abort_IT+0x9e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <HAL_DMA_Abort_IT+0xdc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d01a      	beq.n	8001650 <HAL_DMA_Abort_IT+0x98>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <HAL_DMA_Abort_IT+0xe0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d012      	beq.n	800164a <HAL_DMA_Abort_IT+0x92>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1c      	ldr	r2, [pc, #112]	; (800169c <HAL_DMA_Abort_IT+0xe4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00a      	beq.n	8001644 <HAL_DMA_Abort_IT+0x8c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <HAL_DMA_Abort_IT+0xe8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d102      	bne.n	800163e <HAL_DMA_Abort_IT+0x86>
 8001638:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800163c:	e00e      	b.n	800165c <HAL_DMA_Abort_IT+0xa4>
 800163e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001642:	e00b      	b.n	800165c <HAL_DMA_Abort_IT+0xa4>
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	e008      	b.n	800165c <HAL_DMA_Abort_IT+0xa4>
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	e005      	b.n	800165c <HAL_DMA_Abort_IT+0xa4>
 8001650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001654:	e002      	b.n	800165c <HAL_DMA_Abort_IT+0xa4>
 8001656:	2310      	movs	r3, #16
 8001658:	e000      	b.n	800165c <HAL_DMA_Abort_IT+0xa4>
 800165a:	2301      	movs	r3, #1
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_DMA_Abort_IT+0xec>)
 800165e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
    } 
  }
  return status;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40020008 	.word	0x40020008
 8001690:	4002001c 	.word	0x4002001c
 8001694:	40020030 	.word	0x40020030
 8001698:	40020044 	.word	0x40020044
 800169c:	40020058 	.word	0x40020058
 80016a0:	4002006c 	.word	0x4002006c
 80016a4:	40020000 	.word	0x40020000

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b08b      	sub	sp, #44	; 0x2c
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ba:	e169      	b.n	8001990 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016bc:	2201      	movs	r2, #1
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f040 8158 	bne.w	800198a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a9a      	ldr	r2, [pc, #616]	; (8001948 <HAL_GPIO_Init+0x2a0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d05e      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 80016e4:	4a98      	ldr	r2, [pc, #608]	; (8001948 <HAL_GPIO_Init+0x2a0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d875      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 80016ea:	4a98      	ldr	r2, [pc, #608]	; (800194c <HAL_GPIO_Init+0x2a4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d058      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 80016f0:	4a96      	ldr	r2, [pc, #600]	; (800194c <HAL_GPIO_Init+0x2a4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d86f      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 80016f6:	4a96      	ldr	r2, [pc, #600]	; (8001950 <HAL_GPIO_Init+0x2a8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d052      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 80016fc:	4a94      	ldr	r2, [pc, #592]	; (8001950 <HAL_GPIO_Init+0x2a8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d869      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 8001702:	4a94      	ldr	r2, [pc, #592]	; (8001954 <HAL_GPIO_Init+0x2ac>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d04c      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 8001708:	4a92      	ldr	r2, [pc, #584]	; (8001954 <HAL_GPIO_Init+0x2ac>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d863      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 800170e:	4a92      	ldr	r2, [pc, #584]	; (8001958 <HAL_GPIO_Init+0x2b0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d046      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 8001714:	4a90      	ldr	r2, [pc, #576]	; (8001958 <HAL_GPIO_Init+0x2b0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d85d      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 800171a:	2b12      	cmp	r3, #18
 800171c:	d82a      	bhi.n	8001774 <HAL_GPIO_Init+0xcc>
 800171e:	2b12      	cmp	r3, #18
 8001720:	d859      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 8001722:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <HAL_GPIO_Init+0x80>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	080017a3 	.word	0x080017a3
 800172c:	0800177d 	.word	0x0800177d
 8001730:	0800178f 	.word	0x0800178f
 8001734:	080017d1 	.word	0x080017d1
 8001738:	080017d7 	.word	0x080017d7
 800173c:	080017d7 	.word	0x080017d7
 8001740:	080017d7 	.word	0x080017d7
 8001744:	080017d7 	.word	0x080017d7
 8001748:	080017d7 	.word	0x080017d7
 800174c:	080017d7 	.word	0x080017d7
 8001750:	080017d7 	.word	0x080017d7
 8001754:	080017d7 	.word	0x080017d7
 8001758:	080017d7 	.word	0x080017d7
 800175c:	080017d7 	.word	0x080017d7
 8001760:	080017d7 	.word	0x080017d7
 8001764:	080017d7 	.word	0x080017d7
 8001768:	080017d7 	.word	0x080017d7
 800176c:	08001785 	.word	0x08001785
 8001770:	08001799 	.word	0x08001799
 8001774:	4a79      	ldr	r2, [pc, #484]	; (800195c <HAL_GPIO_Init+0x2b4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800177a:	e02c      	b.n	80017d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e029      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	3304      	adds	r3, #4
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e024      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	3308      	adds	r3, #8
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e01f      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	330c      	adds	r3, #12
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e01a      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017aa:	2304      	movs	r3, #4
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e013      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b8:	2308      	movs	r3, #8
 80017ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	611a      	str	r2, [r3, #16]
          break;
 80017c2:	e009      	b.n	80017d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c4:	2308      	movs	r3, #8
 80017c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	615a      	str	r2, [r3, #20]
          break;
 80017ce:	e003      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
          break;
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          break;
 80017d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2bff      	cmp	r3, #255	; 0xff
 80017dc:	d801      	bhi.n	80017e2 <HAL_GPIO_Init+0x13a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	e001      	b.n	80017e6 <HAL_GPIO_Init+0x13e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3304      	adds	r3, #4
 80017e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2bff      	cmp	r3, #255	; 0xff
 80017ec:	d802      	bhi.n	80017f4 <HAL_GPIO_Init+0x14c>
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	e002      	b.n	80017fa <HAL_GPIO_Init+0x152>
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	3b08      	subs	r3, #8
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	210f      	movs	r1, #15
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	401a      	ands	r2, r3
 800180c:	6a39      	ldr	r1, [r7, #32]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 80b1 	beq.w	800198a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001828:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_GPIO_Init+0x2b8>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a4c      	ldr	r2, [pc, #304]	; (8001960 <HAL_GPIO_Init+0x2b8>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_GPIO_Init+0x2b8>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001840:	4a48      	ldr	r2, [pc, #288]	; (8001964 <HAL_GPIO_Init+0x2bc>)
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	220f      	movs	r2, #15
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a40      	ldr	r2, [pc, #256]	; (8001968 <HAL_GPIO_Init+0x2c0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d013      	beq.n	8001894 <HAL_GPIO_Init+0x1ec>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a3f      	ldr	r2, [pc, #252]	; (800196c <HAL_GPIO_Init+0x2c4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d00d      	beq.n	8001890 <HAL_GPIO_Init+0x1e8>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a3e      	ldr	r2, [pc, #248]	; (8001970 <HAL_GPIO_Init+0x2c8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d007      	beq.n	800188c <HAL_GPIO_Init+0x1e4>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3d      	ldr	r2, [pc, #244]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d101      	bne.n	8001888 <HAL_GPIO_Init+0x1e0>
 8001884:	2303      	movs	r3, #3
 8001886:	e006      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001888:	2304      	movs	r3, #4
 800188a:	e004      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 800188c:	2302      	movs	r3, #2
 800188e:	e002      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001894:	2300      	movs	r3, #0
 8001896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001898:	f002 0203 	and.w	r2, r2, #3
 800189c:	0092      	lsls	r2, r2, #2
 800189e:	4093      	lsls	r3, r2
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018a6:	492f      	ldr	r1, [pc, #188]	; (8001964 <HAL_GPIO_Init+0x2bc>)
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	3302      	adds	r3, #2
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	492c      	ldr	r1, [pc, #176]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	4928      	ldr	r1, [pc, #160]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018d8:	4013      	ands	r3, r2
 80018da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	4922      	ldr	r1, [pc, #136]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60cb      	str	r3, [r1, #12]
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	491e      	ldr	r1, [pc, #120]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 8001900:	4013      	ands	r3, r2
 8001902:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4918      	ldr	r1, [pc, #96]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	43db      	mvns	r3, r3
 8001926:	4914      	ldr	r1, [pc, #80]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 8001928:	4013      	ands	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d021      	beq.n	800197c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	490e      	ldr	r1, [pc, #56]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
 8001944:	e021      	b.n	800198a <HAL_GPIO_Init+0x2e2>
 8001946:	bf00      	nop
 8001948:	10320000 	.word	0x10320000
 800194c:	10310000 	.word	0x10310000
 8001950:	10220000 	.word	0x10220000
 8001954:	10210000 	.word	0x10210000
 8001958:	10120000 	.word	0x10120000
 800195c:	10110000 	.word	0x10110000
 8001960:	40021000 	.word	0x40021000
 8001964:	40010000 	.word	0x40010000
 8001968:	40010800 	.word	0x40010800
 800196c:	40010c00 	.word	0x40010c00
 8001970:	40011000 	.word	0x40011000
 8001974:	40011400 	.word	0x40011400
 8001978:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_GPIO_Init+0x304>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	43db      	mvns	r3, r3
 8001984:	4909      	ldr	r1, [pc, #36]	; (80019ac <HAL_GPIO_Init+0x304>)
 8001986:	4013      	ands	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	3301      	adds	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	fa22 f303 	lsr.w	r3, r2, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	f47f ae8e 	bne.w	80016bc <HAL_GPIO_Init+0x14>
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	372c      	adds	r7, #44	; 0x2c
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e001      	b.n	80019d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	807b      	strh	r3, [r7, #2]
 80019ea:	4613      	mov	r3, r2
 80019ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ee:	787b      	ldrb	r3, [r7, #1]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f4:	887a      	ldrh	r2, [r7, #2]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019fa:	e003      	b.n	8001a04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	041a      	lsls	r2, r3, #16
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	611a      	str	r2, [r3, #16]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	041a      	lsls	r2, r3, #16
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	400b      	ands	r3, r1
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	611a      	str	r2, [r3, #16]
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e26c      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8087 	beq.w	8001b6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a60:	4b92      	ldr	r3, [pc, #584]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d00c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a6c:	4b8f      	ldr	r3, [pc, #572]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d112      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5e>
 8001a78:	4b8c      	ldr	r3, [pc, #560]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d10b      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a86:	4b89      	ldr	r3, [pc, #548]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d06c      	beq.n	8001b6c <HAL_RCC_OscConfig+0x12c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d168      	bne.n	8001b6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e246      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x76>
 8001aa8:	4b80      	ldr	r3, [pc, #512]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a7f      	ldr	r2, [pc, #508]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e02e      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x98>
 8001abe:	4b7b      	ldr	r3, [pc, #492]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a7a      	ldr	r2, [pc, #488]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b78      	ldr	r3, [pc, #480]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a77      	ldr	r2, [pc, #476]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e01d      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0xbc>
 8001ae2:	4b72      	ldr	r3, [pc, #456]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a71      	ldr	r2, [pc, #452]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b6f      	ldr	r3, [pc, #444]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a6e      	ldr	r2, [pc, #440]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e00b      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001afc:	4b6b      	ldr	r3, [pc, #428]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a6a      	ldr	r2, [pc, #424]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a67      	ldr	r2, [pc, #412]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d013      	beq.n	8001b44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fbfa 	bl	8001314 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fbf6 	bl	8001314 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1fa      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0xe4>
 8001b42:	e014      	b.n	8001b6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fbe6 	bl	8001314 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fbe2 	bl	8001314 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1e6      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	4b53      	ldr	r3, [pc, #332]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x10c>
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d063      	beq.n	8001c42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7a:	4b4c      	ldr	r3, [pc, #304]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b86:	4b49      	ldr	r3, [pc, #292]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d11c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x18c>
 8001b92:	4b46      	ldr	r3, [pc, #280]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d116      	bne.n	8001bcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	4b43      	ldr	r3, [pc, #268]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x176>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e1ba      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4939      	ldr	r1, [pc, #228]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	e03a      	b.n	8001c42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7ff fb9b 	bl	8001314 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be2:	f7ff fb97 	bl	8001314 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e19b      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c00:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4927      	ldr	r1, [pc, #156]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]
 8001c14:	e015      	b.n	8001c42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fb7a 	bl	8001314 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c24:	f7ff fb76 	bl	8001314 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e17a      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03a      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d019      	beq.n	8001c8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5c:	f7ff fb5a 	bl	8001314 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7ff fb56 	bl	8001314 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e15a      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f000 facc 	bl	8002220 <RCC_Delay>
 8001c88:	e01c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c90:	f7ff fb40 	bl	8001314 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c96:	e00f      	b.n	8001cb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c98:	f7ff fb3c 	bl	8001314 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d908      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e140      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	42420000 	.word	0x42420000
 8001cb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	4b9e      	ldr	r3, [pc, #632]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1e9      	bne.n	8001c98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a6 	beq.w	8001e1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd6:	4b97      	ldr	r3, [pc, #604]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10d      	bne.n	8001cfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b94      	ldr	r3, [pc, #592]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a93      	ldr	r2, [pc, #588]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b91      	ldr	r3, [pc, #580]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	4b8e      	ldr	r3, [pc, #568]	; (8001f38 <HAL_RCC_OscConfig+0x4f8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0a:	4b8b      	ldr	r3, [pc, #556]	; (8001f38 <HAL_RCC_OscConfig+0x4f8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a8a      	ldr	r2, [pc, #552]	; (8001f38 <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fafd 	bl	8001314 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7ff faf9 	bl	8001314 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b64      	cmp	r3, #100	; 0x64
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0fd      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4b81      	ldr	r3, [pc, #516]	; (8001f38 <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x312>
 8001d44:	4b7b      	ldr	r3, [pc, #492]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a7a      	ldr	r2, [pc, #488]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6213      	str	r3, [r2, #32]
 8001d50:	e02d      	b.n	8001dae <HAL_RCC_OscConfig+0x36e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x334>
 8001d5a:	4b76      	ldr	r3, [pc, #472]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a75      	ldr	r2, [pc, #468]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6213      	str	r3, [r2, #32]
 8001d66:	4b73      	ldr	r3, [pc, #460]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4a72      	ldr	r2, [pc, #456]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	6213      	str	r3, [r2, #32]
 8001d72:	e01c      	b.n	8001dae <HAL_RCC_OscConfig+0x36e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d10c      	bne.n	8001d96 <HAL_RCC_OscConfig+0x356>
 8001d7c:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a6c      	ldr	r2, [pc, #432]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	6213      	str	r3, [r2, #32]
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a69      	ldr	r2, [pc, #420]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	e00b      	b.n	8001dae <HAL_RCC_OscConfig+0x36e>
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a66      	ldr	r2, [pc, #408]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	4b64      	ldr	r3, [pc, #400]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a63      	ldr	r2, [pc, #396]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d015      	beq.n	8001de2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7ff faad 	bl	8001314 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7ff faa9 	bl	8001314 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e0ab      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd4:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0ee      	beq.n	8001dbe <HAL_RCC_OscConfig+0x37e>
 8001de0:	e014      	b.n	8001e0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7ff fa97 	bl	8001314 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff fa93 	bl	8001314 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e095      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1ee      	bne.n	8001dea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d105      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e12:	4b48      	ldr	r3, [pc, #288]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a47      	ldr	r2, [pc, #284]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8081 	beq.w	8001f2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d061      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d146      	bne.n	8001eca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_OscConfig+0x4fc>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7ff fa67 	bl	8001314 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7ff fa63 	bl	8001314 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e067      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5c:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f0      	bne.n	8001e4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e70:	d108      	bne.n	8001e84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e72:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	492d      	ldr	r1, [pc, #180]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a19      	ldr	r1, [r3, #32]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	430b      	orrs	r3, r1
 8001e96:	4927      	ldr	r1, [pc, #156]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCC_OscConfig+0x4fc>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7ff fa37 	bl	8001314 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7ff fa33 	bl	8001314 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e037      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x46a>
 8001ec8:	e02f      	b.n	8001f2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_RCC_OscConfig+0x4fc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fa20 	bl	8001314 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7ff fa1c 	bl	8001314 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e020      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x498>
 8001ef6:	e018      	b.n	8001f2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e013      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	42420060 	.word	0x42420060

08001f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0d0      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f54:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d910      	bls.n	8001f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 0207 	bic.w	r2, r3, #7
 8001f6a:	4965      	ldr	r1, [pc, #404]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b63      	ldr	r3, [pc, #396]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0b8      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f9c:	4b59      	ldr	r3, [pc, #356]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a58      	ldr	r2, [pc, #352]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb4:	4b53      	ldr	r3, [pc, #332]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a52      	ldr	r2, [pc, #328]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc0:	4b50      	ldr	r3, [pc, #320]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	494d      	ldr	r1, [pc, #308]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d040      	beq.n	8002060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b47      	ldr	r3, [pc, #284]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d115      	bne.n	800201e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e07f      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffe:	4b41      	ldr	r3, [pc, #260]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e073      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200e:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e06b      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201e:	4b39      	ldr	r3, [pc, #228]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f023 0203 	bic.w	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4936      	ldr	r1, [pc, #216]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002030:	f7ff f970 	bl	8001314 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	e00a      	b.n	800204e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002038:	f7ff f96c 	bl	8001314 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e053      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 020c 	and.w	r2, r3, #12
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	429a      	cmp	r2, r3
 800205e:	d1eb      	bne.n	8002038 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d210      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 0207 	bic.w	r2, r3, #7
 8002076:	4922      	ldr	r1, [pc, #136]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e032      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4916      	ldr	r1, [pc, #88]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	490e      	ldr	r1, [pc, #56]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ce:	f000 f821 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80020d2:	4602      	mov	r2, r0
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	490a      	ldr	r1, [pc, #40]	; (8002108 <HAL_RCC_ClockConfig+0x1c8>)
 80020e0:	5ccb      	ldrb	r3, [r1, r3]
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1cc>)
 80020e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x1d0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff f8ce 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40022000 	.word	0x40022000
 8002104:	40021000 	.word	0x40021000
 8002108:	08003fd4 	.word	0x08003fd4
 800210c:	20000094 	.word	0x20000094
 8002110:	200000bc 	.word	0x200000bc

08002114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b04      	cmp	r3, #4
 800213c:	d002      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x30>
 800213e:	2b08      	cmp	r3, #8
 8002140:	d003      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0x36>
 8002142:	e027      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002146:	613b      	str	r3, [r7, #16]
      break;
 8002148:	e027      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	0c9b      	lsrs	r3, r3, #18
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002154:	5cd3      	ldrb	r3, [r2, r3]
 8002156:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d010      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	0c5b      	lsrs	r3, r3, #17
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	4a11      	ldr	r2, [pc, #68]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002176:	fb02 f203 	mul.w	r2, r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e004      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	613b      	str	r3, [r7, #16]
      break;
 8002192:	e002      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002196:	613b      	str	r3, [r7, #16]
      break;
 8002198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800219a:	693b      	ldr	r3, [r7, #16]
}
 800219c:	4618      	mov	r0, r3
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	007a1200 	.word	0x007a1200
 80021b0:	08003fec 	.word	0x08003fec
 80021b4:	08003ffc 	.word	0x08003ffc
 80021b8:	003d0900 	.word	0x003d0900

080021bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c0:	4b02      	ldr	r3, [pc, #8]	; (80021cc <HAL_RCC_GetHCLKFreq+0x10>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	20000094 	.word	0x20000094

080021d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021d4:	f7ff fff2 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	4903      	ldr	r1, [pc, #12]	; (80021f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08003fe4 	.word	0x08003fe4

080021f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021fc:	f7ff ffde 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	0adb      	lsrs	r3, r3, #11
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4903      	ldr	r1, [pc, #12]	; (800221c <HAL_RCC_GetPCLK2Freq+0x24>)
 800220e:	5ccb      	ldrb	r3, [r1, r3]
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	08003fe4 	.word	0x08003fe4

08002220 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <RCC_Delay+0x34>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <RCC_Delay+0x38>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	0a5b      	lsrs	r3, r3, #9
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	fb02 f303 	mul.w	r3, r2, r3
 800223a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800223c:	bf00      	nop
  }
  while (Delay --);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1e5a      	subs	r2, r3, #1
 8002242:	60fa      	str	r2, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f9      	bne.n	800223c <RCC_Delay+0x1c>
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	20000094 	.word	0x20000094
 8002258:	10624dd3 	.word	0x10624dd3

0800225c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e041      	b.n	80022f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fd38 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3304      	adds	r3, #4
 8002298:	4619      	mov	r1, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f000 fa74 	bl	8002788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b01      	cmp	r3, #1
 800230e:	d001      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e03a      	b.n	800238a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a18      	ldr	r2, [pc, #96]	; (8002394 <HAL_TIM_Base_Start_IT+0x98>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00e      	beq.n	8002354 <HAL_TIM_Base_Start_IT+0x58>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233e:	d009      	beq.n	8002354 <HAL_TIM_Base_Start_IT+0x58>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_TIM_Base_Start_IT+0x9c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_TIM_Base_Start_IT+0x58>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a13      	ldr	r2, [pc, #76]	; (800239c <HAL_TIM_Base_Start_IT+0xa0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d111      	bne.n	8002378 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b06      	cmp	r3, #6
 8002364:	d010      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0201 	orr.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002376:	e007      	b.n	8002388 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800

080023a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d122      	bne.n	80023fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d11b      	bne.n	80023fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0202 	mvn.w	r2, #2
 80023cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f9b4 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 80023e8:	e005      	b.n	80023f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f9a7 	bl	800273e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f9b6 	bl	8002762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b04      	cmp	r3, #4
 8002408:	d122      	bne.n	8002450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b04      	cmp	r3, #4
 8002416:	d11b      	bne.n	8002450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0204 	mvn.w	r2, #4
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f98a 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f97d 	bl	800273e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f98c 	bl	8002762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b08      	cmp	r3, #8
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b08      	cmp	r3, #8
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0208 	mvn.w	r2, #8
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2204      	movs	r2, #4
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f960 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f953 	bl	800273e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f962 	bl	8002762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b10      	cmp	r3, #16
 80024b0:	d122      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d11b      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0210 	mvn.w	r2, #16
 80024c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2208      	movs	r2, #8
 80024ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f936 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 80024e4:	e005      	b.n	80024f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f929 	bl	800273e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f938 	bl	8002762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d10e      	bne.n	8002524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d107      	bne.n	8002524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0201 	mvn.w	r2, #1
 800251c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fb3a 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b80      	cmp	r3, #128	; 0x80
 8002530:	d10e      	bne.n	8002550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	2b80      	cmp	r3, #128	; 0x80
 800253e:	d107      	bne.n	8002550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fa7b 	bl	8002a46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b40      	cmp	r3, #64	; 0x40
 800255c:	d10e      	bne.n	800257c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d107      	bne.n	800257c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8fc 	bl	8002774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b20      	cmp	r3, #32
 8002588:	d10e      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b20      	cmp	r3, #32
 8002596:	d107      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0220 	mvn.w	r2, #32
 80025a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fa46 	bl	8002a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_TIM_ConfigClockSource+0x1c>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e0b4      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x186>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002604:	d03e      	beq.n	8002684 <HAL_TIM_ConfigClockSource+0xd4>
 8002606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800260a:	f200 8087 	bhi.w	800271c <HAL_TIM_ConfigClockSource+0x16c>
 800260e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002612:	f000 8086 	beq.w	8002722 <HAL_TIM_ConfigClockSource+0x172>
 8002616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800261a:	d87f      	bhi.n	800271c <HAL_TIM_ConfigClockSource+0x16c>
 800261c:	2b70      	cmp	r3, #112	; 0x70
 800261e:	d01a      	beq.n	8002656 <HAL_TIM_ConfigClockSource+0xa6>
 8002620:	2b70      	cmp	r3, #112	; 0x70
 8002622:	d87b      	bhi.n	800271c <HAL_TIM_ConfigClockSource+0x16c>
 8002624:	2b60      	cmp	r3, #96	; 0x60
 8002626:	d050      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x11a>
 8002628:	2b60      	cmp	r3, #96	; 0x60
 800262a:	d877      	bhi.n	800271c <HAL_TIM_ConfigClockSource+0x16c>
 800262c:	2b50      	cmp	r3, #80	; 0x50
 800262e:	d03c      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0xfa>
 8002630:	2b50      	cmp	r3, #80	; 0x50
 8002632:	d873      	bhi.n	800271c <HAL_TIM_ConfigClockSource+0x16c>
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d058      	beq.n	80026ea <HAL_TIM_ConfigClockSource+0x13a>
 8002638:	2b40      	cmp	r3, #64	; 0x40
 800263a:	d86f      	bhi.n	800271c <HAL_TIM_ConfigClockSource+0x16c>
 800263c:	2b30      	cmp	r3, #48	; 0x30
 800263e:	d064      	beq.n	800270a <HAL_TIM_ConfigClockSource+0x15a>
 8002640:	2b30      	cmp	r3, #48	; 0x30
 8002642:	d86b      	bhi.n	800271c <HAL_TIM_ConfigClockSource+0x16c>
 8002644:	2b20      	cmp	r3, #32
 8002646:	d060      	beq.n	800270a <HAL_TIM_ConfigClockSource+0x15a>
 8002648:	2b20      	cmp	r3, #32
 800264a:	d867      	bhi.n	800271c <HAL_TIM_ConfigClockSource+0x16c>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d05c      	beq.n	800270a <HAL_TIM_ConfigClockSource+0x15a>
 8002650:	2b10      	cmp	r3, #16
 8002652:	d05a      	beq.n	800270a <HAL_TIM_ConfigClockSource+0x15a>
 8002654:	e062      	b.n	800271c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6899      	ldr	r1, [r3, #8]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f000 f968 	bl	800293a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002678:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	609a      	str	r2, [r3, #8]
      break;
 8002682:	e04f      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6899      	ldr	r1, [r3, #8]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f000 f951 	bl	800293a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026a6:	609a      	str	r2, [r3, #8]
      break;
 80026a8:	e03c      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6859      	ldr	r1, [r3, #4]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	461a      	mov	r2, r3
 80026b8:	f000 f8c8 	bl	800284c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2150      	movs	r1, #80	; 0x50
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f91f 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80026c8:	e02c      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6859      	ldr	r1, [r3, #4]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	461a      	mov	r2, r3
 80026d8:	f000 f8e6 	bl	80028a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2160      	movs	r1, #96	; 0x60
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f90f 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80026e8:	e01c      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	461a      	mov	r2, r3
 80026f8:	f000 f8a8 	bl	800284c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2140      	movs	r1, #64	; 0x40
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f8ff 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002708:	e00c      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f000 f8f6 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 800271a:	e003      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
      break;
 8002720:	e000      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
	...

08002788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a29      	ldr	r2, [pc, #164]	; (8002840 <TIM_Base_SetConfig+0xb8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00b      	beq.n	80027b8 <TIM_Base_SetConfig+0x30>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a6:	d007      	beq.n	80027b8 <TIM_Base_SetConfig+0x30>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a26      	ldr	r2, [pc, #152]	; (8002844 <TIM_Base_SetConfig+0xbc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0x30>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a25      	ldr	r2, [pc, #148]	; (8002848 <TIM_Base_SetConfig+0xc0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d108      	bne.n	80027ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <TIM_Base_SetConfig+0xb8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00b      	beq.n	80027ea <TIM_Base_SetConfig+0x62>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d007      	beq.n	80027ea <TIM_Base_SetConfig+0x62>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <TIM_Base_SetConfig+0xbc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d003      	beq.n	80027ea <TIM_Base_SetConfig+0x62>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a18      	ldr	r2, [pc, #96]	; (8002848 <TIM_Base_SetConfig+0xc0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d108      	bne.n	80027fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a07      	ldr	r2, [pc, #28]	; (8002840 <TIM_Base_SetConfig+0xb8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	615a      	str	r2, [r3, #20]
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40000400 	.word	0x40000400
 8002848:	40000800 	.word	0x40000800

0800284c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 030a 	bic.w	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f023 0210 	bic.w	r2, r3, #16
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	031b      	lsls	r3, r3, #12
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	f043 0307 	orr.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002954:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	021a      	lsls	r2, r3, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800298c:	2302      	movs	r3, #2
 800298e:	e046      	b.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d009      	beq.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a10      	ldr	r2, [pc, #64]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10c      	bne.n	8002a0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40000800 	.word	0x40000800

08002a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e042      	b.n	8002af0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fe f95e 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2224      	movs	r2, #36	; 0x24
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fd71 	bl	8003584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d16d      	bne.n	8002bf4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_UART_Transmit+0x2c>
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e066      	b.n	8002bf6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b36:	f7fe fbed 	bl	8001314 <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	88fa      	ldrh	r2, [r7, #6]
 8002b40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b50:	d108      	bne.n	8002b64 <HAL_UART_Transmit+0x6c>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e003      	b.n	8002b6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b6c:	e02a      	b.n	8002bc4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2200      	movs	r2, #0
 8002b76:	2180      	movs	r1, #128	; 0x80
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 faf9 	bl	8003170 <UART_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e036      	b.n	8002bf6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10b      	bne.n	8002ba6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	e007      	b.n	8002bb6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1cf      	bne.n	8002b6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2140      	movs	r1, #64	; 0x40
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fac9 	bl	8003170 <UART_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e006      	b.n	8002bf6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b0ba      	sub	sp, #232	; 0xe8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10f      	bne.n	8002c66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_UART_IRQHandler+0x66>
 8002c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fbd1 	bl	8003406 <UART_Receive_IT>
      return;
 8002c64:	e25b      	b.n	800311e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80de 	beq.w	8002e2c <HAL_UART_IRQHandler+0x22c>
 8002c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80d1 	beq.w	8002e2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_UART_IRQHandler+0xae>
 8002c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_UART_IRQHandler+0xd2>
 8002cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f043 0202 	orr.w	r2, r3, #2
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_UART_IRQHandler+0xf6>
 8002cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f043 0204 	orr.w	r2, r3, #4
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d011      	beq.n	8002d26 <HAL_UART_IRQHandler+0x126>
 8002d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d105      	bne.n	8002d1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f043 0208 	orr.w	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 81f2 	beq.w	8003114 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_UART_IRQHandler+0x14e>
 8002d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fb5c 	bl	8003406 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf14      	ite	ne
 8002d5c:	2301      	movne	r3, #1
 8002d5e:	2300      	moveq	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <HAL_UART_IRQHandler+0x17a>
 8002d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d04f      	beq.n	8002e1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa66 	bl	800324c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d041      	beq.n	8002e12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3314      	adds	r3, #20
 8002d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3314      	adds	r3, #20
 8002db6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1d9      	bne.n	8002d8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d013      	beq.n	8002e0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	4a7e      	ldr	r2, [pc, #504]	; (8002fe0 <HAL_UART_IRQHandler+0x3e0>)
 8002de8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fbe2 	bl	80015b8 <HAL_DMA_Abort_IT>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d016      	beq.n	8002e28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e04:	4610      	mov	r0, r2
 8002e06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e08:	e00e      	b.n	8002e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f99c 	bl	8003148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	e00a      	b.n	8002e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f998 	bl	8003148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e18:	e006      	b.n	8002e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f994 	bl	8003148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002e26:	e175      	b.n	8003114 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e28:	bf00      	nop
    return;
 8002e2a:	e173      	b.n	8003114 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	f040 814f 	bne.w	80030d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8148 	beq.w	80030d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8141 	beq.w	80030d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80b6 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8145 	beq.w	8003118 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e96:	429a      	cmp	r2, r3
 8002e98:	f080 813e 	bcs.w	8003118 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ea2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	f000 8088 	beq.w	8002fc0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ebe:	e853 3f00 	ldrex	r3, [r3]
 8002ec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ece:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002edc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ee0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ee8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002eec:	e841 2300 	strex	r3, r2, [r1]
 8002ef0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1d9      	bne.n	8002eb0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3314      	adds	r3, #20
 8002f02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3314      	adds	r3, #20
 8002f1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f2c:	e841 2300 	strex	r3, r2, [r1]
 8002f30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e1      	bne.n	8002efc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3314      	adds	r3, #20
 8002f58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e3      	bne.n	8002f38 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f90:	f023 0310 	bic.w	r3, r3, #16
 8002f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002fa2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fa4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e3      	bne.n	8002f7e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fac1 	bl	8001542 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8bf 	bl	800315a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fdc:	e09c      	b.n	8003118 <HAL_UART_IRQHandler+0x518>
 8002fde:	bf00      	nop
 8002fe0:	08003311 	.word	0x08003311
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 808e 	beq.w	800311c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8089 	beq.w	800311c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	330c      	adds	r3, #12
 8003010:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	e853 3f00 	ldrex	r3, [r3]
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800302e:	647a      	str	r2, [r7, #68]	; 0x44
 8003030:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e3      	bne.n	800300a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3314      	adds	r3, #20
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	e853 3f00 	ldrex	r3, [r3]
 8003050:	623b      	str	r3, [r7, #32]
   return(result);
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3314      	adds	r3, #20
 8003062:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003066:	633a      	str	r2, [r7, #48]	; 0x30
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800306c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800306e:	e841 2300 	strex	r3, r2, [r1]
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e3      	bne.n	8003042 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	330c      	adds	r3, #12
 800308e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	60fb      	str	r3, [r7, #12]
   return(result);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0310 	bic.w	r3, r3, #16
 800309e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	330c      	adds	r3, #12
 80030a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030ac:	61fa      	str	r2, [r7, #28]
 80030ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	69b9      	ldr	r1, [r7, #24]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	e841 2300 	strex	r3, r2, [r1]
 80030b8:	617b      	str	r3, [r7, #20]
   return(result);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e3      	bne.n	8003088 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f844 	bl	800315a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030d2:	e023      	b.n	800311c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <HAL_UART_IRQHandler+0x4f4>
 80030e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f923 	bl	8003338 <UART_Transmit_IT>
    return;
 80030f2:	e014      	b.n	800311e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <HAL_UART_IRQHandler+0x51e>
 8003100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f962 	bl	80033d6 <UART_EndTransmit_IT>
    return;
 8003112:	e004      	b.n	800311e <HAL_UART_IRQHandler+0x51e>
    return;
 8003114:	bf00      	nop
 8003116:	e002      	b.n	800311e <HAL_UART_IRQHandler+0x51e>
      return;
 8003118:	bf00      	nop
 800311a:	e000      	b.n	800311e <HAL_UART_IRQHandler+0x51e>
      return;
 800311c:	bf00      	nop
  }
}
 800311e:	37e8      	adds	r7, #232	; 0xe8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	460b      	mov	r3, r1
 8003164:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b090      	sub	sp, #64	; 0x40
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	4613      	mov	r3, r2
 800317e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003180:	e050      	b.n	8003224 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d04c      	beq.n	8003224 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800318a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003190:	f7fe f8c0 	bl	8001314 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800319c:	429a      	cmp	r2, r3
 800319e:	d241      	bcs.n	8003224 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	330c      	adds	r3, #12
 80031a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	e853 3f00 	ldrex	r3, [r3]
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	330c      	adds	r3, #12
 80031be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031c0:	637a      	str	r2, [r7, #52]	; 0x34
 80031c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e5      	bne.n	80031a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3314      	adds	r3, #20
 80031da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	e853 3f00 	ldrex	r3, [r3]
 80031e2:	613b      	str	r3, [r7, #16]
   return(result);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3314      	adds	r3, #20
 80031f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f4:	623a      	str	r2, [r7, #32]
 80031f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f8:	69f9      	ldr	r1, [r7, #28]
 80031fa:	6a3a      	ldr	r2, [r7, #32]
 80031fc:	e841 2300 	strex	r3, r2, [r1]
 8003200:	61bb      	str	r3, [r7, #24]
   return(result);
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e5      	bne.n	80031d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e00f      	b.n	8003244 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	429a      	cmp	r2, r3
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	429a      	cmp	r2, r3
 8003240:	d09f      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3740      	adds	r7, #64	; 0x40
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800324c:	b480      	push	{r7}
 800324e:	b095      	sub	sp, #84	; 0x54
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	330c      	adds	r3, #12
 800325a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800326a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	330c      	adds	r3, #12
 8003272:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003274:	643a      	str	r2, [r7, #64]	; 0x40
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800327a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e5      	bne.n	8003254 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3314      	adds	r3, #20
 800328e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	61fb      	str	r3, [r7, #28]
   return(result);
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	64bb      	str	r3, [r7, #72]	; 0x48
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3314      	adds	r3, #20
 80032a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b0:	e841 2300 	strex	r3, r2, [r1]
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e5      	bne.n	8003288 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d119      	bne.n	80032f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	330c      	adds	r3, #12
 80032ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	e853 3f00 	ldrex	r3, [r3]
 80032d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f023 0310 	bic.w	r3, r3, #16
 80032da:	647b      	str	r3, [r7, #68]	; 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	330c      	adds	r3, #12
 80032e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032e4:	61ba      	str	r2, [r7, #24]
 80032e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	6979      	ldr	r1, [r7, #20]
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	613b      	str	r3, [r7, #16]
   return(result);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e5      	bne.n	80032c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003306:	bf00      	nop
 8003308:	3754      	adds	r7, #84	; 0x54
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7ff ff0c 	bl	8003148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b21      	cmp	r3, #33	; 0x21
 800334a:	d13e      	bne.n	80033ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003354:	d114      	bne.n	8003380 <UART_Transmit_IT+0x48>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d110      	bne.n	8003380 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003372:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	1c9a      	adds	r2, r3, #2
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	621a      	str	r2, [r3, #32]
 800337e:	e008      	b.n	8003392 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	1c59      	adds	r1, r3, #1
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6211      	str	r1, [r2, #32]
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29b      	uxth	r3, r3
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	4619      	mov	r1, r3
 80033a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10f      	bne.n	80033c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e000      	b.n	80033cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033ca:	2302      	movs	r3, #2
  }
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff fe94 	bl	8003124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b08c      	sub	sp, #48	; 0x30
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b22      	cmp	r3, #34	; 0x22
 8003418:	f040 80ae 	bne.w	8003578 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003424:	d117      	bne.n	8003456 <UART_Receive_IT+0x50>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d113      	bne.n	8003456 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800342e:	2300      	movs	r3, #0
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003444:	b29a      	uxth	r2, r3
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	1c9a      	adds	r2, r3, #2
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
 8003454:	e026      	b.n	80034a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800345c:	2300      	movs	r3, #0
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003468:	d007      	beq.n	800347a <UART_Receive_IT+0x74>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <UART_Receive_IT+0x82>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e008      	b.n	800349a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003494:	b2da      	uxtb	r2, r3
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4619      	mov	r1, r3
 80034b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d15d      	bne.n	8003574 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0220 	bic.w	r2, r2, #32
 80034c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d135      	bne.n	800356a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	613b      	str	r3, [r7, #16]
   return(result);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f023 0310 	bic.w	r3, r3, #16
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003524:	623a      	str	r2, [r7, #32]
 8003526:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	69f9      	ldr	r1, [r7, #28]
 800352a:	6a3a      	ldr	r2, [r7, #32]
 800352c:	e841 2300 	strex	r3, r2, [r1]
 8003530:	61bb      	str	r3, [r7, #24]
   return(result);
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e5      	bne.n	8003504 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b10      	cmp	r3, #16
 8003544:	d10a      	bne.n	800355c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fdf9 	bl	800315a <HAL_UARTEx_RxEventCallback>
 8003568:	e002      	b.n	8003570 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fde3 	bl	8003136 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e002      	b.n	800357a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	3730      	adds	r7, #48	; 0x30
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035be:	f023 030c 	bic.w	r3, r3, #12
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2c      	ldr	r2, [pc, #176]	; (8003698 <UART_SetConfig+0x114>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d103      	bne.n	80035f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035ec:	f7fe fe04 	bl	80021f8 <HAL_RCC_GetPCLK2Freq>
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	e002      	b.n	80035fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035f4:	f7fe fdec 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 80035f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	009a      	lsls	r2, r3, #2
 8003604:	441a      	add	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	4a22      	ldr	r2, [pc, #136]	; (800369c <UART_SetConfig+0x118>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	0119      	lsls	r1, r3, #4
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009a      	lsls	r2, r3, #2
 8003624:	441a      	add	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <UART_SetConfig+0x118>)
 8003632:	fba3 0302 	umull	r0, r3, r3, r2
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	2064      	movs	r0, #100	; 0x64
 800363a:	fb00 f303 	mul.w	r3, r0, r3
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	3332      	adds	r3, #50	; 0x32
 8003644:	4a15      	ldr	r2, [pc, #84]	; (800369c <UART_SetConfig+0x118>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003650:	4419      	add	r1, r3
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009a      	lsls	r2, r3, #2
 800365c:	441a      	add	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	fbb2 f2f3 	udiv	r2, r2, r3
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <UART_SetConfig+0x118>)
 800366a:	fba3 0302 	umull	r0, r3, r3, r2
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	2064      	movs	r0, #100	; 0x64
 8003672:	fb00 f303 	mul.w	r3, r0, r3
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	3332      	adds	r3, #50	; 0x32
 800367c:	4a07      	ldr	r2, [pc, #28]	; (800369c <UART_SetConfig+0x118>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	f003 020f 	and.w	r2, r3, #15
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	440a      	add	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40013800 	.word	0x40013800
 800369c:	51eb851f 	.word	0x51eb851f

080036a0 <__errno>:
 80036a0:	4b01      	ldr	r3, [pc, #4]	; (80036a8 <__errno+0x8>)
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	200000c4 	.word	0x200000c4

080036ac <__libc_init_array>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	2600      	movs	r6, #0
 80036b0:	4d0c      	ldr	r5, [pc, #48]	; (80036e4 <__libc_init_array+0x38>)
 80036b2:	4c0d      	ldr	r4, [pc, #52]	; (80036e8 <__libc_init_array+0x3c>)
 80036b4:	1b64      	subs	r4, r4, r5
 80036b6:	10a4      	asrs	r4, r4, #2
 80036b8:	42a6      	cmp	r6, r4
 80036ba:	d109      	bne.n	80036d0 <__libc_init_array+0x24>
 80036bc:	f000 fc5c 	bl	8003f78 <_init>
 80036c0:	2600      	movs	r6, #0
 80036c2:	4d0a      	ldr	r5, [pc, #40]	; (80036ec <__libc_init_array+0x40>)
 80036c4:	4c0a      	ldr	r4, [pc, #40]	; (80036f0 <__libc_init_array+0x44>)
 80036c6:	1b64      	subs	r4, r4, r5
 80036c8:	10a4      	asrs	r4, r4, #2
 80036ca:	42a6      	cmp	r6, r4
 80036cc:	d105      	bne.n	80036da <__libc_init_array+0x2e>
 80036ce:	bd70      	pop	{r4, r5, r6, pc}
 80036d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d4:	4798      	blx	r3
 80036d6:	3601      	adds	r6, #1
 80036d8:	e7ee      	b.n	80036b8 <__libc_init_array+0xc>
 80036da:	f855 3b04 	ldr.w	r3, [r5], #4
 80036de:	4798      	blx	r3
 80036e0:	3601      	adds	r6, #1
 80036e2:	e7f2      	b.n	80036ca <__libc_init_array+0x1e>
 80036e4:	08004034 	.word	0x08004034
 80036e8:	08004034 	.word	0x08004034
 80036ec:	08004034 	.word	0x08004034
 80036f0:	08004038 	.word	0x08004038

080036f4 <memset>:
 80036f4:	4603      	mov	r3, r0
 80036f6:	4402      	add	r2, r0
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d100      	bne.n	80036fe <memset+0xa>
 80036fc:	4770      	bx	lr
 80036fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003702:	e7f9      	b.n	80036f8 <memset+0x4>

08003704 <siprintf>:
 8003704:	b40e      	push	{r1, r2, r3}
 8003706:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800370a:	b500      	push	{lr}
 800370c:	b09c      	sub	sp, #112	; 0x70
 800370e:	ab1d      	add	r3, sp, #116	; 0x74
 8003710:	9002      	str	r0, [sp, #8]
 8003712:	9006      	str	r0, [sp, #24]
 8003714:	9107      	str	r1, [sp, #28]
 8003716:	9104      	str	r1, [sp, #16]
 8003718:	4808      	ldr	r0, [pc, #32]	; (800373c <siprintf+0x38>)
 800371a:	4909      	ldr	r1, [pc, #36]	; (8003740 <siprintf+0x3c>)
 800371c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003720:	9105      	str	r1, [sp, #20]
 8003722:	6800      	ldr	r0, [r0, #0]
 8003724:	a902      	add	r1, sp, #8
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	f000 f868 	bl	80037fc <_svfiprintf_r>
 800372c:	2200      	movs	r2, #0
 800372e:	9b02      	ldr	r3, [sp, #8]
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	b01c      	add	sp, #112	; 0x70
 8003734:	f85d eb04 	ldr.w	lr, [sp], #4
 8003738:	b003      	add	sp, #12
 800373a:	4770      	bx	lr
 800373c:	200000c4 	.word	0x200000c4
 8003740:	ffff0208 	.word	0xffff0208

08003744 <__ssputs_r>:
 8003744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003748:	688e      	ldr	r6, [r1, #8]
 800374a:	4682      	mov	sl, r0
 800374c:	429e      	cmp	r6, r3
 800374e:	460c      	mov	r4, r1
 8003750:	4690      	mov	r8, r2
 8003752:	461f      	mov	r7, r3
 8003754:	d838      	bhi.n	80037c8 <__ssputs_r+0x84>
 8003756:	898a      	ldrh	r2, [r1, #12]
 8003758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800375c:	d032      	beq.n	80037c4 <__ssputs_r+0x80>
 800375e:	6825      	ldr	r5, [r4, #0]
 8003760:	6909      	ldr	r1, [r1, #16]
 8003762:	3301      	adds	r3, #1
 8003764:	eba5 0901 	sub.w	r9, r5, r1
 8003768:	6965      	ldr	r5, [r4, #20]
 800376a:	444b      	add	r3, r9
 800376c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003774:	106d      	asrs	r5, r5, #1
 8003776:	429d      	cmp	r5, r3
 8003778:	bf38      	it	cc
 800377a:	461d      	movcc	r5, r3
 800377c:	0553      	lsls	r3, r2, #21
 800377e:	d531      	bpl.n	80037e4 <__ssputs_r+0xa0>
 8003780:	4629      	mov	r1, r5
 8003782:	f000 fb53 	bl	8003e2c <_malloc_r>
 8003786:	4606      	mov	r6, r0
 8003788:	b950      	cbnz	r0, 80037a0 <__ssputs_r+0x5c>
 800378a:	230c      	movs	r3, #12
 800378c:	f04f 30ff 	mov.w	r0, #4294967295
 8003790:	f8ca 3000 	str.w	r3, [sl]
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800379a:	81a3      	strh	r3, [r4, #12]
 800379c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a0:	464a      	mov	r2, r9
 80037a2:	6921      	ldr	r1, [r4, #16]
 80037a4:	f000 face 	bl	8003d44 <memcpy>
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b2:	81a3      	strh	r3, [r4, #12]
 80037b4:	6126      	str	r6, [r4, #16]
 80037b6:	444e      	add	r6, r9
 80037b8:	6026      	str	r6, [r4, #0]
 80037ba:	463e      	mov	r6, r7
 80037bc:	6165      	str	r5, [r4, #20]
 80037be:	eba5 0509 	sub.w	r5, r5, r9
 80037c2:	60a5      	str	r5, [r4, #8]
 80037c4:	42be      	cmp	r6, r7
 80037c6:	d900      	bls.n	80037ca <__ssputs_r+0x86>
 80037c8:	463e      	mov	r6, r7
 80037ca:	4632      	mov	r2, r6
 80037cc:	4641      	mov	r1, r8
 80037ce:	6820      	ldr	r0, [r4, #0]
 80037d0:	f000 fac6 	bl	8003d60 <memmove>
 80037d4:	68a3      	ldr	r3, [r4, #8]
 80037d6:	6822      	ldr	r2, [r4, #0]
 80037d8:	1b9b      	subs	r3, r3, r6
 80037da:	4432      	add	r2, r6
 80037dc:	2000      	movs	r0, #0
 80037de:	60a3      	str	r3, [r4, #8]
 80037e0:	6022      	str	r2, [r4, #0]
 80037e2:	e7db      	b.n	800379c <__ssputs_r+0x58>
 80037e4:	462a      	mov	r2, r5
 80037e6:	f000 fb7b 	bl	8003ee0 <_realloc_r>
 80037ea:	4606      	mov	r6, r0
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d1e1      	bne.n	80037b4 <__ssputs_r+0x70>
 80037f0:	4650      	mov	r0, sl
 80037f2:	6921      	ldr	r1, [r4, #16]
 80037f4:	f000 face 	bl	8003d94 <_free_r>
 80037f8:	e7c7      	b.n	800378a <__ssputs_r+0x46>
	...

080037fc <_svfiprintf_r>:
 80037fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003800:	4698      	mov	r8, r3
 8003802:	898b      	ldrh	r3, [r1, #12]
 8003804:	4607      	mov	r7, r0
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	460d      	mov	r5, r1
 800380a:	4614      	mov	r4, r2
 800380c:	b09d      	sub	sp, #116	; 0x74
 800380e:	d50e      	bpl.n	800382e <_svfiprintf_r+0x32>
 8003810:	690b      	ldr	r3, [r1, #16]
 8003812:	b963      	cbnz	r3, 800382e <_svfiprintf_r+0x32>
 8003814:	2140      	movs	r1, #64	; 0x40
 8003816:	f000 fb09 	bl	8003e2c <_malloc_r>
 800381a:	6028      	str	r0, [r5, #0]
 800381c:	6128      	str	r0, [r5, #16]
 800381e:	b920      	cbnz	r0, 800382a <_svfiprintf_r+0x2e>
 8003820:	230c      	movs	r3, #12
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	f04f 30ff 	mov.w	r0, #4294967295
 8003828:	e0d1      	b.n	80039ce <_svfiprintf_r+0x1d2>
 800382a:	2340      	movs	r3, #64	; 0x40
 800382c:	616b      	str	r3, [r5, #20]
 800382e:	2300      	movs	r3, #0
 8003830:	9309      	str	r3, [sp, #36]	; 0x24
 8003832:	2320      	movs	r3, #32
 8003834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003838:	2330      	movs	r3, #48	; 0x30
 800383a:	f04f 0901 	mov.w	r9, #1
 800383e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003842:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80039e8 <_svfiprintf_r+0x1ec>
 8003846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800384a:	4623      	mov	r3, r4
 800384c:	469a      	mov	sl, r3
 800384e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003852:	b10a      	cbz	r2, 8003858 <_svfiprintf_r+0x5c>
 8003854:	2a25      	cmp	r2, #37	; 0x25
 8003856:	d1f9      	bne.n	800384c <_svfiprintf_r+0x50>
 8003858:	ebba 0b04 	subs.w	fp, sl, r4
 800385c:	d00b      	beq.n	8003876 <_svfiprintf_r+0x7a>
 800385e:	465b      	mov	r3, fp
 8003860:	4622      	mov	r2, r4
 8003862:	4629      	mov	r1, r5
 8003864:	4638      	mov	r0, r7
 8003866:	f7ff ff6d 	bl	8003744 <__ssputs_r>
 800386a:	3001      	adds	r0, #1
 800386c:	f000 80aa 	beq.w	80039c4 <_svfiprintf_r+0x1c8>
 8003870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003872:	445a      	add	r2, fp
 8003874:	9209      	str	r2, [sp, #36]	; 0x24
 8003876:	f89a 3000 	ldrb.w	r3, [sl]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80a2 	beq.w	80039c4 <_svfiprintf_r+0x1c8>
 8003880:	2300      	movs	r3, #0
 8003882:	f04f 32ff 	mov.w	r2, #4294967295
 8003886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800388a:	f10a 0a01 	add.w	sl, sl, #1
 800388e:	9304      	str	r3, [sp, #16]
 8003890:	9307      	str	r3, [sp, #28]
 8003892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003896:	931a      	str	r3, [sp, #104]	; 0x68
 8003898:	4654      	mov	r4, sl
 800389a:	2205      	movs	r2, #5
 800389c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038a0:	4851      	ldr	r0, [pc, #324]	; (80039e8 <_svfiprintf_r+0x1ec>)
 80038a2:	f000 fa41 	bl	8003d28 <memchr>
 80038a6:	9a04      	ldr	r2, [sp, #16]
 80038a8:	b9d8      	cbnz	r0, 80038e2 <_svfiprintf_r+0xe6>
 80038aa:	06d0      	lsls	r0, r2, #27
 80038ac:	bf44      	itt	mi
 80038ae:	2320      	movmi	r3, #32
 80038b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038b4:	0711      	lsls	r1, r2, #28
 80038b6:	bf44      	itt	mi
 80038b8:	232b      	movmi	r3, #43	; 0x2b
 80038ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038be:	f89a 3000 	ldrb.w	r3, [sl]
 80038c2:	2b2a      	cmp	r3, #42	; 0x2a
 80038c4:	d015      	beq.n	80038f2 <_svfiprintf_r+0xf6>
 80038c6:	4654      	mov	r4, sl
 80038c8:	2000      	movs	r0, #0
 80038ca:	f04f 0c0a 	mov.w	ip, #10
 80038ce:	9a07      	ldr	r2, [sp, #28]
 80038d0:	4621      	mov	r1, r4
 80038d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038d6:	3b30      	subs	r3, #48	; 0x30
 80038d8:	2b09      	cmp	r3, #9
 80038da:	d94e      	bls.n	800397a <_svfiprintf_r+0x17e>
 80038dc:	b1b0      	cbz	r0, 800390c <_svfiprintf_r+0x110>
 80038de:	9207      	str	r2, [sp, #28]
 80038e0:	e014      	b.n	800390c <_svfiprintf_r+0x110>
 80038e2:	eba0 0308 	sub.w	r3, r0, r8
 80038e6:	fa09 f303 	lsl.w	r3, r9, r3
 80038ea:	4313      	orrs	r3, r2
 80038ec:	46a2      	mov	sl, r4
 80038ee:	9304      	str	r3, [sp, #16]
 80038f0:	e7d2      	b.n	8003898 <_svfiprintf_r+0x9c>
 80038f2:	9b03      	ldr	r3, [sp, #12]
 80038f4:	1d19      	adds	r1, r3, #4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	9103      	str	r1, [sp, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	bfbb      	ittet	lt
 80038fe:	425b      	neglt	r3, r3
 8003900:	f042 0202 	orrlt.w	r2, r2, #2
 8003904:	9307      	strge	r3, [sp, #28]
 8003906:	9307      	strlt	r3, [sp, #28]
 8003908:	bfb8      	it	lt
 800390a:	9204      	strlt	r2, [sp, #16]
 800390c:	7823      	ldrb	r3, [r4, #0]
 800390e:	2b2e      	cmp	r3, #46	; 0x2e
 8003910:	d10c      	bne.n	800392c <_svfiprintf_r+0x130>
 8003912:	7863      	ldrb	r3, [r4, #1]
 8003914:	2b2a      	cmp	r3, #42	; 0x2a
 8003916:	d135      	bne.n	8003984 <_svfiprintf_r+0x188>
 8003918:	9b03      	ldr	r3, [sp, #12]
 800391a:	3402      	adds	r4, #2
 800391c:	1d1a      	adds	r2, r3, #4
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	9203      	str	r2, [sp, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	bfb8      	it	lt
 8003926:	f04f 33ff 	movlt.w	r3, #4294967295
 800392a:	9305      	str	r3, [sp, #20]
 800392c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80039f8 <_svfiprintf_r+0x1fc>
 8003930:	2203      	movs	r2, #3
 8003932:	4650      	mov	r0, sl
 8003934:	7821      	ldrb	r1, [r4, #0]
 8003936:	f000 f9f7 	bl	8003d28 <memchr>
 800393a:	b140      	cbz	r0, 800394e <_svfiprintf_r+0x152>
 800393c:	2340      	movs	r3, #64	; 0x40
 800393e:	eba0 000a 	sub.w	r0, r0, sl
 8003942:	fa03 f000 	lsl.w	r0, r3, r0
 8003946:	9b04      	ldr	r3, [sp, #16]
 8003948:	3401      	adds	r4, #1
 800394a:	4303      	orrs	r3, r0
 800394c:	9304      	str	r3, [sp, #16]
 800394e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003952:	2206      	movs	r2, #6
 8003954:	4825      	ldr	r0, [pc, #148]	; (80039ec <_svfiprintf_r+0x1f0>)
 8003956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800395a:	f000 f9e5 	bl	8003d28 <memchr>
 800395e:	2800      	cmp	r0, #0
 8003960:	d038      	beq.n	80039d4 <_svfiprintf_r+0x1d8>
 8003962:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <_svfiprintf_r+0x1f4>)
 8003964:	bb1b      	cbnz	r3, 80039ae <_svfiprintf_r+0x1b2>
 8003966:	9b03      	ldr	r3, [sp, #12]
 8003968:	3307      	adds	r3, #7
 800396a:	f023 0307 	bic.w	r3, r3, #7
 800396e:	3308      	adds	r3, #8
 8003970:	9303      	str	r3, [sp, #12]
 8003972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003974:	4433      	add	r3, r6
 8003976:	9309      	str	r3, [sp, #36]	; 0x24
 8003978:	e767      	b.n	800384a <_svfiprintf_r+0x4e>
 800397a:	460c      	mov	r4, r1
 800397c:	2001      	movs	r0, #1
 800397e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003982:	e7a5      	b.n	80038d0 <_svfiprintf_r+0xd4>
 8003984:	2300      	movs	r3, #0
 8003986:	f04f 0c0a 	mov.w	ip, #10
 800398a:	4619      	mov	r1, r3
 800398c:	3401      	adds	r4, #1
 800398e:	9305      	str	r3, [sp, #20]
 8003990:	4620      	mov	r0, r4
 8003992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003996:	3a30      	subs	r2, #48	; 0x30
 8003998:	2a09      	cmp	r2, #9
 800399a:	d903      	bls.n	80039a4 <_svfiprintf_r+0x1a8>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0c5      	beq.n	800392c <_svfiprintf_r+0x130>
 80039a0:	9105      	str	r1, [sp, #20]
 80039a2:	e7c3      	b.n	800392c <_svfiprintf_r+0x130>
 80039a4:	4604      	mov	r4, r0
 80039a6:	2301      	movs	r3, #1
 80039a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80039ac:	e7f0      	b.n	8003990 <_svfiprintf_r+0x194>
 80039ae:	ab03      	add	r3, sp, #12
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	462a      	mov	r2, r5
 80039b4:	4638      	mov	r0, r7
 80039b6:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <_svfiprintf_r+0x1f8>)
 80039b8:	a904      	add	r1, sp, #16
 80039ba:	f3af 8000 	nop.w
 80039be:	1c42      	adds	r2, r0, #1
 80039c0:	4606      	mov	r6, r0
 80039c2:	d1d6      	bne.n	8003972 <_svfiprintf_r+0x176>
 80039c4:	89ab      	ldrh	r3, [r5, #12]
 80039c6:	065b      	lsls	r3, r3, #25
 80039c8:	f53f af2c 	bmi.w	8003824 <_svfiprintf_r+0x28>
 80039cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039ce:	b01d      	add	sp, #116	; 0x74
 80039d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d4:	ab03      	add	r3, sp, #12
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	462a      	mov	r2, r5
 80039da:	4638      	mov	r0, r7
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <_svfiprintf_r+0x1f8>)
 80039de:	a904      	add	r1, sp, #16
 80039e0:	f000 f87c 	bl	8003adc <_printf_i>
 80039e4:	e7eb      	b.n	80039be <_svfiprintf_r+0x1c2>
 80039e6:	bf00      	nop
 80039e8:	08003ffe 	.word	0x08003ffe
 80039ec:	08004008 	.word	0x08004008
 80039f0:	00000000 	.word	0x00000000
 80039f4:	08003745 	.word	0x08003745
 80039f8:	08004004 	.word	0x08004004

080039fc <_printf_common>:
 80039fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a00:	4616      	mov	r6, r2
 8003a02:	4699      	mov	r9, r3
 8003a04:	688a      	ldr	r2, [r1, #8]
 8003a06:	690b      	ldr	r3, [r1, #16]
 8003a08:	4607      	mov	r7, r0
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	bfb8      	it	lt
 8003a0e:	4613      	movlt	r3, r2
 8003a10:	6033      	str	r3, [r6, #0]
 8003a12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a16:	460c      	mov	r4, r1
 8003a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a1c:	b10a      	cbz	r2, 8003a22 <_printf_common+0x26>
 8003a1e:	3301      	adds	r3, #1
 8003a20:	6033      	str	r3, [r6, #0]
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	0699      	lsls	r1, r3, #26
 8003a26:	bf42      	ittt	mi
 8003a28:	6833      	ldrmi	r3, [r6, #0]
 8003a2a:	3302      	addmi	r3, #2
 8003a2c:	6033      	strmi	r3, [r6, #0]
 8003a2e:	6825      	ldr	r5, [r4, #0]
 8003a30:	f015 0506 	ands.w	r5, r5, #6
 8003a34:	d106      	bne.n	8003a44 <_printf_common+0x48>
 8003a36:	f104 0a19 	add.w	sl, r4, #25
 8003a3a:	68e3      	ldr	r3, [r4, #12]
 8003a3c:	6832      	ldr	r2, [r6, #0]
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	42ab      	cmp	r3, r5
 8003a42:	dc28      	bgt.n	8003a96 <_printf_common+0x9a>
 8003a44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a48:	1e13      	subs	r3, r2, #0
 8003a4a:	6822      	ldr	r2, [r4, #0]
 8003a4c:	bf18      	it	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	0692      	lsls	r2, r2, #26
 8003a52:	d42d      	bmi.n	8003ab0 <_printf_common+0xb4>
 8003a54:	4649      	mov	r1, r9
 8003a56:	4638      	mov	r0, r7
 8003a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a5c:	47c0      	blx	r8
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d020      	beq.n	8003aa4 <_printf_common+0xa8>
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	68e5      	ldr	r5, [r4, #12]
 8003a66:	f003 0306 	and.w	r3, r3, #6
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	bf18      	it	ne
 8003a6e:	2500      	movne	r5, #0
 8003a70:	6832      	ldr	r2, [r6, #0]
 8003a72:	f04f 0600 	mov.w	r6, #0
 8003a76:	68a3      	ldr	r3, [r4, #8]
 8003a78:	bf08      	it	eq
 8003a7a:	1aad      	subeq	r5, r5, r2
 8003a7c:	6922      	ldr	r2, [r4, #16]
 8003a7e:	bf08      	it	eq
 8003a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a84:	4293      	cmp	r3, r2
 8003a86:	bfc4      	itt	gt
 8003a88:	1a9b      	subgt	r3, r3, r2
 8003a8a:	18ed      	addgt	r5, r5, r3
 8003a8c:	341a      	adds	r4, #26
 8003a8e:	42b5      	cmp	r5, r6
 8003a90:	d11a      	bne.n	8003ac8 <_printf_common+0xcc>
 8003a92:	2000      	movs	r0, #0
 8003a94:	e008      	b.n	8003aa8 <_printf_common+0xac>
 8003a96:	2301      	movs	r3, #1
 8003a98:	4652      	mov	r2, sl
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	47c0      	blx	r8
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d103      	bne.n	8003aac <_printf_common+0xb0>
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aac:	3501      	adds	r5, #1
 8003aae:	e7c4      	b.n	8003a3a <_printf_common+0x3e>
 8003ab0:	2030      	movs	r0, #48	; 0x30
 8003ab2:	18e1      	adds	r1, r4, r3
 8003ab4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003abe:	4422      	add	r2, r4
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ac6:	e7c5      	b.n	8003a54 <_printf_common+0x58>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	4622      	mov	r2, r4
 8003acc:	4649      	mov	r1, r9
 8003ace:	4638      	mov	r0, r7
 8003ad0:	47c0      	blx	r8
 8003ad2:	3001      	adds	r0, #1
 8003ad4:	d0e6      	beq.n	8003aa4 <_printf_common+0xa8>
 8003ad6:	3601      	adds	r6, #1
 8003ad8:	e7d9      	b.n	8003a8e <_printf_common+0x92>
	...

08003adc <_printf_i>:
 8003adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	7e27      	ldrb	r7, [r4, #24]
 8003ae4:	4691      	mov	r9, r2
 8003ae6:	2f78      	cmp	r7, #120	; 0x78
 8003ae8:	4680      	mov	r8, r0
 8003aea:	469a      	mov	sl, r3
 8003aec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003aee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003af2:	d807      	bhi.n	8003b04 <_printf_i+0x28>
 8003af4:	2f62      	cmp	r7, #98	; 0x62
 8003af6:	d80a      	bhi.n	8003b0e <_printf_i+0x32>
 8003af8:	2f00      	cmp	r7, #0
 8003afa:	f000 80d9 	beq.w	8003cb0 <_printf_i+0x1d4>
 8003afe:	2f58      	cmp	r7, #88	; 0x58
 8003b00:	f000 80a4 	beq.w	8003c4c <_printf_i+0x170>
 8003b04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b0c:	e03a      	b.n	8003b84 <_printf_i+0xa8>
 8003b0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b12:	2b15      	cmp	r3, #21
 8003b14:	d8f6      	bhi.n	8003b04 <_printf_i+0x28>
 8003b16:	a001      	add	r0, pc, #4	; (adr r0, 8003b1c <_printf_i+0x40>)
 8003b18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b1c:	08003b75 	.word	0x08003b75
 8003b20:	08003b89 	.word	0x08003b89
 8003b24:	08003b05 	.word	0x08003b05
 8003b28:	08003b05 	.word	0x08003b05
 8003b2c:	08003b05 	.word	0x08003b05
 8003b30:	08003b05 	.word	0x08003b05
 8003b34:	08003b89 	.word	0x08003b89
 8003b38:	08003b05 	.word	0x08003b05
 8003b3c:	08003b05 	.word	0x08003b05
 8003b40:	08003b05 	.word	0x08003b05
 8003b44:	08003b05 	.word	0x08003b05
 8003b48:	08003c97 	.word	0x08003c97
 8003b4c:	08003bb9 	.word	0x08003bb9
 8003b50:	08003c79 	.word	0x08003c79
 8003b54:	08003b05 	.word	0x08003b05
 8003b58:	08003b05 	.word	0x08003b05
 8003b5c:	08003cb9 	.word	0x08003cb9
 8003b60:	08003b05 	.word	0x08003b05
 8003b64:	08003bb9 	.word	0x08003bb9
 8003b68:	08003b05 	.word	0x08003b05
 8003b6c:	08003b05 	.word	0x08003b05
 8003b70:	08003c81 	.word	0x08003c81
 8003b74:	680b      	ldr	r3, [r1, #0]
 8003b76:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b7a:	1d1a      	adds	r2, r3, #4
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	600a      	str	r2, [r1, #0]
 8003b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0a4      	b.n	8003cd2 <_printf_i+0x1f6>
 8003b88:	6825      	ldr	r5, [r4, #0]
 8003b8a:	6808      	ldr	r0, [r1, #0]
 8003b8c:	062e      	lsls	r6, r5, #24
 8003b8e:	f100 0304 	add.w	r3, r0, #4
 8003b92:	d50a      	bpl.n	8003baa <_printf_i+0xce>
 8003b94:	6805      	ldr	r5, [r0, #0]
 8003b96:	600b      	str	r3, [r1, #0]
 8003b98:	2d00      	cmp	r5, #0
 8003b9a:	da03      	bge.n	8003ba4 <_printf_i+0xc8>
 8003b9c:	232d      	movs	r3, #45	; 0x2d
 8003b9e:	426d      	negs	r5, r5
 8003ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ba4:	230a      	movs	r3, #10
 8003ba6:	485e      	ldr	r0, [pc, #376]	; (8003d20 <_printf_i+0x244>)
 8003ba8:	e019      	b.n	8003bde <_printf_i+0x102>
 8003baa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003bae:	6805      	ldr	r5, [r0, #0]
 8003bb0:	600b      	str	r3, [r1, #0]
 8003bb2:	bf18      	it	ne
 8003bb4:	b22d      	sxthne	r5, r5
 8003bb6:	e7ef      	b.n	8003b98 <_printf_i+0xbc>
 8003bb8:	680b      	ldr	r3, [r1, #0]
 8003bba:	6825      	ldr	r5, [r4, #0]
 8003bbc:	1d18      	adds	r0, r3, #4
 8003bbe:	6008      	str	r0, [r1, #0]
 8003bc0:	0628      	lsls	r0, r5, #24
 8003bc2:	d501      	bpl.n	8003bc8 <_printf_i+0xec>
 8003bc4:	681d      	ldr	r5, [r3, #0]
 8003bc6:	e002      	b.n	8003bce <_printf_i+0xf2>
 8003bc8:	0669      	lsls	r1, r5, #25
 8003bca:	d5fb      	bpl.n	8003bc4 <_printf_i+0xe8>
 8003bcc:	881d      	ldrh	r5, [r3, #0]
 8003bce:	2f6f      	cmp	r7, #111	; 0x6f
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2308      	moveq	r3, #8
 8003bd4:	230a      	movne	r3, #10
 8003bd6:	4852      	ldr	r0, [pc, #328]	; (8003d20 <_printf_i+0x244>)
 8003bd8:	2100      	movs	r1, #0
 8003bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bde:	6866      	ldr	r6, [r4, #4]
 8003be0:	2e00      	cmp	r6, #0
 8003be2:	bfa8      	it	ge
 8003be4:	6821      	ldrge	r1, [r4, #0]
 8003be6:	60a6      	str	r6, [r4, #8]
 8003be8:	bfa4      	itt	ge
 8003bea:	f021 0104 	bicge.w	r1, r1, #4
 8003bee:	6021      	strge	r1, [r4, #0]
 8003bf0:	b90d      	cbnz	r5, 8003bf6 <_printf_i+0x11a>
 8003bf2:	2e00      	cmp	r6, #0
 8003bf4:	d04d      	beq.n	8003c92 <_printf_i+0x1b6>
 8003bf6:	4616      	mov	r6, r2
 8003bf8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bfc:	fb03 5711 	mls	r7, r3, r1, r5
 8003c00:	5dc7      	ldrb	r7, [r0, r7]
 8003c02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c06:	462f      	mov	r7, r5
 8003c08:	42bb      	cmp	r3, r7
 8003c0a:	460d      	mov	r5, r1
 8003c0c:	d9f4      	bls.n	8003bf8 <_printf_i+0x11c>
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d10b      	bne.n	8003c2a <_printf_i+0x14e>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	07df      	lsls	r7, r3, #31
 8003c16:	d508      	bpl.n	8003c2a <_printf_i+0x14e>
 8003c18:	6923      	ldr	r3, [r4, #16]
 8003c1a:	6861      	ldr	r1, [r4, #4]
 8003c1c:	4299      	cmp	r1, r3
 8003c1e:	bfde      	ittt	le
 8003c20:	2330      	movle	r3, #48	; 0x30
 8003c22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c2a:	1b92      	subs	r2, r2, r6
 8003c2c:	6122      	str	r2, [r4, #16]
 8003c2e:	464b      	mov	r3, r9
 8003c30:	4621      	mov	r1, r4
 8003c32:	4640      	mov	r0, r8
 8003c34:	f8cd a000 	str.w	sl, [sp]
 8003c38:	aa03      	add	r2, sp, #12
 8003c3a:	f7ff fedf 	bl	80039fc <_printf_common>
 8003c3e:	3001      	adds	r0, #1
 8003c40:	d14c      	bne.n	8003cdc <_printf_i+0x200>
 8003c42:	f04f 30ff 	mov.w	r0, #4294967295
 8003c46:	b004      	add	sp, #16
 8003c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c4c:	4834      	ldr	r0, [pc, #208]	; (8003d20 <_printf_i+0x244>)
 8003c4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c52:	680e      	ldr	r6, [r1, #0]
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c5a:	061f      	lsls	r7, r3, #24
 8003c5c:	600e      	str	r6, [r1, #0]
 8003c5e:	d514      	bpl.n	8003c8a <_printf_i+0x1ae>
 8003c60:	07d9      	lsls	r1, r3, #31
 8003c62:	bf44      	itt	mi
 8003c64:	f043 0320 	orrmi.w	r3, r3, #32
 8003c68:	6023      	strmi	r3, [r4, #0]
 8003c6a:	b91d      	cbnz	r5, 8003c74 <_printf_i+0x198>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	f023 0320 	bic.w	r3, r3, #32
 8003c72:	6023      	str	r3, [r4, #0]
 8003c74:	2310      	movs	r3, #16
 8003c76:	e7af      	b.n	8003bd8 <_printf_i+0xfc>
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	f043 0320 	orr.w	r3, r3, #32
 8003c7e:	6023      	str	r3, [r4, #0]
 8003c80:	2378      	movs	r3, #120	; 0x78
 8003c82:	4828      	ldr	r0, [pc, #160]	; (8003d24 <_printf_i+0x248>)
 8003c84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c88:	e7e3      	b.n	8003c52 <_printf_i+0x176>
 8003c8a:	065e      	lsls	r6, r3, #25
 8003c8c:	bf48      	it	mi
 8003c8e:	b2ad      	uxthmi	r5, r5
 8003c90:	e7e6      	b.n	8003c60 <_printf_i+0x184>
 8003c92:	4616      	mov	r6, r2
 8003c94:	e7bb      	b.n	8003c0e <_printf_i+0x132>
 8003c96:	680b      	ldr	r3, [r1, #0]
 8003c98:	6826      	ldr	r6, [r4, #0]
 8003c9a:	1d1d      	adds	r5, r3, #4
 8003c9c:	6960      	ldr	r0, [r4, #20]
 8003c9e:	600d      	str	r5, [r1, #0]
 8003ca0:	0635      	lsls	r5, r6, #24
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	d501      	bpl.n	8003caa <_printf_i+0x1ce>
 8003ca6:	6018      	str	r0, [r3, #0]
 8003ca8:	e002      	b.n	8003cb0 <_printf_i+0x1d4>
 8003caa:	0671      	lsls	r1, r6, #25
 8003cac:	d5fb      	bpl.n	8003ca6 <_printf_i+0x1ca>
 8003cae:	8018      	strh	r0, [r3, #0]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	4616      	mov	r6, r2
 8003cb4:	6123      	str	r3, [r4, #16]
 8003cb6:	e7ba      	b.n	8003c2e <_printf_i+0x152>
 8003cb8:	680b      	ldr	r3, [r1, #0]
 8003cba:	1d1a      	adds	r2, r3, #4
 8003cbc:	600a      	str	r2, [r1, #0]
 8003cbe:	681e      	ldr	r6, [r3, #0]
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	6862      	ldr	r2, [r4, #4]
 8003cc6:	f000 f82f 	bl	8003d28 <memchr>
 8003cca:	b108      	cbz	r0, 8003cd0 <_printf_i+0x1f4>
 8003ccc:	1b80      	subs	r0, r0, r6
 8003cce:	6060      	str	r0, [r4, #4]
 8003cd0:	6863      	ldr	r3, [r4, #4]
 8003cd2:	6123      	str	r3, [r4, #16]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cda:	e7a8      	b.n	8003c2e <_printf_i+0x152>
 8003cdc:	4632      	mov	r2, r6
 8003cde:	4649      	mov	r1, r9
 8003ce0:	4640      	mov	r0, r8
 8003ce2:	6923      	ldr	r3, [r4, #16]
 8003ce4:	47d0      	blx	sl
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	d0ab      	beq.n	8003c42 <_printf_i+0x166>
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	079b      	lsls	r3, r3, #30
 8003cee:	d413      	bmi.n	8003d18 <_printf_i+0x23c>
 8003cf0:	68e0      	ldr	r0, [r4, #12]
 8003cf2:	9b03      	ldr	r3, [sp, #12]
 8003cf4:	4298      	cmp	r0, r3
 8003cf6:	bfb8      	it	lt
 8003cf8:	4618      	movlt	r0, r3
 8003cfa:	e7a4      	b.n	8003c46 <_printf_i+0x16a>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	4632      	mov	r2, r6
 8003d00:	4649      	mov	r1, r9
 8003d02:	4640      	mov	r0, r8
 8003d04:	47d0      	blx	sl
 8003d06:	3001      	adds	r0, #1
 8003d08:	d09b      	beq.n	8003c42 <_printf_i+0x166>
 8003d0a:	3501      	adds	r5, #1
 8003d0c:	68e3      	ldr	r3, [r4, #12]
 8003d0e:	9903      	ldr	r1, [sp, #12]
 8003d10:	1a5b      	subs	r3, r3, r1
 8003d12:	42ab      	cmp	r3, r5
 8003d14:	dcf2      	bgt.n	8003cfc <_printf_i+0x220>
 8003d16:	e7eb      	b.n	8003cf0 <_printf_i+0x214>
 8003d18:	2500      	movs	r5, #0
 8003d1a:	f104 0619 	add.w	r6, r4, #25
 8003d1e:	e7f5      	b.n	8003d0c <_printf_i+0x230>
 8003d20:	0800400f 	.word	0x0800400f
 8003d24:	08004020 	.word	0x08004020

08003d28 <memchr>:
 8003d28:	4603      	mov	r3, r0
 8003d2a:	b510      	push	{r4, lr}
 8003d2c:	b2c9      	uxtb	r1, r1
 8003d2e:	4402      	add	r2, r0
 8003d30:	4293      	cmp	r3, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	d101      	bne.n	8003d3a <memchr+0x12>
 8003d36:	2000      	movs	r0, #0
 8003d38:	e003      	b.n	8003d42 <memchr+0x1a>
 8003d3a:	7804      	ldrb	r4, [r0, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	428c      	cmp	r4, r1
 8003d40:	d1f6      	bne.n	8003d30 <memchr+0x8>
 8003d42:	bd10      	pop	{r4, pc}

08003d44 <memcpy>:
 8003d44:	440a      	add	r2, r1
 8003d46:	4291      	cmp	r1, r2
 8003d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d4c:	d100      	bne.n	8003d50 <memcpy+0xc>
 8003d4e:	4770      	bx	lr
 8003d50:	b510      	push	{r4, lr}
 8003d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d56:	4291      	cmp	r1, r2
 8003d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d5c:	d1f9      	bne.n	8003d52 <memcpy+0xe>
 8003d5e:	bd10      	pop	{r4, pc}

08003d60 <memmove>:
 8003d60:	4288      	cmp	r0, r1
 8003d62:	b510      	push	{r4, lr}
 8003d64:	eb01 0402 	add.w	r4, r1, r2
 8003d68:	d902      	bls.n	8003d70 <memmove+0x10>
 8003d6a:	4284      	cmp	r4, r0
 8003d6c:	4623      	mov	r3, r4
 8003d6e:	d807      	bhi.n	8003d80 <memmove+0x20>
 8003d70:	1e43      	subs	r3, r0, #1
 8003d72:	42a1      	cmp	r1, r4
 8003d74:	d008      	beq.n	8003d88 <memmove+0x28>
 8003d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d7e:	e7f8      	b.n	8003d72 <memmove+0x12>
 8003d80:	4601      	mov	r1, r0
 8003d82:	4402      	add	r2, r0
 8003d84:	428a      	cmp	r2, r1
 8003d86:	d100      	bne.n	8003d8a <memmove+0x2a>
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d92:	e7f7      	b.n	8003d84 <memmove+0x24>

08003d94 <_free_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4605      	mov	r5, r0
 8003d98:	2900      	cmp	r1, #0
 8003d9a:	d043      	beq.n	8003e24 <_free_r+0x90>
 8003d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003da0:	1f0c      	subs	r4, r1, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bfb8      	it	lt
 8003da6:	18e4      	addlt	r4, r4, r3
 8003da8:	f000 f8d0 	bl	8003f4c <__malloc_lock>
 8003dac:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <_free_r+0x94>)
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	4610      	mov	r0, r2
 8003db2:	b933      	cbnz	r3, 8003dc2 <_free_r+0x2e>
 8003db4:	6063      	str	r3, [r4, #4]
 8003db6:	6014      	str	r4, [r2, #0]
 8003db8:	4628      	mov	r0, r5
 8003dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dbe:	f000 b8cb 	b.w	8003f58 <__malloc_unlock>
 8003dc2:	42a3      	cmp	r3, r4
 8003dc4:	d90a      	bls.n	8003ddc <_free_r+0x48>
 8003dc6:	6821      	ldr	r1, [r4, #0]
 8003dc8:	1862      	adds	r2, r4, r1
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	bf01      	itttt	eq
 8003dce:	681a      	ldreq	r2, [r3, #0]
 8003dd0:	685b      	ldreq	r3, [r3, #4]
 8003dd2:	1852      	addeq	r2, r2, r1
 8003dd4:	6022      	streq	r2, [r4, #0]
 8003dd6:	6063      	str	r3, [r4, #4]
 8003dd8:	6004      	str	r4, [r0, #0]
 8003dda:	e7ed      	b.n	8003db8 <_free_r+0x24>
 8003ddc:	461a      	mov	r2, r3
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	b10b      	cbz	r3, 8003de6 <_free_r+0x52>
 8003de2:	42a3      	cmp	r3, r4
 8003de4:	d9fa      	bls.n	8003ddc <_free_r+0x48>
 8003de6:	6811      	ldr	r1, [r2, #0]
 8003de8:	1850      	adds	r0, r2, r1
 8003dea:	42a0      	cmp	r0, r4
 8003dec:	d10b      	bne.n	8003e06 <_free_r+0x72>
 8003dee:	6820      	ldr	r0, [r4, #0]
 8003df0:	4401      	add	r1, r0
 8003df2:	1850      	adds	r0, r2, r1
 8003df4:	4283      	cmp	r3, r0
 8003df6:	6011      	str	r1, [r2, #0]
 8003df8:	d1de      	bne.n	8003db8 <_free_r+0x24>
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4401      	add	r1, r0
 8003e00:	6011      	str	r1, [r2, #0]
 8003e02:	6053      	str	r3, [r2, #4]
 8003e04:	e7d8      	b.n	8003db8 <_free_r+0x24>
 8003e06:	d902      	bls.n	8003e0e <_free_r+0x7a>
 8003e08:	230c      	movs	r3, #12
 8003e0a:	602b      	str	r3, [r5, #0]
 8003e0c:	e7d4      	b.n	8003db8 <_free_r+0x24>
 8003e0e:	6820      	ldr	r0, [r4, #0]
 8003e10:	1821      	adds	r1, r4, r0
 8003e12:	428b      	cmp	r3, r1
 8003e14:	bf01      	itttt	eq
 8003e16:	6819      	ldreq	r1, [r3, #0]
 8003e18:	685b      	ldreq	r3, [r3, #4]
 8003e1a:	1809      	addeq	r1, r1, r0
 8003e1c:	6021      	streq	r1, [r4, #0]
 8003e1e:	6063      	str	r3, [r4, #4]
 8003e20:	6054      	str	r4, [r2, #4]
 8003e22:	e7c9      	b.n	8003db8 <_free_r+0x24>
 8003e24:	bd38      	pop	{r3, r4, r5, pc}
 8003e26:	bf00      	nop
 8003e28:	20000180 	.word	0x20000180

08003e2c <_malloc_r>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	1ccd      	adds	r5, r1, #3
 8003e30:	f025 0503 	bic.w	r5, r5, #3
 8003e34:	3508      	adds	r5, #8
 8003e36:	2d0c      	cmp	r5, #12
 8003e38:	bf38      	it	cc
 8003e3a:	250c      	movcc	r5, #12
 8003e3c:	2d00      	cmp	r5, #0
 8003e3e:	4606      	mov	r6, r0
 8003e40:	db01      	blt.n	8003e46 <_malloc_r+0x1a>
 8003e42:	42a9      	cmp	r1, r5
 8003e44:	d903      	bls.n	8003e4e <_malloc_r+0x22>
 8003e46:	230c      	movs	r3, #12
 8003e48:	6033      	str	r3, [r6, #0]
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e4e:	f000 f87d 	bl	8003f4c <__malloc_lock>
 8003e52:	4921      	ldr	r1, [pc, #132]	; (8003ed8 <_malloc_r+0xac>)
 8003e54:	680a      	ldr	r2, [r1, #0]
 8003e56:	4614      	mov	r4, r2
 8003e58:	b99c      	cbnz	r4, 8003e82 <_malloc_r+0x56>
 8003e5a:	4f20      	ldr	r7, [pc, #128]	; (8003edc <_malloc_r+0xb0>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	b923      	cbnz	r3, 8003e6a <_malloc_r+0x3e>
 8003e60:	4621      	mov	r1, r4
 8003e62:	4630      	mov	r0, r6
 8003e64:	f000 f862 	bl	8003f2c <_sbrk_r>
 8003e68:	6038      	str	r0, [r7, #0]
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f000 f85d 	bl	8003f2c <_sbrk_r>
 8003e72:	1c43      	adds	r3, r0, #1
 8003e74:	d123      	bne.n	8003ebe <_malloc_r+0x92>
 8003e76:	230c      	movs	r3, #12
 8003e78:	4630      	mov	r0, r6
 8003e7a:	6033      	str	r3, [r6, #0]
 8003e7c:	f000 f86c 	bl	8003f58 <__malloc_unlock>
 8003e80:	e7e3      	b.n	8003e4a <_malloc_r+0x1e>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	1b5b      	subs	r3, r3, r5
 8003e86:	d417      	bmi.n	8003eb8 <_malloc_r+0x8c>
 8003e88:	2b0b      	cmp	r3, #11
 8003e8a:	d903      	bls.n	8003e94 <_malloc_r+0x68>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	441c      	add	r4, r3
 8003e90:	6025      	str	r5, [r4, #0]
 8003e92:	e004      	b.n	8003e9e <_malloc_r+0x72>
 8003e94:	6863      	ldr	r3, [r4, #4]
 8003e96:	42a2      	cmp	r2, r4
 8003e98:	bf0c      	ite	eq
 8003e9a:	600b      	streq	r3, [r1, #0]
 8003e9c:	6053      	strne	r3, [r2, #4]
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f000 f85a 	bl	8003f58 <__malloc_unlock>
 8003ea4:	f104 000b 	add.w	r0, r4, #11
 8003ea8:	1d23      	adds	r3, r4, #4
 8003eaa:	f020 0007 	bic.w	r0, r0, #7
 8003eae:	1ac2      	subs	r2, r0, r3
 8003eb0:	d0cc      	beq.n	8003e4c <_malloc_r+0x20>
 8003eb2:	1a1b      	subs	r3, r3, r0
 8003eb4:	50a3      	str	r3, [r4, r2]
 8003eb6:	e7c9      	b.n	8003e4c <_malloc_r+0x20>
 8003eb8:	4622      	mov	r2, r4
 8003eba:	6864      	ldr	r4, [r4, #4]
 8003ebc:	e7cc      	b.n	8003e58 <_malloc_r+0x2c>
 8003ebe:	1cc4      	adds	r4, r0, #3
 8003ec0:	f024 0403 	bic.w	r4, r4, #3
 8003ec4:	42a0      	cmp	r0, r4
 8003ec6:	d0e3      	beq.n	8003e90 <_malloc_r+0x64>
 8003ec8:	1a21      	subs	r1, r4, r0
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f000 f82e 	bl	8003f2c <_sbrk_r>
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d1dd      	bne.n	8003e90 <_malloc_r+0x64>
 8003ed4:	e7cf      	b.n	8003e76 <_malloc_r+0x4a>
 8003ed6:	bf00      	nop
 8003ed8:	20000180 	.word	0x20000180
 8003edc:	20000184 	.word	0x20000184

08003ee0 <_realloc_r>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	4607      	mov	r7, r0
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	460e      	mov	r6, r1
 8003ee8:	b921      	cbnz	r1, 8003ef4 <_realloc_r+0x14>
 8003eea:	4611      	mov	r1, r2
 8003eec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ef0:	f7ff bf9c 	b.w	8003e2c <_malloc_r>
 8003ef4:	b922      	cbnz	r2, 8003f00 <_realloc_r+0x20>
 8003ef6:	f7ff ff4d 	bl	8003d94 <_free_r>
 8003efa:	4625      	mov	r5, r4
 8003efc:	4628      	mov	r0, r5
 8003efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f00:	f000 f830 	bl	8003f64 <_malloc_usable_size_r>
 8003f04:	42a0      	cmp	r0, r4
 8003f06:	d20f      	bcs.n	8003f28 <_realloc_r+0x48>
 8003f08:	4621      	mov	r1, r4
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	f7ff ff8e 	bl	8003e2c <_malloc_r>
 8003f10:	4605      	mov	r5, r0
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d0f2      	beq.n	8003efc <_realloc_r+0x1c>
 8003f16:	4631      	mov	r1, r6
 8003f18:	4622      	mov	r2, r4
 8003f1a:	f7ff ff13 	bl	8003d44 <memcpy>
 8003f1e:	4631      	mov	r1, r6
 8003f20:	4638      	mov	r0, r7
 8003f22:	f7ff ff37 	bl	8003d94 <_free_r>
 8003f26:	e7e9      	b.n	8003efc <_realloc_r+0x1c>
 8003f28:	4635      	mov	r5, r6
 8003f2a:	e7e7      	b.n	8003efc <_realloc_r+0x1c>

08003f2c <_sbrk_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	2300      	movs	r3, #0
 8003f30:	4d05      	ldr	r5, [pc, #20]	; (8003f48 <_sbrk_r+0x1c>)
 8003f32:	4604      	mov	r4, r0
 8003f34:	4608      	mov	r0, r1
 8003f36:	602b      	str	r3, [r5, #0]
 8003f38:	f7fc ff90 	bl	8000e5c <_sbrk>
 8003f3c:	1c43      	adds	r3, r0, #1
 8003f3e:	d102      	bne.n	8003f46 <_sbrk_r+0x1a>
 8003f40:	682b      	ldr	r3, [r5, #0]
 8003f42:	b103      	cbz	r3, 8003f46 <_sbrk_r+0x1a>
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	bd38      	pop	{r3, r4, r5, pc}
 8003f48:	20000230 	.word	0x20000230

08003f4c <__malloc_lock>:
 8003f4c:	4801      	ldr	r0, [pc, #4]	; (8003f54 <__malloc_lock+0x8>)
 8003f4e:	f000 b811 	b.w	8003f74 <__retarget_lock_acquire_recursive>
 8003f52:	bf00      	nop
 8003f54:	20000238 	.word	0x20000238

08003f58 <__malloc_unlock>:
 8003f58:	4801      	ldr	r0, [pc, #4]	; (8003f60 <__malloc_unlock+0x8>)
 8003f5a:	f000 b80c 	b.w	8003f76 <__retarget_lock_release_recursive>
 8003f5e:	bf00      	nop
 8003f60:	20000238 	.word	0x20000238

08003f64 <_malloc_usable_size_r>:
 8003f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f68:	1f18      	subs	r0, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bfbc      	itt	lt
 8003f6e:	580b      	ldrlt	r3, [r1, r0]
 8003f70:	18c0      	addlt	r0, r0, r3
 8003f72:	4770      	bx	lr

08003f74 <__retarget_lock_acquire_recursive>:
 8003f74:	4770      	bx	lr

08003f76 <__retarget_lock_release_recursive>:
 8003f76:	4770      	bx	lr

08003f78 <_init>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	bf00      	nop
 8003f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7e:	bc08      	pop	{r3}
 8003f80:	469e      	mov	lr, r3
 8003f82:	4770      	bx	lr

08003f84 <_fini>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	bf00      	nop
 8003f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8a:	bc08      	pop	{r3}
 8003f8c:	469e      	mov	lr, r3
 8003f8e:	4770      	bx	lr
