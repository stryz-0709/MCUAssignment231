
trafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff4  08003ff4  00020128  2**0
                  CONTENTS
  4 .ARM          00000000  08003ff4  08003ff4  00020128  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ff4  08003ff4  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08003ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000128  08004124  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08004124  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d48  00000000  00000000  00020151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c58  00000000  00000000  00034e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00037af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00038848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196a9  00000000  00000000  00039468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117e9  00000000  00000000  00052b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b283  00000000  00000000  000642fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef57d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003908  00000000  00000000  000ef5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000128 	.word	0x20000128
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f38 	.word	0x08003f38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000012c 	.word	0x2000012c
 8000148:	08003f38 	.word	0x08003f38

0800014c <isButtonPressed>:
int KeyReg1 [4] = {NORMAL_STATE};
int KeyReg2 [4] = {NORMAL_STATE};
int KeyReg3 [4] = {NORMAL_STATE};
int TimerForKeyPress [4] = {500};

int isButtonPressed(int button){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[button]){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d006      	beq.n	800016e <isButtonPressed+0x22>
		button_flag[button] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000144 	.word	0x20000144

08000180 <subKeyProcess>:

void subKeyProcess(int button){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[button] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000144 	.word	0x20000144

080001a0 <getKeyInput>:


void getKeyInput(int button){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	KeyReg0[button] = KeyReg1[button];
 80001a8:	4a37      	ldr	r2, [pc, #220]	; (8000288 <getKeyInput+0xe8>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	4936      	ldr	r1, [pc, #216]	; (800028c <getKeyInput+0xec>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[button] = KeyReg2[button];
 80001b8:	4a35      	ldr	r2, [pc, #212]	; (8000290 <getKeyInput+0xf0>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4931      	ldr	r1, [pc, #196]	; (8000288 <getKeyInput+0xe8>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[button] = HAL_GPIO_ReadPin(BUTTON_PORT[button], BUTTON_PIN[button]);
 80001c8:	4a32      	ldr	r2, [pc, #200]	; (8000294 <getKeyInput+0xf4>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d0:	4931      	ldr	r1, [pc, #196]	; (8000298 <getKeyInput+0xf8>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001d8:	4619      	mov	r1, r3
 80001da:	4610      	mov	r0, r2
 80001dc:	f001 fbc8 	bl	8001970 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4619      	mov	r1, r3
 80001e4:	4a2a      	ldr	r2, [pc, #168]	; (8000290 <getKeyInput+0xf0>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if ((KeyReg0[button] == KeyReg1[button]) && (KeyReg1[button] == KeyReg2[button])){
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <getKeyInput+0xec>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	4924      	ldr	r1, [pc, #144]	; (8000288 <getKeyInput+0xe8>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d13f      	bne.n	8000280 <getKeyInput+0xe0>
 8000200:	4a21      	ldr	r2, [pc, #132]	; (8000288 <getKeyInput+0xe8>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4921      	ldr	r1, [pc, #132]	; (8000290 <getKeyInput+0xf0>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000210:	429a      	cmp	r2, r3
 8000212:	d135      	bne.n	8000280 <getKeyInput+0xe0>
		if (KeyReg3[button] != KeyReg2[button]){
 8000214:	4a21      	ldr	r2, [pc, #132]	; (800029c <getKeyInput+0xfc>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	491c      	ldr	r1, [pc, #112]	; (8000290 <getKeyInput+0xf0>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000224:	429a      	cmp	r2, r3
 8000226:	d017      	beq.n	8000258 <getKeyInput+0xb8>
			KeyReg3[button] = KeyReg2[button];
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <getKeyInput+0xf0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	491a      	ldr	r1, [pc, #104]	; (800029c <getKeyInput+0xfc>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg2[button] == PRESSED_STATE){
 8000238:	4a15      	ldr	r2, [pc, #84]	; (8000290 <getKeyInput+0xf0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d11d      	bne.n	8000280 <getKeyInput+0xe0>
				subKeyProcess(button);
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f7ff ff9b 	bl	8000180 <subKeyProcess>
				TimerForKeyPress[button] = 500;
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <getKeyInput+0x100>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
				KeyReg3[button] = NORMAL_STATE;
			}
		}
	}
}
 8000256:	e013      	b.n	8000280 <getKeyInput+0xe0>
			TimerForKeyPress[button]--;
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <getKeyInput+0x100>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	1e5a      	subs	r2, r3, #1
 8000262:	490f      	ldr	r1, [pc, #60]	; (80002a0 <getKeyInput+0x100>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
 800026a:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <getKeyInput+0x100>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	dc04      	bgt.n	8000280 <getKeyInput+0xe0>
				KeyReg3[button] = NORMAL_STATE;
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <getKeyInput+0xfc>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000028 	.word	0x20000028
 800028c:	20000018 	.word	0x20000018
 8000290:	20000038 	.word	0x20000038
 8000294:	20000000 	.word	0x20000000
 8000298:	20000010 	.word	0x20000010
 800029c:	20000048 	.word	0x20000048
 80002a0:	20000058 	.word	0x20000058

080002a4 <displayCountdown>:

#include "fsm_automatic.h"

int initMode[3] = {RED_MODE, GREEN_MODE, EDIT_MODE};

void displayCountdown(int lane){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	if (timer_counter[lane] % 100 == 0){
 80002ac:	4a11      	ldr	r2, [pc, #68]	; (80002f4 <displayCountdown+0x50>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <displayCountdown+0x54>)
 80002b6:	fb83 1302 	smull	r1, r3, r3, r2
 80002ba:	1159      	asrs	r1, r3, #5
 80002bc:	17d3      	asrs	r3, r2, #31
 80002be:	1acb      	subs	r3, r1, r3
 80002c0:	2164      	movs	r1, #100	; 0x64
 80002c2:	fb01 f303 	mul.w	r3, r1, r3
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d10e      	bne.n	80002ea <displayCountdown+0x46>
		int remaining_time = timer_counter[lane] / 100;
 80002cc:	4a09      	ldr	r2, [pc, #36]	; (80002f4 <displayCountdown+0x50>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	4a08      	ldr	r2, [pc, #32]	; (80002f8 <displayCountdown+0x54>)
 80002d6:	fb82 1203 	smull	r1, r2, r2, r3
 80002da:	1152      	asrs	r2, r2, #5
 80002dc:	17db      	asrs	r3, r3, #31
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	60fb      	str	r3, [r7, #12]
		displayUART(AUTO_MODE, remaining_time);
 80002e2:	68f9      	ldr	r1, [r7, #12]
 80002e4:	200b      	movs	r0, #11
 80002e6:	f000 fee3 	bl	80010b0 <displayUART>
	}
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	2000015c 	.word	0x2000015c
 80002f8:	51eb851f 	.word	0x51eb851f

080002fc <initDuration>:

int initDuration(int lane){
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	return (lane == 1)? GREEN_DURATION : RED_DURATION;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d102      	bne.n	8000310 <initDuration+0x14>
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <initDuration+0x24>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	e001      	b.n	8000314 <initDuration+0x18>
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <initDuration+0x28>)
 8000312:	681b      	ldr	r3, [r3, #0]
}
 8000314:	4618      	mov	r0, r3
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	20000090 	.word	0x20000090
 8000324:	20000088 	.word	0x20000088

08000328 <fsm_automatic_run>:

void fsm_automatic_run(int lane){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	switch(LED_MODE[lane]){
 8000330:	4a60      	ldr	r2, [pc, #384]	; (80004b4 <fsm_automatic_run+0x18c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000338:	3b01      	subs	r3, #1
 800033a:	2b16      	cmp	r3, #22
 800033c:	f200 80af 	bhi.w	800049e <fsm_automatic_run+0x176>
 8000340:	a201      	add	r2, pc, #4	; (adr r2, 8000348 <fsm_automatic_run+0x20>)
 8000342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000346:	bf00      	nop
 8000348:	080003a5 	.word	0x080003a5
 800034c:	0800049f 	.word	0x0800049f
 8000350:	0800049f 	.word	0x0800049f
 8000354:	0800049f 	.word	0x0800049f
 8000358:	0800049f 	.word	0x0800049f
 800035c:	0800049f 	.word	0x0800049f
 8000360:	0800049f 	.word	0x0800049f
 8000364:	0800049f 	.word	0x0800049f
 8000368:	0800049f 	.word	0x0800049f
 800036c:	0800049f 	.word	0x0800049f
 8000370:	0800049f 	.word	0x0800049f
 8000374:	0800049f 	.word	0x0800049f
 8000378:	0800049f 	.word	0x0800049f
 800037c:	0800049f 	.word	0x0800049f
 8000380:	0800049f 	.word	0x0800049f
 8000384:	0800049f 	.word	0x0800049f
 8000388:	0800049f 	.word	0x0800049f
 800038c:	0800049f 	.word	0x0800049f
 8000390:	0800049f 	.word	0x0800049f
 8000394:	0800049f 	.word	0x0800049f
 8000398:	080003d5 	.word	0x080003d5
 800039c:	08000413 	.word	0x08000413
 80003a0:	08000461 	.word	0x08000461
		case INIT:
			//Turn off all lights
			setTrafficLight(lane, EDIT_MODE);
 80003a4:	210c      	movs	r1, #12
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f000 fd74 	bl	8000e94 <setTrafficLight>

			//Change mode and duration
			LED_MODE[lane] = initMode[lane];
 80003ac:	4a42      	ldr	r2, [pc, #264]	; (80004b8 <fsm_automatic_run+0x190>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b4:	493f      	ldr	r1, [pc, #252]	; (80004b4 <fsm_automatic_run+0x18c>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setTimer(lane, initDuration(lane)*100);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff9d 	bl	80002fc <initDuration>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2264      	movs	r2, #100	; 0x64
 80003c6:	fb02 f303 	mul.w	r3, r2, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f000 fbdf 	bl	8000b90 <setTimer>
			break;
 80003d2:	e06b      	b.n	80004ac <fsm_automatic_run+0x184>
		case RED_MODE:
			//Display countdown and turn on light
			if (lane == 0) displayCountdown(lane);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d102      	bne.n	80003e0 <fsm_automatic_run+0xb8>
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f7ff ff62 	bl	80002a4 <displayCountdown>
			setTrafficLight(lane, RED_MODE);
 80003e0:	2115      	movs	r1, #21
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f000 fd56 	bl	8000e94 <setTrafficLight>


			//Timer flag to change light
			if(timer_flag[lane]){
 80003e8:	4a34      	ldr	r2, [pc, #208]	; (80004bc <fsm_automatic_run+0x194>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d056      	beq.n	80004a2 <fsm_automatic_run+0x17a>
				LED_MODE[lane] = GREEN_MODE;
 80003f4:	4a2f      	ldr	r2, [pc, #188]	; (80004b4 <fsm_automatic_run+0x18c>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2117      	movs	r1, #23
 80003fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 80003fe:	4b30      	ldr	r3, [pc, #192]	; (80004c0 <fsm_automatic_run+0x198>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2264      	movs	r2, #100	; 0x64
 8000404:	fb02 f303 	mul.w	r3, r2, r3
 8000408:	4619      	mov	r1, r3
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f000 fbc0 	bl	8000b90 <setTimer>
			}
			break;
 8000410:	e047      	b.n	80004a2 <fsm_automatic_run+0x17a>
		case AMBER_MODE:
			//Display countdown and turn on light
			if (lane == 0) displayCountdown(lane);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d102      	bne.n	800041e <fsm_automatic_run+0xf6>
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f7ff ff43 	bl	80002a4 <displayCountdown>
			if (lane == 2) setTrafficLight(lane, GREEN_MODE);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b02      	cmp	r3, #2
 8000422:	d104      	bne.n	800042e <fsm_automatic_run+0x106>
 8000424:	2117      	movs	r1, #23
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f000 fd34 	bl	8000e94 <setTrafficLight>
 800042c:	e003      	b.n	8000436 <fsm_automatic_run+0x10e>
			else setTrafficLight(lane, AMBER_MODE);
 800042e:	2116      	movs	r1, #22
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f000 fd2f 	bl	8000e94 <setTrafficLight>


			//Timer flag to change light
			if(timer_flag[lane]){
 8000436:	4a21      	ldr	r2, [pc, #132]	; (80004bc <fsm_automatic_run+0x194>)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d031      	beq.n	80004a6 <fsm_automatic_run+0x17e>
				LED_MODE[lane] = RED_MODE;
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <fsm_automatic_run+0x18c>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2115      	movs	r1, #21
 8000448:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <fsm_automatic_run+0x19c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2264      	movs	r2, #100	; 0x64
 8000452:	fb02 f303 	mul.w	r3, r2, r3
 8000456:	4619      	mov	r1, r3
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f000 fb99 	bl	8000b90 <setTimer>
			}
			break;
 800045e:	e022      	b.n	80004a6 <fsm_automatic_run+0x17e>
		case GREEN_MODE:
			//Display countdown and turn on light
			if (lane == 0) displayCountdown(lane);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d102      	bne.n	800046c <fsm_automatic_run+0x144>
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f7ff ff1c 	bl	80002a4 <displayCountdown>
			setTrafficLight(lane, GREEN_MODE);
 800046c:	2117      	movs	r1, #23
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f000 fd10 	bl	8000e94 <setTrafficLight>

			//Timer flag to change light
			if(timer_flag[lane]){
 8000474:	4a11      	ldr	r2, [pc, #68]	; (80004bc <fsm_automatic_run+0x194>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d014      	beq.n	80004aa <fsm_automatic_run+0x182>
				LED_MODE[lane] = AMBER_MODE;
 8000480:	4a0c      	ldr	r2, [pc, #48]	; (80004b4 <fsm_automatic_run+0x18c>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2116      	movs	r1, #22
 8000486:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, AMBER_DURATION*100);
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <fsm_automatic_run+0x1a0>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2264      	movs	r2, #100	; 0x64
 8000490:	fb02 f303 	mul.w	r3, r2, r3
 8000494:	4619      	mov	r1, r3
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f000 fb7a 	bl	8000b90 <setTimer>
			}
			break;
 800049c:	e005      	b.n	80004aa <fsm_automatic_run+0x182>
		default:
			break;
 800049e:	bf00      	nop
 80004a0:	e004      	b.n	80004ac <fsm_automatic_run+0x184>
			break;
 80004a2:	bf00      	nop
 80004a4:	e002      	b.n	80004ac <fsm_automatic_run+0x184>
			break;
 80004a6:	bf00      	nop
 80004a8:	e000      	b.n	80004ac <fsm_automatic_run+0x184>
			break;
 80004aa:	bf00      	nop
	}
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000074 	.word	0x20000074
 80004b8:	20000068 	.word	0x20000068
 80004bc:	2000016c 	.word	0x2000016c
 80004c0:	20000090 	.word	0x20000090
 80004c4:	20000088 	.word	0x20000088
 80004c8:	2000008c 	.word	0x2000008c

080004cc <changeMode>:

int tempDuration = 0;


//Change mode
void changeMode(int mode, int duration, int ledMode){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	//Display duration
	displayUART(mode, duration);
 80004d8:	68b9      	ldr	r1, [r7, #8]
 80004da:	68f8      	ldr	r0, [r7, #12]
 80004dc:	f000 fde8 	bl	80010b0 <displayUART>
	tempDuration = duration;
 80004e0:	4a12      	ldr	r2, [pc, #72]	; (800052c <changeMode+0x60>)
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	6013      	str	r3, [r2, #0]

	//Change traffic lights to toggle the right color
	LED_MODE[0] = ledMode;
 80004e6:	4a12      	ldr	r2, [pc, #72]	; (8000530 <changeMode+0x64>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6013      	str	r3, [r2, #0]
	LED_MODE[1] = ledMode;
 80004ec:	4a10      	ldr	r2, [pc, #64]	; (8000530 <changeMode+0x64>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6053      	str	r3, [r2, #4]

	//Change ped light mode
	LED_MODE[2] = ledMode;
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <changeMode+0x64>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6093      	str	r3, [r2, #8]

	//Turn off all lights
	setTrafficLight(0, INIT);
 80004f8:	2101      	movs	r1, #1
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 fcca 	bl	8000e94 <setTrafficLight>
	setTrafficLight(1, INIT);
 8000500:	2101      	movs	r1, #1
 8000502:	2001      	movs	r0, #1
 8000504:	f000 fcc6 	bl	8000e94 <setTrafficLight>
	setTrafficLight(2, INIT);
 8000508:	2101      	movs	r1, #1
 800050a:	2002      	movs	r0, #2
 800050c:	f000 fcc2 	bl	8000e94 <setTrafficLight>

	//Update mode
	MODE = mode;
 8000510:	4a08      	ldr	r2, [pc, #32]	; (8000534 <changeMode+0x68>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6013      	str	r3, [r2, #0]
	TRAFFIC_MODE = ledMode;
 8000516:	4a08      	ldr	r2, [pc, #32]	; (8000538 <changeMode+0x6c>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6013      	str	r3, [r2, #0]

	//Set timer to toggle lights
	setTimer(3, 25);
 800051c:	2119      	movs	r1, #25
 800051e:	2003      	movs	r0, #3
 8000520:	f000 fb36 	bl	8000b90 <setTimer>
}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000154 	.word	0x20000154
 8000530:	20000074 	.word	0x20000074
 8000534:	20000080 	.word	0x20000080
 8000538:	20000084 	.word	0x20000084

0800053c <changeDuration>:


//Increment duration
void changeDuration(int mode){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	tempDuration++;
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <changeDuration+0x34>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	4a09      	ldr	r2, [pc, #36]	; (8000570 <changeDuration+0x34>)
 800054c:	6013      	str	r3, [r2, #0]
	if (tempDuration == 100) tempDuration = 1;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <changeDuration+0x34>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b64      	cmp	r3, #100	; 0x64
 8000554:	d102      	bne.n	800055c <changeDuration+0x20>
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <changeDuration+0x34>)
 8000558:	2201      	movs	r2, #1
 800055a:	601a      	str	r2, [r3, #0]

	//Display duration
	displayUART(mode, tempDuration);
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <changeDuration+0x34>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 fda4 	bl	80010b0 <displayUART>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000154 	.word	0x20000154

08000574 <toggle>:


//Toggle Lights
void toggle(int mode){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	toggleLight(0, mode);
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	2000      	movs	r0, #0
 8000580:	f000 fd1e 	bl	8000fc0 <toggleLight>
	toggleLight(1, mode);
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	2001      	movs	r0, #1
 8000588:	f000 fd1a 	bl	8000fc0 <toggleLight>
	setTimer(3, 25);
 800058c:	2119      	movs	r1, #25
 800058e:	2003      	movs	r0, #3
 8000590:	f000 fafe 	bl	8000b90 <setTimer>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <checkDuration>:


//Check and update duration so that RED = GREEN + AMBER
void checkDuration(int mode){
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	int lane = GREEN_DURATION + AMBER_DURATION;
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <checkDuration+0x84>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <checkDuration+0x88>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4413      	add	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
	switch (mode){
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b17      	cmp	r3, #23
 80005b4:	d01f      	beq.n	80005f6 <checkDuration+0x5a>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b17      	cmp	r3, #23
 80005ba:	dc2c      	bgt.n	8000616 <checkDuration+0x7a>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b15      	cmp	r3, #21
 80005c0:	d003      	beq.n	80005ca <checkDuration+0x2e>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b16      	cmp	r3, #22
 80005c6:	d00b      	beq.n	80005e0 <checkDuration+0x44>
		break;
	case GREEN_MODE:
		if (lane != RED_MODE) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
		break;
	}
}
 80005c8:	e025      	b.n	8000616 <checkDuration+0x7a>
		if (lane != RED_MODE) GREEN_DURATION = RED_DURATION - AMBER_DURATION;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2b15      	cmp	r3, #21
 80005ce:	d01d      	beq.n	800060c <checkDuration+0x70>
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <checkDuration+0x8c>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <checkDuration+0x88>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <checkDuration+0x84>)
 80005dc:	6013      	str	r3, [r2, #0]
		break;
 80005de:	e015      	b.n	800060c <checkDuration+0x70>
		if (lane != RED_MODE) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b15      	cmp	r3, #21
 80005e4:	d014      	beq.n	8000610 <checkDuration+0x74>
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <checkDuration+0x84>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <checkDuration+0x88>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4413      	add	r3, r2
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <checkDuration+0x8c>)
 80005f2:	6013      	str	r3, [r2, #0]
		break;
 80005f4:	e00c      	b.n	8000610 <checkDuration+0x74>
		if (lane != RED_MODE) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2b15      	cmp	r3, #21
 80005fa:	d00b      	beq.n	8000614 <checkDuration+0x78>
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <checkDuration+0x84>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <checkDuration+0x88>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4413      	add	r3, r2
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <checkDuration+0x8c>)
 8000608:	6013      	str	r3, [r2, #0]
		break;
 800060a:	e003      	b.n	8000614 <checkDuration+0x78>
		break;
 800060c:	bf00      	nop
 800060e:	e002      	b.n	8000616 <checkDuration+0x7a>
		break;
 8000610:	bf00      	nop
 8000612:	e000      	b.n	8000616 <checkDuration+0x7a>
		break;
 8000614:	bf00      	nop
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	20000090 	.word	0x20000090
 8000624:	2000008c 	.word	0x2000008c
 8000628:	20000088 	.word	0x20000088

0800062c <fsm_manual_run>:

void fsm_manual_run(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	switch(MODE){
 8000630:	4b67      	ldr	r3, [pc, #412]	; (80007d0 <fsm_manual_run+0x1a4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	3b0b      	subs	r3, #11
 8000636:	2b0c      	cmp	r3, #12
 8000638:	f200 80be 	bhi.w	80007b8 <fsm_manual_run+0x18c>
 800063c:	a201      	add	r2, pc, #4	; (adr r2, 8000644 <fsm_manual_run+0x18>)
 800063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000642:	bf00      	nop
 8000644:	08000679 	.word	0x08000679
 8000648:	080007b9 	.word	0x080007b9
 800064c:	080007b9 	.word	0x080007b9
 8000650:	080007b9 	.word	0x080007b9
 8000654:	080007b9 	.word	0x080007b9
 8000658:	080007b9 	.word	0x080007b9
 800065c:	080007b9 	.word	0x080007b9
 8000660:	080007b9 	.word	0x080007b9
 8000664:	080007b9 	.word	0x080007b9
 8000668:	080007b9 	.word	0x080007b9
 800066c:	08000697 	.word	0x08000697
 8000670:	080006f9 	.word	0x080006f9
 8000674:	0800075b 	.word	0x0800075b
		case AUTO_MODE:
			//Change mode
			if (isButtonPressed(0)) changeMode(RED_MODE, RED_DURATION, EDIT_MODE);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff fd67 	bl	800014c <isButtonPressed>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	f000 809b 	beq.w	80007bc <fsm_manual_run+0x190>
 8000686:	4b53      	ldr	r3, [pc, #332]	; (80007d4 <fsm_manual_run+0x1a8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	220c      	movs	r2, #12
 800068c:	4619      	mov	r1, r3
 800068e:	2015      	movs	r0, #21
 8000690:	f7ff ff1c 	bl	80004cc <changeMode>
			break;
 8000694:	e092      	b.n	80007bc <fsm_manual_run+0x190>

		case RED_MODE:
			//Change mode
			if (isButtonPressed(0)) changeMode(AMBER_MODE, AMBER_DURATION, EDIT_MODE);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff fd58 	bl	800014c <isButtonPressed>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d006      	beq.n	80006b0 <fsm_manual_run+0x84>
 80006a2:	4b4d      	ldr	r3, [pc, #308]	; (80007d8 <fsm_manual_run+0x1ac>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	220c      	movs	r2, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	2016      	movs	r0, #22
 80006ac:	f7ff ff0e 	bl	80004cc <changeMode>

			//Change duration
			if (isButtonPressed(1))	changeDuration(RED_MODE);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff fd4b 	bl	800014c <isButtonPressed>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <fsm_manual_run+0x96>
 80006bc:	2015      	movs	r0, #21
 80006be:	f7ff ff3d 	bl	800053c <changeDuration>

			//Save duration
			if (isButtonPressed(2)){
 80006c2:	2002      	movs	r0, #2
 80006c4:	f7ff fd42 	bl	800014c <isButtonPressed>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00c      	beq.n	80006e8 <fsm_manual_run+0xbc>
				RED_DURATION = tempDuration;
 80006ce:	4b43      	ldr	r3, [pc, #268]	; (80007dc <fsm_manual_run+0x1b0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a40      	ldr	r2, [pc, #256]	; (80007d4 <fsm_manual_run+0x1a8>)
 80006d4:	6013      	str	r3, [r2, #0]
				checkDuration(RED_MODE);
 80006d6:	2015      	movs	r0, #21
 80006d8:	f7ff ff60 	bl	800059c <checkDuration>
				displayUART(SAVED, tempDuration);
 80006dc:	4b3f      	ldr	r3, [pc, #252]	; (80007dc <fsm_manual_run+0x1b0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	201f      	movs	r0, #31
 80006e4:	f000 fce4 	bl	80010b0 <displayUART>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(RED_MODE);
 80006e8:	4b3d      	ldr	r3, [pc, #244]	; (80007e0 <fsm_manual_run+0x1b4>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d067      	beq.n	80007c0 <fsm_manual_run+0x194>
 80006f0:	2015      	movs	r0, #21
 80006f2:	f7ff ff3f 	bl	8000574 <toggle>
			break;
 80006f6:	e063      	b.n	80007c0 <fsm_manual_run+0x194>

		case AMBER_MODE:
			//Change mode
			if (isButtonPressed(0)) changeMode(GREEN_MODE, GREEN_DURATION, EDIT_MODE);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f7ff fd27 	bl	800014c <isButtonPressed>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d006      	beq.n	8000712 <fsm_manual_run+0xe6>
 8000704:	4b37      	ldr	r3, [pc, #220]	; (80007e4 <fsm_manual_run+0x1b8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	220c      	movs	r2, #12
 800070a:	4619      	mov	r1, r3
 800070c:	2017      	movs	r0, #23
 800070e:	f7ff fedd 	bl	80004cc <changeMode>

			//Change duration
			if (isButtonPressed(1))	changeDuration(AMBER_MODE);
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff fd1a 	bl	800014c <isButtonPressed>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <fsm_manual_run+0xf8>
 800071e:	2016      	movs	r0, #22
 8000720:	f7ff ff0c 	bl	800053c <changeDuration>

			//Save duration
			if (isButtonPressed(2)){
 8000724:	2002      	movs	r0, #2
 8000726:	f7ff fd11 	bl	800014c <isButtonPressed>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00c      	beq.n	800074a <fsm_manual_run+0x11e>
				AMBER_DURATION = tempDuration;
 8000730:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <fsm_manual_run+0x1b0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a28      	ldr	r2, [pc, #160]	; (80007d8 <fsm_manual_run+0x1ac>)
 8000736:	6013      	str	r3, [r2, #0]
				checkDuration(AMBER_MODE);
 8000738:	2016      	movs	r0, #22
 800073a:	f7ff ff2f 	bl	800059c <checkDuration>
				displayUART(SAVED, tempDuration);
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <fsm_manual_run+0x1b0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4619      	mov	r1, r3
 8000744:	201f      	movs	r0, #31
 8000746:	f000 fcb3 	bl	80010b0 <displayUART>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(AMBER_MODE);
 800074a:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <fsm_manual_run+0x1b4>)
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d038      	beq.n	80007c4 <fsm_manual_run+0x198>
 8000752:	2016      	movs	r0, #22
 8000754:	f7ff ff0e 	bl	8000574 <toggle>
			break;
 8000758:	e034      	b.n	80007c4 <fsm_manual_run+0x198>

		case GREEN_MODE:
			//Change mode
			if (isButtonPressed(0)) changeMode(AUTO_MODE, 0, INIT);
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff fcf6 	bl	800014c <isButtonPressed>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d004      	beq.n	8000770 <fsm_manual_run+0x144>
 8000766:	2201      	movs	r2, #1
 8000768:	2100      	movs	r1, #0
 800076a:	200b      	movs	r0, #11
 800076c:	f7ff feae 	bl	80004cc <changeMode>

			//Change duration
			if (isButtonPressed(1)) changeDuration(GREEN_MODE);
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff fceb 	bl	800014c <isButtonPressed>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <fsm_manual_run+0x156>
 800077c:	2017      	movs	r0, #23
 800077e:	f7ff fedd 	bl	800053c <changeDuration>

			//Save duration
			if (isButtonPressed(2)){
 8000782:	2002      	movs	r0, #2
 8000784:	f7ff fce2 	bl	800014c <isButtonPressed>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00c      	beq.n	80007a8 <fsm_manual_run+0x17c>
				GREEN_DURATION = tempDuration;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <fsm_manual_run+0x1b0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <fsm_manual_run+0x1b8>)
 8000794:	6013      	str	r3, [r2, #0]
				checkDuration(GREEN_MODE);
 8000796:	2017      	movs	r0, #23
 8000798:	f7ff ff00 	bl	800059c <checkDuration>
				displayUART(SAVED, tempDuration);
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <fsm_manual_run+0x1b0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	201f      	movs	r0, #31
 80007a4:	f000 fc84 	bl	80010b0 <displayUART>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(GREEN_MODE);
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <fsm_manual_run+0x1b4>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00b      	beq.n	80007c8 <fsm_manual_run+0x19c>
 80007b0:	2017      	movs	r0, #23
 80007b2:	f7ff fedf 	bl	8000574 <toggle>
			break;
 80007b6:	e007      	b.n	80007c8 <fsm_manual_run+0x19c>

		default:
			 break;
 80007b8:	bf00      	nop
 80007ba:	e006      	b.n	80007ca <fsm_manual_run+0x19e>
			break;
 80007bc:	bf00      	nop
 80007be:	e004      	b.n	80007ca <fsm_manual_run+0x19e>
			break;
 80007c0:	bf00      	nop
 80007c2:	e002      	b.n	80007ca <fsm_manual_run+0x19e>
			break;
 80007c4:	bf00      	nop
 80007c6:	e000      	b.n	80007ca <fsm_manual_run+0x19e>
			break;
 80007c8:	bf00      	nop
	}
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000080 	.word	0x20000080
 80007d4:	20000088 	.word	0x20000088
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	20000154 	.word	0x20000154
 80007e0:	2000016c 	.word	0x2000016c
 80007e4:	20000090 	.word	0x20000090

080007e8 <fsm_ped_run>:
 *      Author: minht
 */

#include "fsm_ped.h"

void fsm_ped_run(){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	switch(TRAFFIC_MODE){
 80007ec:	4b26      	ldr	r3, [pc, #152]	; (8000888 <fsm_ped_run+0xa0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b0c      	cmp	r3, #12
 80007f2:	d012      	beq.n	800081a <fsm_ped_run+0x32>
 80007f4:	2b0c      	cmp	r3, #12
 80007f6:	dc3f      	bgt.n	8000878 <fsm_ped_run+0x90>
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d002      	beq.n	8000802 <fsm_ped_run+0x1a>
 80007fc:	2b0b      	cmp	r3, #11
 80007fe:	d027      	beq.n	8000850 <fsm_ped_run+0x68>
				//Change mode
				TRAFFIC_MODE = EDIT_MODE;
			}
			break;
		default:
			break;
 8000800:	e03a      	b.n	8000878 <fsm_ped_run+0x90>
			if (PED == 1) TRAFFIC_MODE = AUTO_MODE;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <fsm_ped_run+0xa4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d103      	bne.n	8000812 <fsm_ped_run+0x2a>
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <fsm_ped_run+0xa0>)
 800080c:	220b      	movs	r2, #11
 800080e:	601a      	str	r2, [r3, #0]
			break;
 8000810:	e037      	b.n	8000882 <fsm_ped_run+0x9a>
			else TRAFFIC_MODE = EDIT_MODE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <fsm_ped_run+0xa0>)
 8000814:	220c      	movs	r2, #12
 8000816:	601a      	str	r2, [r3, #0]
			break;
 8000818:	e033      	b.n	8000882 <fsm_ped_run+0x9a>
			if (isButtonPressed(3)){
 800081a:	2003      	movs	r0, #3
 800081c:	f7ff fc96 	bl	800014c <isButtonPressed>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d02a      	beq.n	800087c <fsm_ped_run+0x94>
				setTimer(2, timer_counter[0]);
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <fsm_ped_run+0xa8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4619      	mov	r1, r3
 800082c:	2002      	movs	r0, #2
 800082e:	f000 f9af 	bl	8000b90 <setTimer>
				LED_MODE[2] = LED_MODE[0];
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <fsm_ped_run+0xac>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a17      	ldr	r2, [pc, #92]	; (8000894 <fsm_ped_run+0xac>)
 8000838:	6093      	str	r3, [r2, #8]
				PED = 1;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <fsm_ped_run+0xa4>)
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
				if (MODE == AUTO_MODE) TRAFFIC_MODE = AUTO_MODE;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <fsm_ped_run+0xb0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b0b      	cmp	r3, #11
 8000846:	d119      	bne.n	800087c <fsm_ped_run+0x94>
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <fsm_ped_run+0xa0>)
 800084a:	220b      	movs	r2, #11
 800084c:	601a      	str	r2, [r3, #0]
			break;
 800084e:	e015      	b.n	800087c <fsm_ped_run+0x94>
			if (isButtonPressed(3)){
 8000850:	2003      	movs	r0, #3
 8000852:	f7ff fc7b 	bl	800014c <isButtonPressed>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d011      	beq.n	8000880 <fsm_ped_run+0x98>
				LED_MODE[2] = EDIT_MODE;
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <fsm_ped_run+0xac>)
 800085e:	220c      	movs	r2, #12
 8000860:	609a      	str	r2, [r3, #8]
				setTrafficLight(2, INIT);
 8000862:	2101      	movs	r1, #1
 8000864:	2002      	movs	r0, #2
 8000866:	f000 fb15 	bl	8000e94 <setTrafficLight>
				PED = 0;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <fsm_ped_run+0xa4>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
				TRAFFIC_MODE = EDIT_MODE;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <fsm_ped_run+0xa0>)
 8000872:	220c      	movs	r2, #12
 8000874:	601a      	str	r2, [r3, #0]
			break;
 8000876:	e003      	b.n	8000880 <fsm_ped_run+0x98>
			break;
 8000878:	bf00      	nop
 800087a:	e002      	b.n	8000882 <fsm_ped_run+0x9a>
			break;
 800087c:	bf00      	nop
 800087e:	e000      	b.n	8000882 <fsm_ped_run+0x9a>
			break;
 8000880:	bf00      	nop
	}
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000084 	.word	0x20000084
 800088c:	20000158 	.word	0x20000158
 8000890:	2000015c 	.word	0x2000015c
 8000894:	20000074 	.word	0x20000074
 8000898:	20000080 	.word	0x20000080

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f000 fcc0 	bl	8001224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a4:	f000 f826 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a8:	f000 f8dc 	bl	8000a64 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008ac:	f000 f864 	bl	8000978 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80008b0:	f000 f8ae 	bl	8000a10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80008b4:	480e      	ldr	r0, [pc, #56]	; (80008f0 <main+0x54>)
 80008b6:	f001 fd01 	bl	80022bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTrafficLight(0, INIT);
 80008ba:	2101      	movs	r1, #1
 80008bc:	2000      	movs	r0, #0
 80008be:	f000 fae9 	bl	8000e94 <setTrafficLight>
  setTrafficLight(1, INIT);
 80008c2:	2101      	movs	r1, #1
 80008c4:	2001      	movs	r0, #1
 80008c6:	f000 fae5 	bl	8000e94 <setTrafficLight>
  setTrafficLight(2, INIT);
 80008ca:	2101      	movs	r1, #1
 80008cc:	2002      	movs	r0, #2
 80008ce:	f000 fae1 	bl	8000e94 <setTrafficLight>
  while (1)
  {

    /* USER CODE END WHILE */
	  fsm_ped_run();
 80008d2:	f7ff ff89 	bl	80007e8 <fsm_ped_run>
	  fsm_manual_run();
 80008d6:	f7ff fea9 	bl	800062c <fsm_manual_run>
	  fsm_automatic_run(0);
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff fd24 	bl	8000328 <fsm_automatic_run>
	  fsm_automatic_run(1);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f7ff fd21 	bl	8000328 <fsm_automatic_run>
	  fsm_automatic_run(2);
 80008e6:	2002      	movs	r0, #2
 80008e8:	f7ff fd1e 	bl	8000328 <fsm_automatic_run>
	  fsm_ped_run();
 80008ec:	e7f1      	b.n	80008d2 <main+0x36>
 80008ee:	bf00      	nop
 80008f0:	200001d0 	.word	0x200001d0

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b090      	sub	sp, #64	; 0x40
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	2228      	movs	r2, #40	; 0x28
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f002 fed6 	bl	80036b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000916:	2302      	movs	r3, #2
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091a:	2301      	movs	r3, #1
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091e:	2310      	movs	r3, #16
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000926:	2300      	movs	r3, #0
 8000928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800092a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 0318 	add.w	r3, r7, #24
 8000934:	4618      	mov	r0, r3
 8000936:	f001 f863 	bl	8001a00 <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000940:	f000 f920 	bl	8000b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	230f      	movs	r3, #15
 8000946:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000948:	2302      	movs	r3, #2
 800094a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2102      	movs	r1, #2
 800095e:	4618      	mov	r0, r3
 8000960:	f001 face 	bl	8001f00 <HAL_RCC_ClockConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800096a:	f000 f90b 	bl	8000b84 <Error_Handler>
  }
}
 800096e:	bf00      	nop
 8000970:	3740      	adds	r7, #64	; 0x40
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	463b      	mov	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_TIM2_Init+0x94>)
 8000996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800099a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_TIM2_Init+0x94>)
 800099e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80009a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_TIM2_Init+0x94>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_TIM2_Init+0x94>)
 80009ac:	2263      	movs	r2, #99	; 0x63
 80009ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_TIM2_Init+0x94>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_TIM2_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009bc:	4813      	ldr	r0, [pc, #76]	; (8000a0c <MX_TIM2_Init+0x94>)
 80009be:	f001 fc2d 	bl	800221c <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009c8:	f000 f8dc 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	4619      	mov	r1, r3
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_TIM2_Init+0x94>)
 80009da:	f001 fdc9 	bl	8002570 <HAL_TIM_ConfigClockSource>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009e4:	f000 f8ce 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009f0:	463b      	mov	r3, r7
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_TIM2_Init+0x94>)
 80009f6:	f001 ff9f 	bl	8002938 <HAL_TIMEx_MasterConfigSynchronization>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f8c0 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200001d0 	.word	0x200001d0

08000a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_USART2_UART_Init+0x50>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a48:	f001 ffe6 	bl	8002a18 <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a52:	f000 f897 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000188 	.word	0x20000188
 8000a60:	40004400 	.word	0x40004400

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <MX_GPIO_Init+0xe8>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a33      	ldr	r2, [pc, #204]	; (8000b4c <MX_GPIO_Init+0xe8>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <MX_GPIO_Init+0xe8>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <MX_GPIO_Init+0xe8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a2d      	ldr	r2, [pc, #180]	; (8000b4c <MX_GPIO_Init+0xe8>)
 8000a96:	f043 0308 	orr.w	r3, r3, #8
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <MX_GPIO_Init+0xe8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0308 	and.w	r3, r3, #8
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Ped_LIGHT2_Pin|D2_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000aae:	4828      	ldr	r0, [pc, #160]	; (8000b50 <MX_GPIO_Init+0xec>)
 8000ab0:	f000 ff75 	bl	800199e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ped_LIGHT1_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000aba:	4826      	ldr	r0, [pc, #152]	; (8000b54 <MX_GPIO_Init+0xf0>)
 8000abc:	f000 ff6f 	bl	800199e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Ped_BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = Ped_BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000ac0:	2313      	movs	r3, #19
 8000ac2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481f      	ldr	r0, [pc, #124]	; (8000b50 <MX_GPIO_Init+0xec>)
 8000ad4:	f000 fdc8 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Ped_LIGHT2_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Ped_LIGHT2_Pin|D2_Pin;
 8000ad8:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000adc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4619      	mov	r1, r3
 8000af0:	4817      	ldr	r0, [pc, #92]	; (8000b50 <MX_GPIO_Init+0xec>)
 8000af2:	f000 fdb9 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000af6:	2340      	movs	r3, #64	; 0x40
 8000af8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2302      	movs	r3, #2
 8000b00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MX_GPIO_Init+0xec>)
 8000b0a:	f000 fdad 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <MX_GPIO_Init+0xf0>)
 8000b22:	f000 fda1 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ped_LIGHT1_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = Ped_LIGHT1_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000b26:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000b2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2302      	movs	r3, #2
 8000b36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_GPIO_Init+0xf0>)
 8000b40:	f000 fd92 	bl	8001668 <HAL_GPIO_Init>

}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010800 	.word	0x40010800
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000b60:	f000 f82e 	bl	8000bc0 <timerRun>
	getKeyInput(0);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff fb1b 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f7ff fb18 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 8000b70:	2002      	movs	r0, #2
 8000b72:	f7ff fb15 	bl	80001a0 <getKeyInput>
	getKeyInput(3);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f7ff fb12 	bl	80001a0 <getKeyInput>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <setTimer>:
#include "software_timer.h"

int timer_counter [4] = {0};
int timer_flag [4] = {0};

void setTimer(int type, int duration){
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
	timer_counter[type] = duration;
 8000b9a:	4907      	ldr	r1, [pc, #28]	; (8000bb8 <setTimer+0x28>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[type] = 0;
 8000ba4:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <setTimer+0x2c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	2000015c 	.word	0x2000015c
 8000bbc:	2000016c 	.word	0x2000016c

08000bc0 <timerRun>:

void timerRun(){
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
	if(timer_counter[0] > 0){
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <timerRun+0x8c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dd0b      	ble.n	8000be4 <timerRun+0x24>
		timer_counter[0]--;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <timerRun+0x8c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <timerRun+0x8c>)
 8000bd4:	6013      	str	r3, [r2, #0]
		if(timer_counter[0] <= 0){
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <timerRun+0x8c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	dc02      	bgt.n	8000be4 <timerRun+0x24>
			timer_flag[0] = 1;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <timerRun+0x90>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter[1] > 0){
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <timerRun+0x8c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	dd0b      	ble.n	8000c04 <timerRun+0x44>
		timer_counter[1]--;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <timerRun+0x8c>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	4a16      	ldr	r2, [pc, #88]	; (8000c4c <timerRun+0x8c>)
 8000bf4:	6053      	str	r3, [r2, #4]
		if(timer_counter[1] <= 0){
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <timerRun+0x8c>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	dc02      	bgt.n	8000c04 <timerRun+0x44>
			timer_flag[1] = 1;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <timerRun+0x90>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	605a      	str	r2, [r3, #4]
		}
	}
	if(timer_counter[2] > 0){
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <timerRun+0x8c>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	dd0b      	ble.n	8000c24 <timerRun+0x64>
		timer_counter[2]--;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <timerRun+0x8c>)
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <timerRun+0x8c>)
 8000c14:	6093      	str	r3, [r2, #8]
		if(timer_counter[2] <= 0){
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <timerRun+0x8c>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	dc02      	bgt.n	8000c24 <timerRun+0x64>
			timer_flag[2] = 1;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <timerRun+0x90>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	609a      	str	r2, [r3, #8]
		}
	}
	if(timer_counter[3] > 0){
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <timerRun+0x8c>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	dd0b      	ble.n	8000c44 <timerRun+0x84>
		timer_counter[3]--;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <timerRun+0x8c>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <timerRun+0x8c>)
 8000c34:	60d3      	str	r3, [r2, #12]
		if(timer_counter[3] <= 0){
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <timerRun+0x8c>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	dc02      	bgt.n	8000c44 <timerRun+0x84>
			timer_flag[3] = 1;
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <timerRun+0x90>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	60da      	str	r2, [r3, #12]
		}
	}
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	2000015c 	.word	0x2000015c
 8000c50:	2000016c 	.word	0x2000016c

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6193      	str	r3, [r2, #24]
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	61d3      	str	r3, [r2, #28]
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_MspInit+0x60>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_MspInit+0x60>)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000

08000cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc8:	d113      	bne.n	8000cf2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_TIM_Base_MspInit+0x44>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_TIM_Base_MspInit+0x44>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_TIM_Base_MspInit+0x44>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	201c      	movs	r0, #28
 8000ce8:	f000 fbd5 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cec:	201c      	movs	r0, #28
 8000cee:	f000 fbee 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <HAL_UART_MspInit+0x98>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d137      	bne.n	8000d90 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <HAL_UART_MspInit+0x9c>)
 8000d22:	69db      	ldr	r3, [r3, #28]
 8000d24:	4a1d      	ldr	r2, [pc, #116]	; (8000d9c <HAL_UART_MspInit+0x9c>)
 8000d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2a:	61d3      	str	r3, [r2, #28]
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <HAL_UART_MspInit+0x9c>)
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_UART_MspInit+0x9c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_UART_MspInit+0x9c>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_UART_MspInit+0x9c>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d50:	2304      	movs	r3, #4
 8000d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4619      	mov	r1, r3
 8000d62:	480f      	ldr	r0, [pc, #60]	; (8000da0 <HAL_UART_MspInit+0xa0>)
 8000d64:	f000 fc80 	bl	8001668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4809      	ldr	r0, [pc, #36]	; (8000da0 <HAL_UART_MspInit+0xa0>)
 8000d7c:	f000 fc74 	bl	8001668 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2026      	movs	r0, #38	; 0x26
 8000d86:	f000 fb86 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d8a:	2026      	movs	r0, #38	; 0x26
 8000d8c:	f000 fb9f 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40004400 	.word	0x40004400
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010800 	.word	0x40010800

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <NMI_Handler+0x4>

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dea:	f000 fa61 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <TIM2_IRQHandler+0x10>)
 8000dfa:	f001 fab1 	bl	8002360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200001d0 	.word	0x200001d0

08000e08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <USART2_IRQHandler+0x10>)
 8000e0e:	f001 fed7 	bl	8002bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000188 	.word	0x20000188

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f002 fc08 	bl	8003660 <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20005000 	.word	0x20005000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	2000017c 	.word	0x2000017c
 8000e84:	20000240 	.word	0x20000240

08000e88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <setTrafficLight>:

uint16_t D_Pin[6] = {D2_Pin, D3_Pin, D4_Pin, D5_Pin, Ped_LIGHT1_Pin, Ped_LIGHT2_Pin};
GPIO_TypeDef *D_Port[6] = {D2_GPIO_Port, D3_GPIO_Port, D4_GPIO_Port, D5_GPIO_Port, Ped_LIGHT1_GPIO_Port, Ped_LIGHT2_GPIO_Port};


void setTrafficLight(int lane, int light){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
	switch (light){
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	2b17      	cmp	r3, #23
 8000ea2:	d047      	beq.n	8000f34 <setTrafficLight+0xa0>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b17      	cmp	r3, #23
 8000ea8:	dc63      	bgt.n	8000f72 <setTrafficLight+0xde>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	2b15      	cmp	r3, #21
 8000eae:	d003      	beq.n	8000eb8 <setTrafficLight+0x24>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2b16      	cmp	r3, #22
 8000eb4:	d01f      	beq.n	8000ef6 <setTrafficLight+0x62>
 8000eb6:	e05c      	b.n	8000f72 <setTrafficLight+0xde>
		case RED_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], SET);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4a3e      	ldr	r2, [pc, #248]	; (8000fb8 <setTrafficLight+0x124>)
 8000ebe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4a3d      	ldr	r2, [pc, #244]	; (8000fbc <setTrafficLight+0x128>)
 8000ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f000 fd65 	bl	800199e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	3301      	adds	r3, #1
 8000eda:	4a37      	ldr	r2, [pc, #220]	; (8000fb8 <setTrafficLight+0x124>)
 8000edc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	4a35      	ldr	r2, [pc, #212]	; (8000fbc <setTrafficLight+0x128>)
 8000ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f000 fd55 	bl	800199e <HAL_GPIO_WritePin>
			break;
 8000ef4:	e05c      	b.n	8000fb0 <setTrafficLight+0x11c>
		case AMBER_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], SET);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4a2f      	ldr	r2, [pc, #188]	; (8000fb8 <setTrafficLight+0x124>)
 8000efc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4a2d      	ldr	r2, [pc, #180]	; (8000fbc <setTrafficLight+0x128>)
 8000f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f000 fd46 	bl	800199e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], SET);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <setTrafficLight+0x124>)
 8000f1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	3301      	adds	r3, #1
 8000f24:	4a25      	ldr	r2, [pc, #148]	; (8000fbc <setTrafficLight+0x128>)
 8000f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f000 fd36 	bl	800199e <HAL_GPIO_WritePin>
			break;
 8000f32:	e03d      	b.n	8000fb0 <setTrafficLight+0x11c>
		case GREEN_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <setTrafficLight+0x124>)
 8000f3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4a1e      	ldr	r2, [pc, #120]	; (8000fbc <setTrafficLight+0x128>)
 8000f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f000 fd27 	bl	800199e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], SET);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	3301      	adds	r3, #1
 8000f56:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <setTrafficLight+0x124>)
 8000f58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	3301      	adds	r3, #1
 8000f62:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <setTrafficLight+0x128>)
 8000f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f000 fd17 	bl	800199e <HAL_GPIO_WritePin>
			break;
 8000f70:	e01e      	b.n	8000fb0 <setTrafficLight+0x11c>
		default:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <setTrafficLight+0x124>)
 8000f78:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <setTrafficLight+0x128>)
 8000f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f86:	2200      	movs	r2, #0
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f000 fd08 	bl	800199e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <setTrafficLight+0x124>)
 8000f96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <setTrafficLight+0x128>)
 8000fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f000 fcf8 	bl	800199e <HAL_GPIO_WritePin>
			break;
 8000fae:	bf00      	nop
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200000a4 	.word	0x200000a4
 8000fbc:	20000098 	.word	0x20000098

08000fc0 <toggleLight>:


void toggleLight(int lane, int light){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
	switch (light){
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b17      	cmp	r3, #23
 8000fce:	d047      	beq.n	8001060 <toggleLight+0xa0>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b17      	cmp	r3, #23
 8000fd4:	dc63      	bgt.n	800109e <toggleLight+0xde>
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	2b15      	cmp	r3, #21
 8000fda:	d003      	beq.n	8000fe4 <toggleLight+0x24>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2b16      	cmp	r3, #22
 8000fe0:	d01f      	beq.n	8001022 <toggleLight+0x62>
		case GREEN_MODE:
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
			break;
		default:
			break;
 8000fe2:	e05c      	b.n	800109e <toggleLight+0xde>
			HAL_GPIO_TogglePin(D_Port[lane*2], D_Pin[lane*2]);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <toggleLight+0xe8>)
 8000fea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	492e      	ldr	r1, [pc, #184]	; (80010ac <toggleLight+0xec>)
 8000ff4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	f000 fce7 	bl	80019ce <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(D_Port[lane*2+1], D_Pin[lane*2+1], RESET);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	3301      	adds	r3, #1
 8001006:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <toggleLight+0xe8>)
 8001008:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	3301      	adds	r3, #1
 8001012:	4a26      	ldr	r2, [pc, #152]	; (80010ac <toggleLight+0xec>)
 8001014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001018:	2200      	movs	r2, #0
 800101a:	4619      	mov	r1, r3
 800101c:	f000 fcbf 	bl	800199e <HAL_GPIO_WritePin>
			break;
 8001020:	e03e      	b.n	80010a0 <toggleLight+0xe0>
			HAL_GPIO_TogglePin(D_Port[lane*2], D_Pin[lane*2]);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <toggleLight+0xe8>)
 8001028:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	491e      	ldr	r1, [pc, #120]	; (80010ac <toggleLight+0xec>)
 8001032:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001036:	4619      	mov	r1, r3
 8001038:	4610      	mov	r0, r2
 800103a:	f000 fcc8 	bl	80019ce <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	3301      	adds	r3, #1
 8001044:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <toggleLight+0xe8>)
 8001046:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	3301      	adds	r3, #1
 8001050:	4916      	ldr	r1, [pc, #88]	; (80010ac <toggleLight+0xec>)
 8001052:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001056:	4619      	mov	r1, r3
 8001058:	4610      	mov	r0, r2
 800105a:	f000 fcb8 	bl	80019ce <HAL_GPIO_TogglePin>
			break;
 800105e:	e01f      	b.n	80010a0 <toggleLight+0xe0>
			HAL_GPIO_WritePin(D_Port[lane*2], D_Pin[lane*2], RESET);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <toggleLight+0xe8>)
 8001066:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <toggleLight+0xec>)
 8001070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	f000 fc91 	bl	800199e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(D_Port[lane*2+1], D_Pin[lane*2+1]);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	3301      	adds	r3, #1
 8001082:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <toggleLight+0xe8>)
 8001084:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	3301      	adds	r3, #1
 800108e:	4907      	ldr	r1, [pc, #28]	; (80010ac <toggleLight+0xec>)
 8001090:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001094:	4619      	mov	r1, r3
 8001096:	4610      	mov	r0, r2
 8001098:	f000 fc99 	bl	80019ce <HAL_GPIO_TogglePin>
			break;
 800109c:	e000      	b.n	80010a0 <toggleLight+0xe0>
			break;
 800109e:	bf00      	nop
	}
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000a4 	.word	0x200000a4
 80010ac:	20000098 	.word	0x20000098

080010b0 <displayUART>:
 */

#include "uart_timer.h"
char str[20];

void displayUART(int mode, int num){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3b0b      	subs	r3, #11
 80010be:	2b14      	cmp	r3, #20
 80010c0:	d874      	bhi.n	80011ac <displayUART+0xfc>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <displayUART+0x18>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	0800111d 	.word	0x0800111d
 80010cc:	080011ad 	.word	0x080011ad
 80010d0:	080011ad 	.word	0x080011ad
 80010d4:	080011ad 	.word	0x080011ad
 80010d8:	080011ad 	.word	0x080011ad
 80010dc:	080011ad 	.word	0x080011ad
 80010e0:	080011ad 	.word	0x080011ad
 80010e4:	080011ad 	.word	0x080011ad
 80010e8:	080011ad 	.word	0x080011ad
 80010ec:	080011ad 	.word	0x080011ad
 80010f0:	0800113f 	.word	0x0800113f
 80010f4:	0800115b 	.word	0x0800115b
 80010f8:	08001177 	.word	0x08001177
 80010fc:	080011ad 	.word	0x080011ad
 8001100:	080011ad 	.word	0x080011ad
 8001104:	080011ad 	.word	0x080011ad
 8001108:	080011ad 	.word	0x080011ad
 800110c:	080011ad 	.word	0x080011ad
 8001110:	080011ad 	.word	0x080011ad
 8001114:	080011ad 	.word	0x080011ad
 8001118:	08001193 	.word	0x08001193
	switch (mode){
		case AUTO_MODE:
			if (num != 0) HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!7SEG=%d#\n\r", num), 1000);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d046      	beq.n	80011b0 <displayUART+0x100>
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	4925      	ldr	r1, [pc, #148]	; (80011bc <displayUART+0x10c>)
 8001126:	4826      	ldr	r0, [pc, #152]	; (80011c0 <displayUART+0x110>)
 8001128:	f002 facc 	bl	80036c4 <siprintf>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001134:	4922      	ldr	r1, [pc, #136]	; (80011c0 <displayUART+0x110>)
 8001136:	4823      	ldr	r0, [pc, #140]	; (80011c4 <displayUART+0x114>)
 8001138:	f001 fcbe 	bl	8002ab8 <HAL_UART_Transmit>
			break;
 800113c:	e038      	b.n	80011b0 <displayUART+0x100>
		case RED_MODE:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!RED=%d#\n\r", num), 1000);
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	4921      	ldr	r1, [pc, #132]	; (80011c8 <displayUART+0x118>)
 8001142:	481f      	ldr	r0, [pc, #124]	; (80011c0 <displayUART+0x110>)
 8001144:	f002 fabe 	bl	80036c4 <siprintf>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	491b      	ldr	r1, [pc, #108]	; (80011c0 <displayUART+0x110>)
 8001152:	481c      	ldr	r0, [pc, #112]	; (80011c4 <displayUART+0x114>)
 8001154:	f001 fcb0 	bl	8002ab8 <HAL_UART_Transmit>
			break;
 8001158:	e02b      	b.n	80011b2 <displayUART+0x102>
		case AMBER_MODE:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!AMBER=%d#\n\r", num), 1000);
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	491b      	ldr	r1, [pc, #108]	; (80011cc <displayUART+0x11c>)
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <displayUART+0x110>)
 8001160:	f002 fab0 	bl	80036c4 <siprintf>
 8001164:	4603      	mov	r3, r0
 8001166:	b29a      	uxth	r2, r3
 8001168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116c:	4914      	ldr	r1, [pc, #80]	; (80011c0 <displayUART+0x110>)
 800116e:	4815      	ldr	r0, [pc, #84]	; (80011c4 <displayUART+0x114>)
 8001170:	f001 fca2 	bl	8002ab8 <HAL_UART_Transmit>
			break;
 8001174:	e01d      	b.n	80011b2 <displayUART+0x102>
		case GREEN_MODE:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!GREEN=%d#\n\r", num), 1000);
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	4915      	ldr	r1, [pc, #84]	; (80011d0 <displayUART+0x120>)
 800117a:	4811      	ldr	r0, [pc, #68]	; (80011c0 <displayUART+0x110>)
 800117c:	f002 faa2 	bl	80036c4 <siprintf>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001188:	490d      	ldr	r1, [pc, #52]	; (80011c0 <displayUART+0x110>)
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <displayUART+0x114>)
 800118c:	f001 fc94 	bl	8002ab8 <HAL_UART_Transmit>
			break;
 8001190:	e00f      	b.n	80011b2 <displayUART+0x102>
		case SAVED:
			HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "!SAVED#\n\r"), 1000);
 8001192:	4910      	ldr	r1, [pc, #64]	; (80011d4 <displayUART+0x124>)
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <displayUART+0x110>)
 8001196:	f002 fa95 	bl	80036c4 <siprintf>
 800119a:	4603      	mov	r3, r0
 800119c:	b29a      	uxth	r2, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	4907      	ldr	r1, [pc, #28]	; (80011c0 <displayUART+0x110>)
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <displayUART+0x114>)
 80011a6:	f001 fc87 	bl	8002ab8 <HAL_UART_Transmit>
			break;
 80011aa:	e002      	b.n	80011b2 <displayUART+0x102>
		default:
			break;
 80011ac:	bf00      	nop
 80011ae:	e000      	b.n	80011b2 <displayUART+0x102>
			break;
 80011b0:	bf00      	nop
	}



}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	08003f50 	.word	0x08003f50
 80011c0:	20000218 	.word	0x20000218
 80011c4:	20000188 	.word	0x20000188
 80011c8:	08003f5c 	.word	0x08003f5c
 80011cc:	08003f68 	.word	0x08003f68
 80011d0:	08003f78 	.word	0x08003f78
 80011d4:	08003f88 	.word	0x08003f88

080011d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d8:	f7ff fe56 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011de:	490c      	ldr	r1, [pc, #48]	; (8001210 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011f4:	4c09      	ldr	r4, [pc, #36]	; (800121c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f002 fa33 	bl	800366c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001206:	f7ff fb49 	bl	800089c <main>
  bx lr
 800120a:	4770      	bx	lr
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001214:	08003ffc 	.word	0x08003ffc
  ldr r2, =_sbss
 8001218:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 800121c:	20000240 	.word	0x20000240

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_Init+0x28>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_Init+0x28>)
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 f923 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	200f      	movs	r0, #15
 800123c:	f000 f808 	bl	8001250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff fd08 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40022000 	.word	0x40022000

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x54>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x58>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f93b 	bl	80014ea <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00e      	b.n	800129c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d80a      	bhi.n	800129a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f000 f903 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <HAL_InitTick+0x5c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000094 	.word	0x20000094
 80012a8:	200000c0 	.word	0x200000c0
 80012ac:	200000bc 	.word	0x200000bc

080012b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_IncTick+0x1c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_IncTick+0x20>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <HAL_IncTick+0x20>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	200000c0 	.word	0x200000c0
 80012d0:	2000022c 	.word	0x2000022c

080012d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b02      	ldr	r3, [pc, #8]	; (80012e4 <HAL_GetTick+0x10>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	2000022c 	.word	0x2000022c

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4906      	ldr	r1, [pc, #24]	; (8001380 <__NVIC_EnableIRQ+0x34>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f7ff ff90 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff2d 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff42 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff90 	bl	80013d8 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5f 	bl	8001384 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff35 	bl	800134c <__NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa2 	bl	800143c <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d008      	beq.n	800152c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2204      	movs	r2, #4
 800151e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e020      	b.n	800156e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 020e 	bic.w	r2, r2, #14
 800153a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d005      	beq.n	800159c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2204      	movs	r2, #4
 8001594:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	e051      	b.n	8001640 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 020e 	bic.w	r2, r2, #14
 80015aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a22      	ldr	r2, [pc, #136]	; (800164c <HAL_DMA_Abort_IT+0xd4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d029      	beq.n	800161a <HAL_DMA_Abort_IT+0xa2>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <HAL_DMA_Abort_IT+0xd8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d022      	beq.n	8001616 <HAL_DMA_Abort_IT+0x9e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <HAL_DMA_Abort_IT+0xdc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01a      	beq.n	8001610 <HAL_DMA_Abort_IT+0x98>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_DMA_Abort_IT+0xe0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d012      	beq.n	800160a <HAL_DMA_Abort_IT+0x92>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1c      	ldr	r2, [pc, #112]	; (800165c <HAL_DMA_Abort_IT+0xe4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00a      	beq.n	8001604 <HAL_DMA_Abort_IT+0x8c>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <HAL_DMA_Abort_IT+0xe8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d102      	bne.n	80015fe <HAL_DMA_Abort_IT+0x86>
 80015f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015fc:	e00e      	b.n	800161c <HAL_DMA_Abort_IT+0xa4>
 80015fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001602:	e00b      	b.n	800161c <HAL_DMA_Abort_IT+0xa4>
 8001604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001608:	e008      	b.n	800161c <HAL_DMA_Abort_IT+0xa4>
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	e005      	b.n	800161c <HAL_DMA_Abort_IT+0xa4>
 8001610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001614:	e002      	b.n	800161c <HAL_DMA_Abort_IT+0xa4>
 8001616:	2310      	movs	r3, #16
 8001618:	e000      	b.n	800161c <HAL_DMA_Abort_IT+0xa4>
 800161a:	2301      	movs	r3, #1
 800161c:	4a11      	ldr	r2, [pc, #68]	; (8001664 <HAL_DMA_Abort_IT+0xec>)
 800161e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	4798      	blx	r3
    } 
  }
  return status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40020008 	.word	0x40020008
 8001650:	4002001c 	.word	0x4002001c
 8001654:	40020030 	.word	0x40020030
 8001658:	40020044 	.word	0x40020044
 800165c:	40020058 	.word	0x40020058
 8001660:	4002006c 	.word	0x4002006c
 8001664:	40020000 	.word	0x40020000

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	e169      	b.n	8001950 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800167c:	2201      	movs	r2, #1
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	429a      	cmp	r2, r3
 8001696:	f040 8158 	bne.w	800194a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4a9a      	ldr	r2, [pc, #616]	; (8001908 <HAL_GPIO_Init+0x2a0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d05e      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016a4:	4a98      	ldr	r2, [pc, #608]	; (8001908 <HAL_GPIO_Init+0x2a0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d875      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016aa:	4a98      	ldr	r2, [pc, #608]	; (800190c <HAL_GPIO_Init+0x2a4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d058      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016b0:	4a96      	ldr	r2, [pc, #600]	; (800190c <HAL_GPIO_Init+0x2a4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d86f      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016b6:	4a96      	ldr	r2, [pc, #600]	; (8001910 <HAL_GPIO_Init+0x2a8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d052      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016bc:	4a94      	ldr	r2, [pc, #592]	; (8001910 <HAL_GPIO_Init+0x2a8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d869      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016c2:	4a94      	ldr	r2, [pc, #592]	; (8001914 <HAL_GPIO_Init+0x2ac>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d04c      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016c8:	4a92      	ldr	r2, [pc, #584]	; (8001914 <HAL_GPIO_Init+0x2ac>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d863      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016ce:	4a92      	ldr	r2, [pc, #584]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d046      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016d4:	4a90      	ldr	r2, [pc, #576]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d85d      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016da:	2b12      	cmp	r3, #18
 80016dc:	d82a      	bhi.n	8001734 <HAL_GPIO_Init+0xcc>
 80016de:	2b12      	cmp	r3, #18
 80016e0:	d859      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016e2:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <HAL_GPIO_Init+0x80>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	08001763 	.word	0x08001763
 80016ec:	0800173d 	.word	0x0800173d
 80016f0:	0800174f 	.word	0x0800174f
 80016f4:	08001791 	.word	0x08001791
 80016f8:	08001797 	.word	0x08001797
 80016fc:	08001797 	.word	0x08001797
 8001700:	08001797 	.word	0x08001797
 8001704:	08001797 	.word	0x08001797
 8001708:	08001797 	.word	0x08001797
 800170c:	08001797 	.word	0x08001797
 8001710:	08001797 	.word	0x08001797
 8001714:	08001797 	.word	0x08001797
 8001718:	08001797 	.word	0x08001797
 800171c:	08001797 	.word	0x08001797
 8001720:	08001797 	.word	0x08001797
 8001724:	08001797 	.word	0x08001797
 8001728:	08001797 	.word	0x08001797
 800172c:	08001745 	.word	0x08001745
 8001730:	08001759 	.word	0x08001759
 8001734:	4a79      	ldr	r2, [pc, #484]	; (800191c <HAL_GPIO_Init+0x2b4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800173a:	e02c      	b.n	8001796 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e029      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	3304      	adds	r3, #4
 800174a:	623b      	str	r3, [r7, #32]
          break;
 800174c:	e024      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	3308      	adds	r3, #8
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e01f      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	330c      	adds	r3, #12
 800175e:	623b      	str	r3, [r7, #32]
          break;
 8001760:	e01a      	b.n	8001798 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800176a:	2304      	movs	r3, #4
 800176c:	623b      	str	r3, [r7, #32]
          break;
 800176e:	e013      	b.n	8001798 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001778:	2308      	movs	r3, #8
 800177a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	611a      	str	r2, [r3, #16]
          break;
 8001782:	e009      	b.n	8001798 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001784:	2308      	movs	r3, #8
 8001786:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	615a      	str	r2, [r3, #20]
          break;
 800178e:	e003      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
          break;
 8001794:	e000      	b.n	8001798 <HAL_GPIO_Init+0x130>
          break;
 8001796:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2bff      	cmp	r3, #255	; 0xff
 800179c:	d801      	bhi.n	80017a2 <HAL_GPIO_Init+0x13a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	e001      	b.n	80017a6 <HAL_GPIO_Init+0x13e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3304      	adds	r3, #4
 80017a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d802      	bhi.n	80017b4 <HAL_GPIO_Init+0x14c>
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	e002      	b.n	80017ba <HAL_GPIO_Init+0x152>
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3b08      	subs	r3, #8
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	210f      	movs	r1, #15
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	401a      	ands	r2, r3
 80017cc:	6a39      	ldr	r1, [r7, #32]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80b1 	beq.w	800194a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e8:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <HAL_GPIO_Init+0x2b8>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a4c      	ldr	r2, [pc, #304]	; (8001920 <HAL_GPIO_Init+0x2b8>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <HAL_GPIO_Init+0x2b8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001800:	4a48      	ldr	r2, [pc, #288]	; (8001924 <HAL_GPIO_Init+0x2bc>)
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a40      	ldr	r2, [pc, #256]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d013      	beq.n	8001854 <HAL_GPIO_Init+0x1ec>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a3f      	ldr	r2, [pc, #252]	; (800192c <HAL_GPIO_Init+0x2c4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00d      	beq.n	8001850 <HAL_GPIO_Init+0x1e8>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3e      	ldr	r2, [pc, #248]	; (8001930 <HAL_GPIO_Init+0x2c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d007      	beq.n	800184c <HAL_GPIO_Init+0x1e4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3d      	ldr	r2, [pc, #244]	; (8001934 <HAL_GPIO_Init+0x2cc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_GPIO_Init+0x1e0>
 8001844:	2303      	movs	r3, #3
 8001846:	e006      	b.n	8001856 <HAL_GPIO_Init+0x1ee>
 8001848:	2304      	movs	r3, #4
 800184a:	e004      	b.n	8001856 <HAL_GPIO_Init+0x1ee>
 800184c:	2302      	movs	r3, #2
 800184e:	e002      	b.n	8001856 <HAL_GPIO_Init+0x1ee>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_GPIO_Init+0x1ee>
 8001854:	2300      	movs	r3, #0
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	f002 0203 	and.w	r2, r2, #3
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	4093      	lsls	r3, r2
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001866:	492f      	ldr	r1, [pc, #188]	; (8001924 <HAL_GPIO_Init+0x2bc>)
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	492c      	ldr	r1, [pc, #176]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	43db      	mvns	r3, r3
 8001896:	4928      	ldr	r1, [pc, #160]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001898:	4013      	ands	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	4922      	ldr	r1, [pc, #136]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	491e      	ldr	r1, [pc, #120]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4918      	ldr	r1, [pc, #96]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4914      	ldr	r1, [pc, #80]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d021      	beq.n	800193c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	490e      	ldr	r1, [pc, #56]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	e021      	b.n	800194a <HAL_GPIO_Init+0x2e2>
 8001906:	bf00      	nop
 8001908:	10320000 	.word	0x10320000
 800190c:	10310000 	.word	0x10310000
 8001910:	10220000 	.word	0x10220000
 8001914:	10210000 	.word	0x10210000
 8001918:	10120000 	.word	0x10120000
 800191c:	10110000 	.word	0x10110000
 8001920:	40021000 	.word	0x40021000
 8001924:	40010000 	.word	0x40010000
 8001928:	40010800 	.word	0x40010800
 800192c:	40010c00 	.word	0x40010c00
 8001930:	40011000 	.word	0x40011000
 8001934:	40011400 	.word	0x40011400
 8001938:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_GPIO_Init+0x304>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	43db      	mvns	r3, r3
 8001944:	4909      	ldr	r1, [pc, #36]	; (800196c <HAL_GPIO_Init+0x304>)
 8001946:	4013      	ands	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3301      	adds	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	fa22 f303 	lsr.w	r3, r2, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	f47f ae8e 	bne.w	800167c <HAL_GPIO_Init+0x14>
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	372c      	adds	r7, #44	; 0x2c
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e001      	b.n	8001992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	807b      	strh	r3, [r7, #2]
 80019aa:	4613      	mov	r3, r2
 80019ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ae:	787b      	ldrb	r3, [r7, #1]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b4:	887a      	ldrh	r2, [r7, #2]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019ba:	e003      	b.n	80019c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	041a      	lsls	r2, r3, #16
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	611a      	str	r2, [r3, #16]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b085      	sub	sp, #20
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019e0:	887a      	ldrh	r2, [r7, #2]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	041a      	lsls	r2, r3, #16
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	400b      	ands	r3, r1
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e26c      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8087 	beq.w	8001b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a20:	4b92      	ldr	r3, [pc, #584]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d00c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a2c:	4b8f      	ldr	r3, [pc, #572]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d112      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5e>
 8001a38:	4b8c      	ldr	r3, [pc, #560]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a44:	d10b      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a46:	4b89      	ldr	r3, [pc, #548]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d06c      	beq.n	8001b2c <HAL_RCC_OscConfig+0x12c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d168      	bne.n	8001b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e246      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x76>
 8001a68:	4b80      	ldr	r3, [pc, #512]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a7f      	ldr	r2, [pc, #508]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	e02e      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x98>
 8001a7e:	4b7b      	ldr	r3, [pc, #492]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a7a      	ldr	r2, [pc, #488]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b78      	ldr	r3, [pc, #480]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a77      	ldr	r2, [pc, #476]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e01d      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0xbc>
 8001aa2:	4b72      	ldr	r3, [pc, #456]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a71      	ldr	r2, [pc, #452]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a6e      	ldr	r2, [pc, #440]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001abc:	4b6b      	ldr	r3, [pc, #428]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6a      	ldr	r2, [pc, #424]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a67      	ldr	r2, [pc, #412]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fbfa 	bl	80012d4 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fbf6 	bl	80012d4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1fa      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b5d      	ldr	r3, [pc, #372]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xe4>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fbe6 	bl	80012d4 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fbe2 	bl	80012d4 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1e6      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x10c>
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3a:	4b4c      	ldr	r3, [pc, #304]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b46:	4b49      	ldr	r3, [pc, #292]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d11c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x18c>
 8001b52:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d116      	bne.n	8001b8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_RCC_OscConfig+0x176>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e1ba      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4939      	ldr	r1, [pc, #228]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	e03a      	b.n	8001c02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b94:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fb9b 	bl	80012d4 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fb97 	bl	80012d4 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e19b      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4927      	ldr	r1, [pc, #156]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
 8001bd4:	e015      	b.n	8001c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fb7a 	bl	80012d4 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be4:	f7ff fb76 	bl	80012d4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e17a      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d03a      	beq.n	8001c84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d019      	beq.n	8001c4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1c:	f7ff fb5a 	bl	80012d4 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff fb56 	bl	80012d4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e15a      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f000 facc 	bl	80021e0 <RCC_Delay>
 8001c48:	e01c      	b.n	8001c84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7ff fb40 	bl	80012d4 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c56:	e00f      	b.n	8001c78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff fb3c 	bl	80012d4 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d908      	bls.n	8001c78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e140      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	42420000 	.word	0x42420000
 8001c74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c78:	4b9e      	ldr	r3, [pc, #632]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e9      	bne.n	8001c58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80a6 	beq.w	8001dde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c96:	4b97      	ldr	r3, [pc, #604]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10d      	bne.n	8001cbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	4b94      	ldr	r3, [pc, #592]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a93      	ldr	r2, [pc, #588]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b91      	ldr	r3, [pc, #580]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbe:	4b8e      	ldr	r3, [pc, #568]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cca:	4b8b      	ldr	r3, [pc, #556]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a8a      	ldr	r2, [pc, #552]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd6:	f7ff fafd 	bl	80012d4 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cde:	f7ff faf9 	bl	80012d4 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e0fd      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	4b81      	ldr	r3, [pc, #516]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x312>
 8001d04:	4b7b      	ldr	r3, [pc, #492]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a7a      	ldr	r2, [pc, #488]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6213      	str	r3, [r2, #32]
 8001d10:	e02d      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x334>
 8001d1a:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a75      	ldr	r2, [pc, #468]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6213      	str	r3, [r2, #32]
 8001d26:	4b73      	ldr	r3, [pc, #460]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a72      	ldr	r2, [pc, #456]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	f023 0304 	bic.w	r3, r3, #4
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	e01c      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d10c      	bne.n	8001d56 <HAL_RCC_OscConfig+0x356>
 8001d3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4a6c      	ldr	r2, [pc, #432]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6213      	str	r3, [r2, #32]
 8001d48:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a69      	ldr	r2, [pc, #420]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	e00b      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d56:	4b67      	ldr	r3, [pc, #412]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a66      	ldr	r2, [pc, #408]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6213      	str	r3, [r2, #32]
 8001d62:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a63      	ldr	r2, [pc, #396]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d015      	beq.n	8001da2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7ff faad 	bl	80012d4 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7ff faa9 	bl	80012d4 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0ab      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	4b57      	ldr	r3, [pc, #348]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ee      	beq.n	8001d7e <HAL_RCC_OscConfig+0x37e>
 8001da0:	e014      	b.n	8001dcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da2:	f7ff fa97 	bl	80012d4 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7ff fa93 	bl	80012d4 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e095      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1ee      	bne.n	8001daa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d105      	bne.n	8001dde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b48      	ldr	r3, [pc, #288]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a47      	ldr	r2, [pc, #284]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8081 	beq.w	8001eea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de8:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d061      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d146      	bne.n	8001e8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <HAL_RCC_OscConfig+0x4fc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fa67 	bl	80012d4 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff fa63 	bl	80012d4 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e067      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1c:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d108      	bne.n	8001e44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e32:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	492d      	ldr	r1, [pc, #180]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a19      	ldr	r1, [r3, #32]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	430b      	orrs	r3, r1
 8001e56:	4927      	ldr	r1, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <HAL_RCC_OscConfig+0x4fc>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff fa37 	bl	80012d4 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7ff fa33 	bl	80012d4 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e037      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x46a>
 8001e88:	e02f      	b.n	8001eea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <HAL_RCC_OscConfig+0x4fc>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fa20 	bl	80012d4 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff fa1c 	bl	80012d4 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e020      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x498>
 8001eb6:	e018      	b.n	8001eea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e013      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	42420060 	.word	0x42420060

08001f00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0d0      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b6a      	ldr	r3, [pc, #424]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d910      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 0207 	bic.w	r2, r3, #7
 8001f2a:	4965      	ldr	r1, [pc, #404]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b63      	ldr	r3, [pc, #396]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0b8      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a58      	ldr	r2, [pc, #352]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	494d      	ldr	r1, [pc, #308]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d040      	beq.n	8002020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d115      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e07f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d109      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e073      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e06b      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fde:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f023 0203 	bic.w	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4936      	ldr	r1, [pc, #216]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff0:	f7ff f970 	bl	80012d4 <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7ff f96c 	bl	80012d4 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e053      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 020c 	and.w	r2, r3, #12
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	429a      	cmp	r2, r3
 800201e:	d1eb      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d210      	bcs.n	8002050 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 0207 	bic.w	r2, r3, #7
 8002036:	4922      	ldr	r1, [pc, #136]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e032      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4916      	ldr	r1, [pc, #88]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	490e      	ldr	r1, [pc, #56]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800208e:	f000 f821 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002092:	4602      	mov	r2, r0
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	490a      	ldr	r1, [pc, #40]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020a0:	5ccb      	ldrb	r3, [r1, r3]
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1cc>)
 80020a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1d0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f8ce 	bl	8001250 <HAL_InitTick>

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08003f94 	.word	0x08003f94
 80020cc:	20000094 	.word	0x20000094
 80020d0:	200000bc 	.word	0x200000bc

080020d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_RCC_GetSysClockFreq+0x94>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d002      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x30>
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d003      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0x36>
 8002102:	e027      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_RCC_GetSysClockFreq+0x98>)
 8002106:	613b      	str	r3, [r7, #16]
      break;
 8002108:	e027      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	0c9b      	lsrs	r3, r3, #18
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002114:	5cd3      	ldrb	r3, [r2, r3]
 8002116:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d010      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_RCC_GetSysClockFreq+0x94>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	0c5b      	lsrs	r3, r3, #17
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_RCC_GetSysClockFreq+0xa0>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <HAL_RCC_GetSysClockFreq+0x98>)
 8002136:	fb02 f203 	mul.w	r2, r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	e004      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	613b      	str	r3, [r7, #16]
      break;
 8002152:	e002      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetSysClockFreq+0x98>)
 8002156:	613b      	str	r3, [r7, #16]
      break;
 8002158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215a:	693b      	ldr	r3, [r7, #16]
}
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	007a1200 	.word	0x007a1200
 8002170:	08003fac 	.word	0x08003fac
 8002174:	08003fbc 	.word	0x08003fbc
 8002178:	003d0900 	.word	0x003d0900

0800217c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <HAL_RCC_GetHCLKFreq+0x10>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20000094 	.word	0x20000094

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002194:	f7ff fff2 	bl	800217c <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08003fa4 	.word	0x08003fa4

080021b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021bc:	f7ff ffde 	bl	800217c <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	0adb      	lsrs	r3, r3, #11
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4903      	ldr	r1, [pc, #12]	; (80021dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08003fa4 	.word	0x08003fa4

080021e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <RCC_Delay+0x34>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <RCC_Delay+0x38>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0a5b      	lsrs	r3, r3, #9
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021fc:	bf00      	nop
  }
  while (Delay --);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	60fa      	str	r2, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f9      	bne.n	80021fc <RCC_Delay+0x1c>
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	20000094 	.word	0x20000094
 8002218:	10624dd3 	.word	0x10624dd3

0800221c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e041      	b.n	80022b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fd38 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3304      	adds	r3, #4
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f000 fa74 	bl	8002748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d001      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e03a      	b.n	800234a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HAL_TIM_Base_Start_IT+0x98>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00e      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x58>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fe:	d009      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x58>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_TIM_Base_Start_IT+0x9c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d004      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x58>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a13      	ldr	r2, [pc, #76]	; (800235c <HAL_TIM_Base_Start_IT+0xa0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d111      	bne.n	8002338 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b06      	cmp	r3, #6
 8002324:	d010      	beq.n	8002348 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002336:	e007      	b.n	8002348 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40000400 	.word	0x40000400
 800235c:	40000800 	.word	0x40000800

08002360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d122      	bne.n	80023bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b02      	cmp	r3, #2
 8002382:	d11b      	bne.n	80023bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0202 	mvn.w	r2, #2
 800238c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f9b4 	bl	8002710 <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f9a7 	bl	80026fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f9b6 	bl	8002722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d122      	bne.n	8002410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d11b      	bne.n	8002410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0204 	mvn.w	r2, #4
 80023e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f98a 	bl	8002710 <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f97d 	bl	80026fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f98c 	bl	8002722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b08      	cmp	r3, #8
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b08      	cmp	r3, #8
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0208 	mvn.w	r2, #8
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2204      	movs	r2, #4
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f960 	bl	8002710 <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f953 	bl	80026fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f962 	bl	8002722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b10      	cmp	r3, #16
 8002470:	d122      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b10      	cmp	r3, #16
 800247e:	d11b      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0210 	mvn.w	r2, #16
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2208      	movs	r2, #8
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f936 	bl	8002710 <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f929 	bl	80026fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f938 	bl	8002722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d10e      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0201 	mvn.w	r2, #1
 80024dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fb3a 	bl	8000b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ee:	2b80      	cmp	r3, #128	; 0x80
 80024f0:	d10e      	bne.n	8002510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b80      	cmp	r3, #128	; 0x80
 80024fe:	d107      	bne.n	8002510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa7b 	bl	8002a06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b40      	cmp	r3, #64	; 0x40
 800251c:	d10e      	bne.n	800253c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d107      	bne.n	800253c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f8fc 	bl	8002734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b20      	cmp	r3, #32
 8002548:	d10e      	bne.n	8002568 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b20      	cmp	r3, #32
 8002556:	d107      	bne.n	8002568 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0220 	mvn.w	r2, #32
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fa46 	bl	80029f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_TIM_ConfigClockSource+0x1c>
 8002588:	2302      	movs	r3, #2
 800258a:	e0b4      	b.n	80026f6 <HAL_TIM_ConfigClockSource+0x186>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c4:	d03e      	beq.n	8002644 <HAL_TIM_ConfigClockSource+0xd4>
 80025c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ca:	f200 8087 	bhi.w	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d2:	f000 8086 	beq.w	80026e2 <HAL_TIM_ConfigClockSource+0x172>
 80025d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025da:	d87f      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025dc:	2b70      	cmp	r3, #112	; 0x70
 80025de:	d01a      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0xa6>
 80025e0:	2b70      	cmp	r3, #112	; 0x70
 80025e2:	d87b      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025e4:	2b60      	cmp	r3, #96	; 0x60
 80025e6:	d050      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x11a>
 80025e8:	2b60      	cmp	r3, #96	; 0x60
 80025ea:	d877      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025ec:	2b50      	cmp	r3, #80	; 0x50
 80025ee:	d03c      	beq.n	800266a <HAL_TIM_ConfigClockSource+0xfa>
 80025f0:	2b50      	cmp	r3, #80	; 0x50
 80025f2:	d873      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025f4:	2b40      	cmp	r3, #64	; 0x40
 80025f6:	d058      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x13a>
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d86f      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025fc:	2b30      	cmp	r3, #48	; 0x30
 80025fe:	d064      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x15a>
 8002600:	2b30      	cmp	r3, #48	; 0x30
 8002602:	d86b      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 8002604:	2b20      	cmp	r3, #32
 8002606:	d060      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x15a>
 8002608:	2b20      	cmp	r3, #32
 800260a:	d867      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d05c      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x15a>
 8002610:	2b10      	cmp	r3, #16
 8002612:	d05a      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x15a>
 8002614:	e062      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f000 f968 	bl	80028fa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	609a      	str	r2, [r3, #8]
      break;
 8002642:	e04f      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6899      	ldr	r1, [r3, #8]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f000 f951 	bl	80028fa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002666:	609a      	str	r2, [r3, #8]
      break;
 8002668:	e03c      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	461a      	mov	r2, r3
 8002678:	f000 f8c8 	bl	800280c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2150      	movs	r1, #80	; 0x50
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f91f 	bl	80028c6 <TIM_ITRx_SetConfig>
      break;
 8002688:	e02c      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	461a      	mov	r2, r3
 8002698:	f000 f8e6 	bl	8002868 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2160      	movs	r1, #96	; 0x60
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f90f 	bl	80028c6 <TIM_ITRx_SetConfig>
      break;
 80026a8:	e01c      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6859      	ldr	r1, [r3, #4]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	461a      	mov	r2, r3
 80026b8:	f000 f8a8 	bl	800280c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2140      	movs	r1, #64	; 0x40
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f8ff 	bl	80028c6 <TIM_ITRx_SetConfig>
      break;
 80026c8:	e00c      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f000 f8f6 	bl	80028c6 <TIM_ITRx_SetConfig>
      break;
 80026da:	e003      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      break;
 80026e0:	e000      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
	...

08002748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a29      	ldr	r2, [pc, #164]	; (8002800 <TIM_Base_SetConfig+0xb8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00b      	beq.n	8002778 <TIM_Base_SetConfig+0x30>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002766:	d007      	beq.n	8002778 <TIM_Base_SetConfig+0x30>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a26      	ldr	r2, [pc, #152]	; (8002804 <TIM_Base_SetConfig+0xbc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <TIM_Base_SetConfig+0x30>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a25      	ldr	r2, [pc, #148]	; (8002808 <TIM_Base_SetConfig+0xc0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d108      	bne.n	800278a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <TIM_Base_SetConfig+0xb8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00b      	beq.n	80027aa <TIM_Base_SetConfig+0x62>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002798:	d007      	beq.n	80027aa <TIM_Base_SetConfig+0x62>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a19      	ldr	r2, [pc, #100]	; (8002804 <TIM_Base_SetConfig+0xbc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d003      	beq.n	80027aa <TIM_Base_SetConfig+0x62>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a18      	ldr	r2, [pc, #96]	; (8002808 <TIM_Base_SetConfig+0xc0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d108      	bne.n	80027bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a07      	ldr	r2, [pc, #28]	; (8002800 <TIM_Base_SetConfig+0xb8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d103      	bne.n	80027f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	615a      	str	r2, [r3, #20]
}
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800

0800280c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	f023 0201 	bic.w	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f023 030a 	bic.w	r3, r3, #10
 8002848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f023 0210 	bic.w	r2, r3, #16
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	031b      	lsls	r3, r3, #12
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	621a      	str	r2, [r3, #32]
}
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f043 0307 	orr.w	r3, r3, #7
 80028e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	609a      	str	r2, [r3, #8]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b087      	sub	sp, #28
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002914:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	021a      	lsls	r2, r3, #8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	431a      	orrs	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	4313      	orrs	r3, r2
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	609a      	str	r2, [r3, #8]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800294c:	2302      	movs	r3, #2
 800294e:	e046      	b.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00e      	beq.n	80029b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d009      	beq.n	80029b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a12      	ldr	r2, [pc, #72]	; (80029ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a10      	ldr	r2, [pc, #64]	; (80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10c      	bne.n	80029cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	40012c00 	.word	0x40012c00
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800

080029f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e042      	b.n	8002ab0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe f95e 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	; 0x24
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fd71 	bl	8003544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d16d      	bne.n	8002bb4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_UART_Transmit+0x2c>
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e066      	b.n	8002bb6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2221      	movs	r2, #33	; 0x21
 8002af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002af6:	f7fe fbed 	bl	80012d4 <HAL_GetTick>
 8002afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	88fa      	ldrh	r2, [r7, #6]
 8002b06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b10:	d108      	bne.n	8002b24 <HAL_UART_Transmit+0x6c>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d104      	bne.n	8002b24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e003      	b.n	8002b2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b2c:	e02a      	b.n	8002b84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2180      	movs	r1, #128	; 0x80
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 faf9 	bl	8003130 <UART_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e036      	b.n	8002bb6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10b      	bne.n	8002b66 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	3302      	adds	r3, #2
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e007      	b.n	8002b76 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	3301      	adds	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1cf      	bne.n	8002b2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2140      	movs	r1, #64	; 0x40
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fac9 	bl	8003130 <UART_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e006      	b.n	8002bb6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b0ba      	sub	sp, #232	; 0xe8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10f      	bne.n	8002c26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_UART_IRQHandler+0x66>
 8002c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fbd1 	bl	80033c6 <UART_Receive_IT>
      return;
 8002c24:	e25b      	b.n	80030de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80de 	beq.w	8002dec <HAL_UART_IRQHandler+0x22c>
 8002c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80d1 	beq.w	8002dec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <HAL_UART_IRQHandler+0xae>
 8002c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_UART_IRQHandler+0xd2>
 8002c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f043 0202 	orr.w	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_UART_IRQHandler+0xf6>
 8002c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f043 0204 	orr.w	r2, r3, #4
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d011      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x126>
 8002cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d105      	bne.n	8002cda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f043 0208 	orr.w	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 81f2 	beq.w	80030d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_UART_IRQHandler+0x14e>
 8002cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fb5c 	bl	80033c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf14      	ite	ne
 8002d1c:	2301      	movne	r3, #1
 8002d1e:	2300      	moveq	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d103      	bne.n	8002d3a <HAL_UART_IRQHandler+0x17a>
 8002d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d04f      	beq.n	8002dda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa66 	bl	800320c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d041      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3314      	adds	r3, #20
 8002d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d5c:	e853 3f00 	ldrex	r3, [r3]
 8002d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3314      	adds	r3, #20
 8002d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1d9      	bne.n	8002d4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d013      	beq.n	8002dca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	4a7e      	ldr	r2, [pc, #504]	; (8002fa0 <HAL_UART_IRQHandler+0x3e0>)
 8002da8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fbe2 	bl	8001578 <HAL_DMA_Abort_IT>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	e00e      	b.n	8002de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f99c 	bl	8003108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd0:	e00a      	b.n	8002de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f998 	bl	8003108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	e006      	b.n	8002de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f994 	bl	8003108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002de6:	e175      	b.n	80030d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de8:	bf00      	nop
    return;
 8002dea:	e173      	b.n	80030d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	f040 814f 	bne.w	8003094 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8148 	beq.w	8003094 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8141 	beq.w	8003094 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80b6 	beq.w	8002fa4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8145 	beq.w	80030d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e56:	429a      	cmp	r2, r3
 8002e58:	f080 813e 	bcs.w	80030d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	f000 8088 	beq.w	8002f80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e7e:	e853 3f00 	ldrex	r3, [r3]
 8002e82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	330c      	adds	r3, #12
 8002e98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e9c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ea0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ea8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1d9      	bne.n	8002e70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec6:	e853 3f00 	ldrex	r3, [r3]
 8002eca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3314      	adds	r3, #20
 8002edc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ee0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ee4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ee8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002eec:	e841 2300 	strex	r3, r2, [r1]
 8002ef0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e1      	bne.n	8002ebc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3314      	adds	r3, #20
 8002efe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f02:	e853 3f00 	ldrex	r3, [r3]
 8002f06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3314      	adds	r3, #20
 8002f18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e3      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f48:	e853 3f00 	ldrex	r3, [r3]
 8002f4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f50:	f023 0310 	bic.w	r3, r3, #16
 8002f54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f62:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e3      	bne.n	8002f3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fac1 	bl	8001502 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4619      	mov	r1, r3
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f8bf 	bl	800311a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f9c:	e09c      	b.n	80030d8 <HAL_UART_IRQHandler+0x518>
 8002f9e:	bf00      	nop
 8002fa0:	080032d1 	.word	0x080032d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 808e 	beq.w	80030dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8089 	beq.w	80030dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	330c      	adds	r3, #12
 8002fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002fee:	647a      	str	r2, [r7, #68]	; 0x44
 8002ff0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ff6:	e841 2300 	strex	r3, r2, [r1]
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1e3      	bne.n	8002fca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3314      	adds	r3, #20
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	623b      	str	r3, [r7, #32]
   return(result);
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3314      	adds	r3, #20
 8003022:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003026:	633a      	str	r2, [r7, #48]	; 0x30
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800302c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e3      	bne.n	8003002 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	330c      	adds	r3, #12
 800304e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	60fb      	str	r3, [r7, #12]
   return(result);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0310 	bic.w	r3, r3, #16
 800305e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800306c:	61fa      	str	r2, [r7, #28]
 800306e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003070:	69b9      	ldr	r1, [r7, #24]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	e841 2300 	strex	r3, r2, [r1]
 8003078:	617b      	str	r3, [r7, #20]
   return(result);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e3      	bne.n	8003048 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003086:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f844 	bl	800311a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003092:	e023      	b.n	80030dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <HAL_UART_IRQHandler+0x4f4>
 80030a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f923 	bl	80032f8 <UART_Transmit_IT>
    return;
 80030b2:	e014      	b.n	80030de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <HAL_UART_IRQHandler+0x51e>
 80030c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f962 	bl	8003396 <UART_EndTransmit_IT>
    return;
 80030d2:	e004      	b.n	80030de <HAL_UART_IRQHandler+0x51e>
    return;
 80030d4:	bf00      	nop
 80030d6:	e002      	b.n	80030de <HAL_UART_IRQHandler+0x51e>
      return;
 80030d8:	bf00      	nop
 80030da:	e000      	b.n	80030de <HAL_UART_IRQHandler+0x51e>
      return;
 80030dc:	bf00      	nop
  }
}
 80030de:	37e8      	adds	r7, #232	; 0xe8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b090      	sub	sp, #64	; 0x40
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003140:	e050      	b.n	80031e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d04c      	beq.n	80031e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800314a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <UART_WaitOnFlagUntilTimeout+0x30>
 8003150:	f7fe f8c0 	bl	80012d4 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800315c:	429a      	cmp	r2, r3
 800315e:	d241      	bcs.n	80031e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	330c      	adds	r3, #12
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	e853 3f00 	ldrex	r3, [r3]
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003180:	637a      	str	r2, [r7, #52]	; 0x34
 8003182:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003184:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003188:	e841 2300 	strex	r3, r2, [r1]
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e5      	bne.n	8003160 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3314      	adds	r3, #20
 800319a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	613b      	str	r3, [r7, #16]
   return(result);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3314      	adds	r3, #20
 80031b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b4:	623a      	str	r2, [r7, #32]
 80031b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	69f9      	ldr	r1, [r7, #28]
 80031ba:	6a3a      	ldr	r2, [r7, #32]
 80031bc:	e841 2300 	strex	r3, r2, [r1]
 80031c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e5      	bne.n	8003194 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e00f      	b.n	8003204 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4013      	ands	r3, r2
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d09f      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3740      	adds	r7, #64	; 0x40
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800320c:	b480      	push	{r7}
 800320e:	b095      	sub	sp, #84	; 0x54
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800322a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003234:	643a      	str	r2, [r7, #64]	; 0x40
 8003236:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800323a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e5      	bne.n	8003214 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3314      	adds	r3, #20
 800324e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	e853 3f00 	ldrex	r3, [r3]
 8003256:	61fb      	str	r3, [r7, #28]
   return(result);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3314      	adds	r3, #20
 8003266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003268:	62fa      	str	r2, [r7, #44]	; 0x2c
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800326e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003270:	e841 2300 	strex	r3, r2, [r1]
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1e5      	bne.n	8003248 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	2b01      	cmp	r3, #1
 8003282:	d119      	bne.n	80032b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	e853 3f00 	ldrex	r3, [r3]
 8003292:	60bb      	str	r3, [r7, #8]
   return(result);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f023 0310 	bic.w	r3, r3, #16
 800329a:	647b      	str	r3, [r7, #68]	; 0x44
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	330c      	adds	r3, #12
 80032a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032a4:	61ba      	str	r2, [r7, #24]
 80032a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a8:	6979      	ldr	r1, [r7, #20]
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	e841 2300 	strex	r3, r2, [r1]
 80032b0:	613b      	str	r3, [r7, #16]
   return(result);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e5      	bne.n	8003284 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032c6:	bf00      	nop
 80032c8:	3754      	adds	r7, #84	; 0x54
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7ff ff0c 	bl	8003108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b21      	cmp	r3, #33	; 0x21
 800330a:	d13e      	bne.n	800338a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003314:	d114      	bne.n	8003340 <UART_Transmit_IT+0x48>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d110      	bne.n	8003340 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003332:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	1c9a      	adds	r2, r3, #2
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	621a      	str	r2, [r3, #32]
 800333e:	e008      	b.n	8003352 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	1c59      	adds	r1, r3, #1
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6211      	str	r1, [r2, #32]
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29b      	uxth	r3, r3
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4619      	mov	r1, r3
 8003360:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10f      	bne.n	8003386 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003374:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003384:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff fe94 	bl	80030e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b08c      	sub	sp, #48	; 0x30
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b22      	cmp	r3, #34	; 0x22
 80033d8:	f040 80ae 	bne.w	8003538 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e4:	d117      	bne.n	8003416 <UART_Receive_IT+0x50>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d113      	bne.n	8003416 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003404:	b29a      	uxth	r2, r3
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	1c9a      	adds	r2, r3, #2
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	; 0x28
 8003414:	e026      	b.n	8003464 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800341c:	2300      	movs	r3, #0
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003428:	d007      	beq.n	800343a <UART_Receive_IT+0x74>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <UART_Receive_IT+0x82>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e008      	b.n	800345a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003454:	b2da      	uxtb	r2, r3
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29b      	uxth	r3, r3
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4619      	mov	r1, r3
 8003472:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003474:	2b00      	cmp	r3, #0
 8003476:	d15d      	bne.n	8003534 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0220 	bic.w	r2, r2, #32
 8003486:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003496:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d135      	bne.n	800352a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	613b      	str	r3, [r7, #16]
   return(result);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f023 0310 	bic.w	r3, r3, #16
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e4:	623a      	str	r2, [r7, #32]
 80034e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	69f9      	ldr	r1, [r7, #28]
 80034ea:	6a3a      	ldr	r2, [r7, #32]
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e5      	bne.n	80034c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b10      	cmp	r3, #16
 8003504:	d10a      	bne.n	800351c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff fdf9 	bl	800311a <HAL_UARTEx_RxEventCallback>
 8003528:	e002      	b.n	8003530 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fde3 	bl	80030f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e002      	b.n	800353a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3730      	adds	r7, #48	; 0x30
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800357e:	f023 030c 	bic.w	r3, r3, #12
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	430b      	orrs	r3, r1
 800358a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2c      	ldr	r2, [pc, #176]	; (8003658 <UART_SetConfig+0x114>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035ac:	f7fe fe04 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	e002      	b.n	80035ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035b4:	f7fe fdec 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80035b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009a      	lsls	r2, r3, #2
 80035c4:	441a      	add	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	4a22      	ldr	r2, [pc, #136]	; (800365c <UART_SetConfig+0x118>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	0119      	lsls	r1, r3, #4
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009a      	lsls	r2, r3, #2
 80035e4:	441a      	add	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <UART_SetConfig+0x118>)
 80035f2:	fba3 0302 	umull	r0, r3, r3, r2
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2064      	movs	r0, #100	; 0x64
 80035fa:	fb00 f303 	mul.w	r3, r0, r3
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	3332      	adds	r3, #50	; 0x32
 8003604:	4a15      	ldr	r2, [pc, #84]	; (800365c <UART_SetConfig+0x118>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003610:	4419      	add	r1, r3
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	009a      	lsls	r2, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fbb2 f2f3 	udiv	r2, r2, r3
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <UART_SetConfig+0x118>)
 800362a:	fba3 0302 	umull	r0, r3, r3, r2
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2064      	movs	r0, #100	; 0x64
 8003632:	fb00 f303 	mul.w	r3, r0, r3
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	3332      	adds	r3, #50	; 0x32
 800363c:	4a07      	ldr	r2, [pc, #28]	; (800365c <UART_SetConfig+0x118>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	440a      	add	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40013800 	.word	0x40013800
 800365c:	51eb851f 	.word	0x51eb851f

08003660 <__errno>:
 8003660:	4b01      	ldr	r3, [pc, #4]	; (8003668 <__errno+0x8>)
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	200000c4 	.word	0x200000c4

0800366c <__libc_init_array>:
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	2600      	movs	r6, #0
 8003670:	4d0c      	ldr	r5, [pc, #48]	; (80036a4 <__libc_init_array+0x38>)
 8003672:	4c0d      	ldr	r4, [pc, #52]	; (80036a8 <__libc_init_array+0x3c>)
 8003674:	1b64      	subs	r4, r4, r5
 8003676:	10a4      	asrs	r4, r4, #2
 8003678:	42a6      	cmp	r6, r4
 800367a:	d109      	bne.n	8003690 <__libc_init_array+0x24>
 800367c:	f000 fc5c 	bl	8003f38 <_init>
 8003680:	2600      	movs	r6, #0
 8003682:	4d0a      	ldr	r5, [pc, #40]	; (80036ac <__libc_init_array+0x40>)
 8003684:	4c0a      	ldr	r4, [pc, #40]	; (80036b0 <__libc_init_array+0x44>)
 8003686:	1b64      	subs	r4, r4, r5
 8003688:	10a4      	asrs	r4, r4, #2
 800368a:	42a6      	cmp	r6, r4
 800368c:	d105      	bne.n	800369a <__libc_init_array+0x2e>
 800368e:	bd70      	pop	{r4, r5, r6, pc}
 8003690:	f855 3b04 	ldr.w	r3, [r5], #4
 8003694:	4798      	blx	r3
 8003696:	3601      	adds	r6, #1
 8003698:	e7ee      	b.n	8003678 <__libc_init_array+0xc>
 800369a:	f855 3b04 	ldr.w	r3, [r5], #4
 800369e:	4798      	blx	r3
 80036a0:	3601      	adds	r6, #1
 80036a2:	e7f2      	b.n	800368a <__libc_init_array+0x1e>
 80036a4:	08003ff4 	.word	0x08003ff4
 80036a8:	08003ff4 	.word	0x08003ff4
 80036ac:	08003ff4 	.word	0x08003ff4
 80036b0:	08003ff8 	.word	0x08003ff8

080036b4 <memset>:
 80036b4:	4603      	mov	r3, r0
 80036b6:	4402      	add	r2, r0
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d100      	bne.n	80036be <memset+0xa>
 80036bc:	4770      	bx	lr
 80036be:	f803 1b01 	strb.w	r1, [r3], #1
 80036c2:	e7f9      	b.n	80036b8 <memset+0x4>

080036c4 <siprintf>:
 80036c4:	b40e      	push	{r1, r2, r3}
 80036c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036ca:	b500      	push	{lr}
 80036cc:	b09c      	sub	sp, #112	; 0x70
 80036ce:	ab1d      	add	r3, sp, #116	; 0x74
 80036d0:	9002      	str	r0, [sp, #8]
 80036d2:	9006      	str	r0, [sp, #24]
 80036d4:	9107      	str	r1, [sp, #28]
 80036d6:	9104      	str	r1, [sp, #16]
 80036d8:	4808      	ldr	r0, [pc, #32]	; (80036fc <siprintf+0x38>)
 80036da:	4909      	ldr	r1, [pc, #36]	; (8003700 <siprintf+0x3c>)
 80036dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80036e0:	9105      	str	r1, [sp, #20]
 80036e2:	6800      	ldr	r0, [r0, #0]
 80036e4:	a902      	add	r1, sp, #8
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	f000 f868 	bl	80037bc <_svfiprintf_r>
 80036ec:	2200      	movs	r2, #0
 80036ee:	9b02      	ldr	r3, [sp, #8]
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	b01c      	add	sp, #112	; 0x70
 80036f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f8:	b003      	add	sp, #12
 80036fa:	4770      	bx	lr
 80036fc:	200000c4 	.word	0x200000c4
 8003700:	ffff0208 	.word	0xffff0208

08003704 <__ssputs_r>:
 8003704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003708:	688e      	ldr	r6, [r1, #8]
 800370a:	4682      	mov	sl, r0
 800370c:	429e      	cmp	r6, r3
 800370e:	460c      	mov	r4, r1
 8003710:	4690      	mov	r8, r2
 8003712:	461f      	mov	r7, r3
 8003714:	d838      	bhi.n	8003788 <__ssputs_r+0x84>
 8003716:	898a      	ldrh	r2, [r1, #12]
 8003718:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800371c:	d032      	beq.n	8003784 <__ssputs_r+0x80>
 800371e:	6825      	ldr	r5, [r4, #0]
 8003720:	6909      	ldr	r1, [r1, #16]
 8003722:	3301      	adds	r3, #1
 8003724:	eba5 0901 	sub.w	r9, r5, r1
 8003728:	6965      	ldr	r5, [r4, #20]
 800372a:	444b      	add	r3, r9
 800372c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003734:	106d      	asrs	r5, r5, #1
 8003736:	429d      	cmp	r5, r3
 8003738:	bf38      	it	cc
 800373a:	461d      	movcc	r5, r3
 800373c:	0553      	lsls	r3, r2, #21
 800373e:	d531      	bpl.n	80037a4 <__ssputs_r+0xa0>
 8003740:	4629      	mov	r1, r5
 8003742:	f000 fb53 	bl	8003dec <_malloc_r>
 8003746:	4606      	mov	r6, r0
 8003748:	b950      	cbnz	r0, 8003760 <__ssputs_r+0x5c>
 800374a:	230c      	movs	r3, #12
 800374c:	f04f 30ff 	mov.w	r0, #4294967295
 8003750:	f8ca 3000 	str.w	r3, [sl]
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800375a:	81a3      	strh	r3, [r4, #12]
 800375c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003760:	464a      	mov	r2, r9
 8003762:	6921      	ldr	r1, [r4, #16]
 8003764:	f000 face 	bl	8003d04 <memcpy>
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800376e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003772:	81a3      	strh	r3, [r4, #12]
 8003774:	6126      	str	r6, [r4, #16]
 8003776:	444e      	add	r6, r9
 8003778:	6026      	str	r6, [r4, #0]
 800377a:	463e      	mov	r6, r7
 800377c:	6165      	str	r5, [r4, #20]
 800377e:	eba5 0509 	sub.w	r5, r5, r9
 8003782:	60a5      	str	r5, [r4, #8]
 8003784:	42be      	cmp	r6, r7
 8003786:	d900      	bls.n	800378a <__ssputs_r+0x86>
 8003788:	463e      	mov	r6, r7
 800378a:	4632      	mov	r2, r6
 800378c:	4641      	mov	r1, r8
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	f000 fac6 	bl	8003d20 <memmove>
 8003794:	68a3      	ldr	r3, [r4, #8]
 8003796:	6822      	ldr	r2, [r4, #0]
 8003798:	1b9b      	subs	r3, r3, r6
 800379a:	4432      	add	r2, r6
 800379c:	2000      	movs	r0, #0
 800379e:	60a3      	str	r3, [r4, #8]
 80037a0:	6022      	str	r2, [r4, #0]
 80037a2:	e7db      	b.n	800375c <__ssputs_r+0x58>
 80037a4:	462a      	mov	r2, r5
 80037a6:	f000 fb7b 	bl	8003ea0 <_realloc_r>
 80037aa:	4606      	mov	r6, r0
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d1e1      	bne.n	8003774 <__ssputs_r+0x70>
 80037b0:	4650      	mov	r0, sl
 80037b2:	6921      	ldr	r1, [r4, #16]
 80037b4:	f000 face 	bl	8003d54 <_free_r>
 80037b8:	e7c7      	b.n	800374a <__ssputs_r+0x46>
	...

080037bc <_svfiprintf_r>:
 80037bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c0:	4698      	mov	r8, r3
 80037c2:	898b      	ldrh	r3, [r1, #12]
 80037c4:	4607      	mov	r7, r0
 80037c6:	061b      	lsls	r3, r3, #24
 80037c8:	460d      	mov	r5, r1
 80037ca:	4614      	mov	r4, r2
 80037cc:	b09d      	sub	sp, #116	; 0x74
 80037ce:	d50e      	bpl.n	80037ee <_svfiprintf_r+0x32>
 80037d0:	690b      	ldr	r3, [r1, #16]
 80037d2:	b963      	cbnz	r3, 80037ee <_svfiprintf_r+0x32>
 80037d4:	2140      	movs	r1, #64	; 0x40
 80037d6:	f000 fb09 	bl	8003dec <_malloc_r>
 80037da:	6028      	str	r0, [r5, #0]
 80037dc:	6128      	str	r0, [r5, #16]
 80037de:	b920      	cbnz	r0, 80037ea <_svfiprintf_r+0x2e>
 80037e0:	230c      	movs	r3, #12
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	e0d1      	b.n	800398e <_svfiprintf_r+0x1d2>
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	616b      	str	r3, [r5, #20]
 80037ee:	2300      	movs	r3, #0
 80037f0:	9309      	str	r3, [sp, #36]	; 0x24
 80037f2:	2320      	movs	r3, #32
 80037f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037f8:	2330      	movs	r3, #48	; 0x30
 80037fa:	f04f 0901 	mov.w	r9, #1
 80037fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003802:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80039a8 <_svfiprintf_r+0x1ec>
 8003806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800380a:	4623      	mov	r3, r4
 800380c:	469a      	mov	sl, r3
 800380e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003812:	b10a      	cbz	r2, 8003818 <_svfiprintf_r+0x5c>
 8003814:	2a25      	cmp	r2, #37	; 0x25
 8003816:	d1f9      	bne.n	800380c <_svfiprintf_r+0x50>
 8003818:	ebba 0b04 	subs.w	fp, sl, r4
 800381c:	d00b      	beq.n	8003836 <_svfiprintf_r+0x7a>
 800381e:	465b      	mov	r3, fp
 8003820:	4622      	mov	r2, r4
 8003822:	4629      	mov	r1, r5
 8003824:	4638      	mov	r0, r7
 8003826:	f7ff ff6d 	bl	8003704 <__ssputs_r>
 800382a:	3001      	adds	r0, #1
 800382c:	f000 80aa 	beq.w	8003984 <_svfiprintf_r+0x1c8>
 8003830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003832:	445a      	add	r2, fp
 8003834:	9209      	str	r2, [sp, #36]	; 0x24
 8003836:	f89a 3000 	ldrb.w	r3, [sl]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80a2 	beq.w	8003984 <_svfiprintf_r+0x1c8>
 8003840:	2300      	movs	r3, #0
 8003842:	f04f 32ff 	mov.w	r2, #4294967295
 8003846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800384a:	f10a 0a01 	add.w	sl, sl, #1
 800384e:	9304      	str	r3, [sp, #16]
 8003850:	9307      	str	r3, [sp, #28]
 8003852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003856:	931a      	str	r3, [sp, #104]	; 0x68
 8003858:	4654      	mov	r4, sl
 800385a:	2205      	movs	r2, #5
 800385c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003860:	4851      	ldr	r0, [pc, #324]	; (80039a8 <_svfiprintf_r+0x1ec>)
 8003862:	f000 fa41 	bl	8003ce8 <memchr>
 8003866:	9a04      	ldr	r2, [sp, #16]
 8003868:	b9d8      	cbnz	r0, 80038a2 <_svfiprintf_r+0xe6>
 800386a:	06d0      	lsls	r0, r2, #27
 800386c:	bf44      	itt	mi
 800386e:	2320      	movmi	r3, #32
 8003870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003874:	0711      	lsls	r1, r2, #28
 8003876:	bf44      	itt	mi
 8003878:	232b      	movmi	r3, #43	; 0x2b
 800387a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800387e:	f89a 3000 	ldrb.w	r3, [sl]
 8003882:	2b2a      	cmp	r3, #42	; 0x2a
 8003884:	d015      	beq.n	80038b2 <_svfiprintf_r+0xf6>
 8003886:	4654      	mov	r4, sl
 8003888:	2000      	movs	r0, #0
 800388a:	f04f 0c0a 	mov.w	ip, #10
 800388e:	9a07      	ldr	r2, [sp, #28]
 8003890:	4621      	mov	r1, r4
 8003892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003896:	3b30      	subs	r3, #48	; 0x30
 8003898:	2b09      	cmp	r3, #9
 800389a:	d94e      	bls.n	800393a <_svfiprintf_r+0x17e>
 800389c:	b1b0      	cbz	r0, 80038cc <_svfiprintf_r+0x110>
 800389e:	9207      	str	r2, [sp, #28]
 80038a0:	e014      	b.n	80038cc <_svfiprintf_r+0x110>
 80038a2:	eba0 0308 	sub.w	r3, r0, r8
 80038a6:	fa09 f303 	lsl.w	r3, r9, r3
 80038aa:	4313      	orrs	r3, r2
 80038ac:	46a2      	mov	sl, r4
 80038ae:	9304      	str	r3, [sp, #16]
 80038b0:	e7d2      	b.n	8003858 <_svfiprintf_r+0x9c>
 80038b2:	9b03      	ldr	r3, [sp, #12]
 80038b4:	1d19      	adds	r1, r3, #4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	9103      	str	r1, [sp, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bfbb      	ittet	lt
 80038be:	425b      	neglt	r3, r3
 80038c0:	f042 0202 	orrlt.w	r2, r2, #2
 80038c4:	9307      	strge	r3, [sp, #28]
 80038c6:	9307      	strlt	r3, [sp, #28]
 80038c8:	bfb8      	it	lt
 80038ca:	9204      	strlt	r2, [sp, #16]
 80038cc:	7823      	ldrb	r3, [r4, #0]
 80038ce:	2b2e      	cmp	r3, #46	; 0x2e
 80038d0:	d10c      	bne.n	80038ec <_svfiprintf_r+0x130>
 80038d2:	7863      	ldrb	r3, [r4, #1]
 80038d4:	2b2a      	cmp	r3, #42	; 0x2a
 80038d6:	d135      	bne.n	8003944 <_svfiprintf_r+0x188>
 80038d8:	9b03      	ldr	r3, [sp, #12]
 80038da:	3402      	adds	r4, #2
 80038dc:	1d1a      	adds	r2, r3, #4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	9203      	str	r2, [sp, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bfb8      	it	lt
 80038e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80038ea:	9305      	str	r3, [sp, #20]
 80038ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80039b8 <_svfiprintf_r+0x1fc>
 80038f0:	2203      	movs	r2, #3
 80038f2:	4650      	mov	r0, sl
 80038f4:	7821      	ldrb	r1, [r4, #0]
 80038f6:	f000 f9f7 	bl	8003ce8 <memchr>
 80038fa:	b140      	cbz	r0, 800390e <_svfiprintf_r+0x152>
 80038fc:	2340      	movs	r3, #64	; 0x40
 80038fe:	eba0 000a 	sub.w	r0, r0, sl
 8003902:	fa03 f000 	lsl.w	r0, r3, r0
 8003906:	9b04      	ldr	r3, [sp, #16]
 8003908:	3401      	adds	r4, #1
 800390a:	4303      	orrs	r3, r0
 800390c:	9304      	str	r3, [sp, #16]
 800390e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003912:	2206      	movs	r2, #6
 8003914:	4825      	ldr	r0, [pc, #148]	; (80039ac <_svfiprintf_r+0x1f0>)
 8003916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800391a:	f000 f9e5 	bl	8003ce8 <memchr>
 800391e:	2800      	cmp	r0, #0
 8003920:	d038      	beq.n	8003994 <_svfiprintf_r+0x1d8>
 8003922:	4b23      	ldr	r3, [pc, #140]	; (80039b0 <_svfiprintf_r+0x1f4>)
 8003924:	bb1b      	cbnz	r3, 800396e <_svfiprintf_r+0x1b2>
 8003926:	9b03      	ldr	r3, [sp, #12]
 8003928:	3307      	adds	r3, #7
 800392a:	f023 0307 	bic.w	r3, r3, #7
 800392e:	3308      	adds	r3, #8
 8003930:	9303      	str	r3, [sp, #12]
 8003932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003934:	4433      	add	r3, r6
 8003936:	9309      	str	r3, [sp, #36]	; 0x24
 8003938:	e767      	b.n	800380a <_svfiprintf_r+0x4e>
 800393a:	460c      	mov	r4, r1
 800393c:	2001      	movs	r0, #1
 800393e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003942:	e7a5      	b.n	8003890 <_svfiprintf_r+0xd4>
 8003944:	2300      	movs	r3, #0
 8003946:	f04f 0c0a 	mov.w	ip, #10
 800394a:	4619      	mov	r1, r3
 800394c:	3401      	adds	r4, #1
 800394e:	9305      	str	r3, [sp, #20]
 8003950:	4620      	mov	r0, r4
 8003952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003956:	3a30      	subs	r2, #48	; 0x30
 8003958:	2a09      	cmp	r2, #9
 800395a:	d903      	bls.n	8003964 <_svfiprintf_r+0x1a8>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0c5      	beq.n	80038ec <_svfiprintf_r+0x130>
 8003960:	9105      	str	r1, [sp, #20]
 8003962:	e7c3      	b.n	80038ec <_svfiprintf_r+0x130>
 8003964:	4604      	mov	r4, r0
 8003966:	2301      	movs	r3, #1
 8003968:	fb0c 2101 	mla	r1, ip, r1, r2
 800396c:	e7f0      	b.n	8003950 <_svfiprintf_r+0x194>
 800396e:	ab03      	add	r3, sp, #12
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	462a      	mov	r2, r5
 8003974:	4638      	mov	r0, r7
 8003976:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <_svfiprintf_r+0x1f8>)
 8003978:	a904      	add	r1, sp, #16
 800397a:	f3af 8000 	nop.w
 800397e:	1c42      	adds	r2, r0, #1
 8003980:	4606      	mov	r6, r0
 8003982:	d1d6      	bne.n	8003932 <_svfiprintf_r+0x176>
 8003984:	89ab      	ldrh	r3, [r5, #12]
 8003986:	065b      	lsls	r3, r3, #25
 8003988:	f53f af2c 	bmi.w	80037e4 <_svfiprintf_r+0x28>
 800398c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800398e:	b01d      	add	sp, #116	; 0x74
 8003990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003994:	ab03      	add	r3, sp, #12
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	462a      	mov	r2, r5
 800399a:	4638      	mov	r0, r7
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <_svfiprintf_r+0x1f8>)
 800399e:	a904      	add	r1, sp, #16
 80039a0:	f000 f87c 	bl	8003a9c <_printf_i>
 80039a4:	e7eb      	b.n	800397e <_svfiprintf_r+0x1c2>
 80039a6:	bf00      	nop
 80039a8:	08003fbe 	.word	0x08003fbe
 80039ac:	08003fc8 	.word	0x08003fc8
 80039b0:	00000000 	.word	0x00000000
 80039b4:	08003705 	.word	0x08003705
 80039b8:	08003fc4 	.word	0x08003fc4

080039bc <_printf_common>:
 80039bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039c0:	4616      	mov	r6, r2
 80039c2:	4699      	mov	r9, r3
 80039c4:	688a      	ldr	r2, [r1, #8]
 80039c6:	690b      	ldr	r3, [r1, #16]
 80039c8:	4607      	mov	r7, r0
 80039ca:	4293      	cmp	r3, r2
 80039cc:	bfb8      	it	lt
 80039ce:	4613      	movlt	r3, r2
 80039d0:	6033      	str	r3, [r6, #0]
 80039d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039d6:	460c      	mov	r4, r1
 80039d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039dc:	b10a      	cbz	r2, 80039e2 <_printf_common+0x26>
 80039de:	3301      	adds	r3, #1
 80039e0:	6033      	str	r3, [r6, #0]
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	0699      	lsls	r1, r3, #26
 80039e6:	bf42      	ittt	mi
 80039e8:	6833      	ldrmi	r3, [r6, #0]
 80039ea:	3302      	addmi	r3, #2
 80039ec:	6033      	strmi	r3, [r6, #0]
 80039ee:	6825      	ldr	r5, [r4, #0]
 80039f0:	f015 0506 	ands.w	r5, r5, #6
 80039f4:	d106      	bne.n	8003a04 <_printf_common+0x48>
 80039f6:	f104 0a19 	add.w	sl, r4, #25
 80039fa:	68e3      	ldr	r3, [r4, #12]
 80039fc:	6832      	ldr	r2, [r6, #0]
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	42ab      	cmp	r3, r5
 8003a02:	dc28      	bgt.n	8003a56 <_printf_common+0x9a>
 8003a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a08:	1e13      	subs	r3, r2, #0
 8003a0a:	6822      	ldr	r2, [r4, #0]
 8003a0c:	bf18      	it	ne
 8003a0e:	2301      	movne	r3, #1
 8003a10:	0692      	lsls	r2, r2, #26
 8003a12:	d42d      	bmi.n	8003a70 <_printf_common+0xb4>
 8003a14:	4649      	mov	r1, r9
 8003a16:	4638      	mov	r0, r7
 8003a18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a1c:	47c0      	blx	r8
 8003a1e:	3001      	adds	r0, #1
 8003a20:	d020      	beq.n	8003a64 <_printf_common+0xa8>
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	68e5      	ldr	r5, [r4, #12]
 8003a26:	f003 0306 	and.w	r3, r3, #6
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	bf18      	it	ne
 8003a2e:	2500      	movne	r5, #0
 8003a30:	6832      	ldr	r2, [r6, #0]
 8003a32:	f04f 0600 	mov.w	r6, #0
 8003a36:	68a3      	ldr	r3, [r4, #8]
 8003a38:	bf08      	it	eq
 8003a3a:	1aad      	subeq	r5, r5, r2
 8003a3c:	6922      	ldr	r2, [r4, #16]
 8003a3e:	bf08      	it	eq
 8003a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a44:	4293      	cmp	r3, r2
 8003a46:	bfc4      	itt	gt
 8003a48:	1a9b      	subgt	r3, r3, r2
 8003a4a:	18ed      	addgt	r5, r5, r3
 8003a4c:	341a      	adds	r4, #26
 8003a4e:	42b5      	cmp	r5, r6
 8003a50:	d11a      	bne.n	8003a88 <_printf_common+0xcc>
 8003a52:	2000      	movs	r0, #0
 8003a54:	e008      	b.n	8003a68 <_printf_common+0xac>
 8003a56:	2301      	movs	r3, #1
 8003a58:	4652      	mov	r2, sl
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	47c0      	blx	r8
 8003a60:	3001      	adds	r0, #1
 8003a62:	d103      	bne.n	8003a6c <_printf_common+0xb0>
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6c:	3501      	adds	r5, #1
 8003a6e:	e7c4      	b.n	80039fa <_printf_common+0x3e>
 8003a70:	2030      	movs	r0, #48	; 0x30
 8003a72:	18e1      	adds	r1, r4, r3
 8003a74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a7e:	4422      	add	r2, r4
 8003a80:	3302      	adds	r3, #2
 8003a82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a86:	e7c5      	b.n	8003a14 <_printf_common+0x58>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	4638      	mov	r0, r7
 8003a90:	47c0      	blx	r8
 8003a92:	3001      	adds	r0, #1
 8003a94:	d0e6      	beq.n	8003a64 <_printf_common+0xa8>
 8003a96:	3601      	adds	r6, #1
 8003a98:	e7d9      	b.n	8003a4e <_printf_common+0x92>
	...

08003a9c <_printf_i>:
 8003a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa0:	460c      	mov	r4, r1
 8003aa2:	7e27      	ldrb	r7, [r4, #24]
 8003aa4:	4691      	mov	r9, r2
 8003aa6:	2f78      	cmp	r7, #120	; 0x78
 8003aa8:	4680      	mov	r8, r0
 8003aaa:	469a      	mov	sl, r3
 8003aac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003aae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ab2:	d807      	bhi.n	8003ac4 <_printf_i+0x28>
 8003ab4:	2f62      	cmp	r7, #98	; 0x62
 8003ab6:	d80a      	bhi.n	8003ace <_printf_i+0x32>
 8003ab8:	2f00      	cmp	r7, #0
 8003aba:	f000 80d9 	beq.w	8003c70 <_printf_i+0x1d4>
 8003abe:	2f58      	cmp	r7, #88	; 0x58
 8003ac0:	f000 80a4 	beq.w	8003c0c <_printf_i+0x170>
 8003ac4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003acc:	e03a      	b.n	8003b44 <_printf_i+0xa8>
 8003ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ad2:	2b15      	cmp	r3, #21
 8003ad4:	d8f6      	bhi.n	8003ac4 <_printf_i+0x28>
 8003ad6:	a001      	add	r0, pc, #4	; (adr r0, 8003adc <_printf_i+0x40>)
 8003ad8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003adc:	08003b35 	.word	0x08003b35
 8003ae0:	08003b49 	.word	0x08003b49
 8003ae4:	08003ac5 	.word	0x08003ac5
 8003ae8:	08003ac5 	.word	0x08003ac5
 8003aec:	08003ac5 	.word	0x08003ac5
 8003af0:	08003ac5 	.word	0x08003ac5
 8003af4:	08003b49 	.word	0x08003b49
 8003af8:	08003ac5 	.word	0x08003ac5
 8003afc:	08003ac5 	.word	0x08003ac5
 8003b00:	08003ac5 	.word	0x08003ac5
 8003b04:	08003ac5 	.word	0x08003ac5
 8003b08:	08003c57 	.word	0x08003c57
 8003b0c:	08003b79 	.word	0x08003b79
 8003b10:	08003c39 	.word	0x08003c39
 8003b14:	08003ac5 	.word	0x08003ac5
 8003b18:	08003ac5 	.word	0x08003ac5
 8003b1c:	08003c79 	.word	0x08003c79
 8003b20:	08003ac5 	.word	0x08003ac5
 8003b24:	08003b79 	.word	0x08003b79
 8003b28:	08003ac5 	.word	0x08003ac5
 8003b2c:	08003ac5 	.word	0x08003ac5
 8003b30:	08003c41 	.word	0x08003c41
 8003b34:	680b      	ldr	r3, [r1, #0]
 8003b36:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b3a:	1d1a      	adds	r2, r3, #4
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	600a      	str	r2, [r1, #0]
 8003b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0a4      	b.n	8003c92 <_printf_i+0x1f6>
 8003b48:	6825      	ldr	r5, [r4, #0]
 8003b4a:	6808      	ldr	r0, [r1, #0]
 8003b4c:	062e      	lsls	r6, r5, #24
 8003b4e:	f100 0304 	add.w	r3, r0, #4
 8003b52:	d50a      	bpl.n	8003b6a <_printf_i+0xce>
 8003b54:	6805      	ldr	r5, [r0, #0]
 8003b56:	600b      	str	r3, [r1, #0]
 8003b58:	2d00      	cmp	r5, #0
 8003b5a:	da03      	bge.n	8003b64 <_printf_i+0xc8>
 8003b5c:	232d      	movs	r3, #45	; 0x2d
 8003b5e:	426d      	negs	r5, r5
 8003b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b64:	230a      	movs	r3, #10
 8003b66:	485e      	ldr	r0, [pc, #376]	; (8003ce0 <_printf_i+0x244>)
 8003b68:	e019      	b.n	8003b9e <_printf_i+0x102>
 8003b6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b6e:	6805      	ldr	r5, [r0, #0]
 8003b70:	600b      	str	r3, [r1, #0]
 8003b72:	bf18      	it	ne
 8003b74:	b22d      	sxthne	r5, r5
 8003b76:	e7ef      	b.n	8003b58 <_printf_i+0xbc>
 8003b78:	680b      	ldr	r3, [r1, #0]
 8003b7a:	6825      	ldr	r5, [r4, #0]
 8003b7c:	1d18      	adds	r0, r3, #4
 8003b7e:	6008      	str	r0, [r1, #0]
 8003b80:	0628      	lsls	r0, r5, #24
 8003b82:	d501      	bpl.n	8003b88 <_printf_i+0xec>
 8003b84:	681d      	ldr	r5, [r3, #0]
 8003b86:	e002      	b.n	8003b8e <_printf_i+0xf2>
 8003b88:	0669      	lsls	r1, r5, #25
 8003b8a:	d5fb      	bpl.n	8003b84 <_printf_i+0xe8>
 8003b8c:	881d      	ldrh	r5, [r3, #0]
 8003b8e:	2f6f      	cmp	r7, #111	; 0x6f
 8003b90:	bf0c      	ite	eq
 8003b92:	2308      	moveq	r3, #8
 8003b94:	230a      	movne	r3, #10
 8003b96:	4852      	ldr	r0, [pc, #328]	; (8003ce0 <_printf_i+0x244>)
 8003b98:	2100      	movs	r1, #0
 8003b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b9e:	6866      	ldr	r6, [r4, #4]
 8003ba0:	2e00      	cmp	r6, #0
 8003ba2:	bfa8      	it	ge
 8003ba4:	6821      	ldrge	r1, [r4, #0]
 8003ba6:	60a6      	str	r6, [r4, #8]
 8003ba8:	bfa4      	itt	ge
 8003baa:	f021 0104 	bicge.w	r1, r1, #4
 8003bae:	6021      	strge	r1, [r4, #0]
 8003bb0:	b90d      	cbnz	r5, 8003bb6 <_printf_i+0x11a>
 8003bb2:	2e00      	cmp	r6, #0
 8003bb4:	d04d      	beq.n	8003c52 <_printf_i+0x1b6>
 8003bb6:	4616      	mov	r6, r2
 8003bb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bbc:	fb03 5711 	mls	r7, r3, r1, r5
 8003bc0:	5dc7      	ldrb	r7, [r0, r7]
 8003bc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bc6:	462f      	mov	r7, r5
 8003bc8:	42bb      	cmp	r3, r7
 8003bca:	460d      	mov	r5, r1
 8003bcc:	d9f4      	bls.n	8003bb8 <_printf_i+0x11c>
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d10b      	bne.n	8003bea <_printf_i+0x14e>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	07df      	lsls	r7, r3, #31
 8003bd6:	d508      	bpl.n	8003bea <_printf_i+0x14e>
 8003bd8:	6923      	ldr	r3, [r4, #16]
 8003bda:	6861      	ldr	r1, [r4, #4]
 8003bdc:	4299      	cmp	r1, r3
 8003bde:	bfde      	ittt	le
 8003be0:	2330      	movle	r3, #48	; 0x30
 8003be2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003be6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bea:	1b92      	subs	r2, r2, r6
 8003bec:	6122      	str	r2, [r4, #16]
 8003bee:	464b      	mov	r3, r9
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	4640      	mov	r0, r8
 8003bf4:	f8cd a000 	str.w	sl, [sp]
 8003bf8:	aa03      	add	r2, sp, #12
 8003bfa:	f7ff fedf 	bl	80039bc <_printf_common>
 8003bfe:	3001      	adds	r0, #1
 8003c00:	d14c      	bne.n	8003c9c <_printf_i+0x200>
 8003c02:	f04f 30ff 	mov.w	r0, #4294967295
 8003c06:	b004      	add	sp, #16
 8003c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c0c:	4834      	ldr	r0, [pc, #208]	; (8003ce0 <_printf_i+0x244>)
 8003c0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c12:	680e      	ldr	r6, [r1, #0]
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c1a:	061f      	lsls	r7, r3, #24
 8003c1c:	600e      	str	r6, [r1, #0]
 8003c1e:	d514      	bpl.n	8003c4a <_printf_i+0x1ae>
 8003c20:	07d9      	lsls	r1, r3, #31
 8003c22:	bf44      	itt	mi
 8003c24:	f043 0320 	orrmi.w	r3, r3, #32
 8003c28:	6023      	strmi	r3, [r4, #0]
 8003c2a:	b91d      	cbnz	r5, 8003c34 <_printf_i+0x198>
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	f023 0320 	bic.w	r3, r3, #32
 8003c32:	6023      	str	r3, [r4, #0]
 8003c34:	2310      	movs	r3, #16
 8003c36:	e7af      	b.n	8003b98 <_printf_i+0xfc>
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	f043 0320 	orr.w	r3, r3, #32
 8003c3e:	6023      	str	r3, [r4, #0]
 8003c40:	2378      	movs	r3, #120	; 0x78
 8003c42:	4828      	ldr	r0, [pc, #160]	; (8003ce4 <_printf_i+0x248>)
 8003c44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c48:	e7e3      	b.n	8003c12 <_printf_i+0x176>
 8003c4a:	065e      	lsls	r6, r3, #25
 8003c4c:	bf48      	it	mi
 8003c4e:	b2ad      	uxthmi	r5, r5
 8003c50:	e7e6      	b.n	8003c20 <_printf_i+0x184>
 8003c52:	4616      	mov	r6, r2
 8003c54:	e7bb      	b.n	8003bce <_printf_i+0x132>
 8003c56:	680b      	ldr	r3, [r1, #0]
 8003c58:	6826      	ldr	r6, [r4, #0]
 8003c5a:	1d1d      	adds	r5, r3, #4
 8003c5c:	6960      	ldr	r0, [r4, #20]
 8003c5e:	600d      	str	r5, [r1, #0]
 8003c60:	0635      	lsls	r5, r6, #24
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	d501      	bpl.n	8003c6a <_printf_i+0x1ce>
 8003c66:	6018      	str	r0, [r3, #0]
 8003c68:	e002      	b.n	8003c70 <_printf_i+0x1d4>
 8003c6a:	0671      	lsls	r1, r6, #25
 8003c6c:	d5fb      	bpl.n	8003c66 <_printf_i+0x1ca>
 8003c6e:	8018      	strh	r0, [r3, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	4616      	mov	r6, r2
 8003c74:	6123      	str	r3, [r4, #16]
 8003c76:	e7ba      	b.n	8003bee <_printf_i+0x152>
 8003c78:	680b      	ldr	r3, [r1, #0]
 8003c7a:	1d1a      	adds	r2, r3, #4
 8003c7c:	600a      	str	r2, [r1, #0]
 8003c7e:	681e      	ldr	r6, [r3, #0]
 8003c80:	2100      	movs	r1, #0
 8003c82:	4630      	mov	r0, r6
 8003c84:	6862      	ldr	r2, [r4, #4]
 8003c86:	f000 f82f 	bl	8003ce8 <memchr>
 8003c8a:	b108      	cbz	r0, 8003c90 <_printf_i+0x1f4>
 8003c8c:	1b80      	subs	r0, r0, r6
 8003c8e:	6060      	str	r0, [r4, #4]
 8003c90:	6863      	ldr	r3, [r4, #4]
 8003c92:	6123      	str	r3, [r4, #16]
 8003c94:	2300      	movs	r3, #0
 8003c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c9a:	e7a8      	b.n	8003bee <_printf_i+0x152>
 8003c9c:	4632      	mov	r2, r6
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	6923      	ldr	r3, [r4, #16]
 8003ca4:	47d0      	blx	sl
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d0ab      	beq.n	8003c02 <_printf_i+0x166>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	079b      	lsls	r3, r3, #30
 8003cae:	d413      	bmi.n	8003cd8 <_printf_i+0x23c>
 8003cb0:	68e0      	ldr	r0, [r4, #12]
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	4298      	cmp	r0, r3
 8003cb6:	bfb8      	it	lt
 8003cb8:	4618      	movlt	r0, r3
 8003cba:	e7a4      	b.n	8003c06 <_printf_i+0x16a>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	47d0      	blx	sl
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	d09b      	beq.n	8003c02 <_printf_i+0x166>
 8003cca:	3501      	adds	r5, #1
 8003ccc:	68e3      	ldr	r3, [r4, #12]
 8003cce:	9903      	ldr	r1, [sp, #12]
 8003cd0:	1a5b      	subs	r3, r3, r1
 8003cd2:	42ab      	cmp	r3, r5
 8003cd4:	dcf2      	bgt.n	8003cbc <_printf_i+0x220>
 8003cd6:	e7eb      	b.n	8003cb0 <_printf_i+0x214>
 8003cd8:	2500      	movs	r5, #0
 8003cda:	f104 0619 	add.w	r6, r4, #25
 8003cde:	e7f5      	b.n	8003ccc <_printf_i+0x230>
 8003ce0:	08003fcf 	.word	0x08003fcf
 8003ce4:	08003fe0 	.word	0x08003fe0

08003ce8 <memchr>:
 8003ce8:	4603      	mov	r3, r0
 8003cea:	b510      	push	{r4, lr}
 8003cec:	b2c9      	uxtb	r1, r1
 8003cee:	4402      	add	r2, r0
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	d101      	bne.n	8003cfa <memchr+0x12>
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	e003      	b.n	8003d02 <memchr+0x1a>
 8003cfa:	7804      	ldrb	r4, [r0, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	428c      	cmp	r4, r1
 8003d00:	d1f6      	bne.n	8003cf0 <memchr+0x8>
 8003d02:	bd10      	pop	{r4, pc}

08003d04 <memcpy>:
 8003d04:	440a      	add	r2, r1
 8003d06:	4291      	cmp	r1, r2
 8003d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d0c:	d100      	bne.n	8003d10 <memcpy+0xc>
 8003d0e:	4770      	bx	lr
 8003d10:	b510      	push	{r4, lr}
 8003d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d16:	4291      	cmp	r1, r2
 8003d18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d1c:	d1f9      	bne.n	8003d12 <memcpy+0xe>
 8003d1e:	bd10      	pop	{r4, pc}

08003d20 <memmove>:
 8003d20:	4288      	cmp	r0, r1
 8003d22:	b510      	push	{r4, lr}
 8003d24:	eb01 0402 	add.w	r4, r1, r2
 8003d28:	d902      	bls.n	8003d30 <memmove+0x10>
 8003d2a:	4284      	cmp	r4, r0
 8003d2c:	4623      	mov	r3, r4
 8003d2e:	d807      	bhi.n	8003d40 <memmove+0x20>
 8003d30:	1e43      	subs	r3, r0, #1
 8003d32:	42a1      	cmp	r1, r4
 8003d34:	d008      	beq.n	8003d48 <memmove+0x28>
 8003d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d3e:	e7f8      	b.n	8003d32 <memmove+0x12>
 8003d40:	4601      	mov	r1, r0
 8003d42:	4402      	add	r2, r0
 8003d44:	428a      	cmp	r2, r1
 8003d46:	d100      	bne.n	8003d4a <memmove+0x2a>
 8003d48:	bd10      	pop	{r4, pc}
 8003d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d52:	e7f7      	b.n	8003d44 <memmove+0x24>

08003d54 <_free_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	4605      	mov	r5, r0
 8003d58:	2900      	cmp	r1, #0
 8003d5a:	d043      	beq.n	8003de4 <_free_r+0x90>
 8003d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d60:	1f0c      	subs	r4, r1, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bfb8      	it	lt
 8003d66:	18e4      	addlt	r4, r4, r3
 8003d68:	f000 f8d0 	bl	8003f0c <__malloc_lock>
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <_free_r+0x94>)
 8003d6e:	6813      	ldr	r3, [r2, #0]
 8003d70:	4610      	mov	r0, r2
 8003d72:	b933      	cbnz	r3, 8003d82 <_free_r+0x2e>
 8003d74:	6063      	str	r3, [r4, #4]
 8003d76:	6014      	str	r4, [r2, #0]
 8003d78:	4628      	mov	r0, r5
 8003d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d7e:	f000 b8cb 	b.w	8003f18 <__malloc_unlock>
 8003d82:	42a3      	cmp	r3, r4
 8003d84:	d90a      	bls.n	8003d9c <_free_r+0x48>
 8003d86:	6821      	ldr	r1, [r4, #0]
 8003d88:	1862      	adds	r2, r4, r1
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	bf01      	itttt	eq
 8003d8e:	681a      	ldreq	r2, [r3, #0]
 8003d90:	685b      	ldreq	r3, [r3, #4]
 8003d92:	1852      	addeq	r2, r2, r1
 8003d94:	6022      	streq	r2, [r4, #0]
 8003d96:	6063      	str	r3, [r4, #4]
 8003d98:	6004      	str	r4, [r0, #0]
 8003d9a:	e7ed      	b.n	8003d78 <_free_r+0x24>
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	b10b      	cbz	r3, 8003da6 <_free_r+0x52>
 8003da2:	42a3      	cmp	r3, r4
 8003da4:	d9fa      	bls.n	8003d9c <_free_r+0x48>
 8003da6:	6811      	ldr	r1, [r2, #0]
 8003da8:	1850      	adds	r0, r2, r1
 8003daa:	42a0      	cmp	r0, r4
 8003dac:	d10b      	bne.n	8003dc6 <_free_r+0x72>
 8003dae:	6820      	ldr	r0, [r4, #0]
 8003db0:	4401      	add	r1, r0
 8003db2:	1850      	adds	r0, r2, r1
 8003db4:	4283      	cmp	r3, r0
 8003db6:	6011      	str	r1, [r2, #0]
 8003db8:	d1de      	bne.n	8003d78 <_free_r+0x24>
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4401      	add	r1, r0
 8003dc0:	6011      	str	r1, [r2, #0]
 8003dc2:	6053      	str	r3, [r2, #4]
 8003dc4:	e7d8      	b.n	8003d78 <_free_r+0x24>
 8003dc6:	d902      	bls.n	8003dce <_free_r+0x7a>
 8003dc8:	230c      	movs	r3, #12
 8003dca:	602b      	str	r3, [r5, #0]
 8003dcc:	e7d4      	b.n	8003d78 <_free_r+0x24>
 8003dce:	6820      	ldr	r0, [r4, #0]
 8003dd0:	1821      	adds	r1, r4, r0
 8003dd2:	428b      	cmp	r3, r1
 8003dd4:	bf01      	itttt	eq
 8003dd6:	6819      	ldreq	r1, [r3, #0]
 8003dd8:	685b      	ldreq	r3, [r3, #4]
 8003dda:	1809      	addeq	r1, r1, r0
 8003ddc:	6021      	streq	r1, [r4, #0]
 8003dde:	6063      	str	r3, [r4, #4]
 8003de0:	6054      	str	r4, [r2, #4]
 8003de2:	e7c9      	b.n	8003d78 <_free_r+0x24>
 8003de4:	bd38      	pop	{r3, r4, r5, pc}
 8003de6:	bf00      	nop
 8003de8:	20000180 	.word	0x20000180

08003dec <_malloc_r>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	1ccd      	adds	r5, r1, #3
 8003df0:	f025 0503 	bic.w	r5, r5, #3
 8003df4:	3508      	adds	r5, #8
 8003df6:	2d0c      	cmp	r5, #12
 8003df8:	bf38      	it	cc
 8003dfa:	250c      	movcc	r5, #12
 8003dfc:	2d00      	cmp	r5, #0
 8003dfe:	4606      	mov	r6, r0
 8003e00:	db01      	blt.n	8003e06 <_malloc_r+0x1a>
 8003e02:	42a9      	cmp	r1, r5
 8003e04:	d903      	bls.n	8003e0e <_malloc_r+0x22>
 8003e06:	230c      	movs	r3, #12
 8003e08:	6033      	str	r3, [r6, #0]
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e0e:	f000 f87d 	bl	8003f0c <__malloc_lock>
 8003e12:	4921      	ldr	r1, [pc, #132]	; (8003e98 <_malloc_r+0xac>)
 8003e14:	680a      	ldr	r2, [r1, #0]
 8003e16:	4614      	mov	r4, r2
 8003e18:	b99c      	cbnz	r4, 8003e42 <_malloc_r+0x56>
 8003e1a:	4f20      	ldr	r7, [pc, #128]	; (8003e9c <_malloc_r+0xb0>)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	b923      	cbnz	r3, 8003e2a <_malloc_r+0x3e>
 8003e20:	4621      	mov	r1, r4
 8003e22:	4630      	mov	r0, r6
 8003e24:	f000 f862 	bl	8003eec <_sbrk_r>
 8003e28:	6038      	str	r0, [r7, #0]
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	f000 f85d 	bl	8003eec <_sbrk_r>
 8003e32:	1c43      	adds	r3, r0, #1
 8003e34:	d123      	bne.n	8003e7e <_malloc_r+0x92>
 8003e36:	230c      	movs	r3, #12
 8003e38:	4630      	mov	r0, r6
 8003e3a:	6033      	str	r3, [r6, #0]
 8003e3c:	f000 f86c 	bl	8003f18 <__malloc_unlock>
 8003e40:	e7e3      	b.n	8003e0a <_malloc_r+0x1e>
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	1b5b      	subs	r3, r3, r5
 8003e46:	d417      	bmi.n	8003e78 <_malloc_r+0x8c>
 8003e48:	2b0b      	cmp	r3, #11
 8003e4a:	d903      	bls.n	8003e54 <_malloc_r+0x68>
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	441c      	add	r4, r3
 8003e50:	6025      	str	r5, [r4, #0]
 8003e52:	e004      	b.n	8003e5e <_malloc_r+0x72>
 8003e54:	6863      	ldr	r3, [r4, #4]
 8003e56:	42a2      	cmp	r2, r4
 8003e58:	bf0c      	ite	eq
 8003e5a:	600b      	streq	r3, [r1, #0]
 8003e5c:	6053      	strne	r3, [r2, #4]
 8003e5e:	4630      	mov	r0, r6
 8003e60:	f000 f85a 	bl	8003f18 <__malloc_unlock>
 8003e64:	f104 000b 	add.w	r0, r4, #11
 8003e68:	1d23      	adds	r3, r4, #4
 8003e6a:	f020 0007 	bic.w	r0, r0, #7
 8003e6e:	1ac2      	subs	r2, r0, r3
 8003e70:	d0cc      	beq.n	8003e0c <_malloc_r+0x20>
 8003e72:	1a1b      	subs	r3, r3, r0
 8003e74:	50a3      	str	r3, [r4, r2]
 8003e76:	e7c9      	b.n	8003e0c <_malloc_r+0x20>
 8003e78:	4622      	mov	r2, r4
 8003e7a:	6864      	ldr	r4, [r4, #4]
 8003e7c:	e7cc      	b.n	8003e18 <_malloc_r+0x2c>
 8003e7e:	1cc4      	adds	r4, r0, #3
 8003e80:	f024 0403 	bic.w	r4, r4, #3
 8003e84:	42a0      	cmp	r0, r4
 8003e86:	d0e3      	beq.n	8003e50 <_malloc_r+0x64>
 8003e88:	1a21      	subs	r1, r4, r0
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f000 f82e 	bl	8003eec <_sbrk_r>
 8003e90:	3001      	adds	r0, #1
 8003e92:	d1dd      	bne.n	8003e50 <_malloc_r+0x64>
 8003e94:	e7cf      	b.n	8003e36 <_malloc_r+0x4a>
 8003e96:	bf00      	nop
 8003e98:	20000180 	.word	0x20000180
 8003e9c:	20000184 	.word	0x20000184

08003ea0 <_realloc_r>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	4607      	mov	r7, r0
 8003ea4:	4614      	mov	r4, r2
 8003ea6:	460e      	mov	r6, r1
 8003ea8:	b921      	cbnz	r1, 8003eb4 <_realloc_r+0x14>
 8003eaa:	4611      	mov	r1, r2
 8003eac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003eb0:	f7ff bf9c 	b.w	8003dec <_malloc_r>
 8003eb4:	b922      	cbnz	r2, 8003ec0 <_realloc_r+0x20>
 8003eb6:	f7ff ff4d 	bl	8003d54 <_free_r>
 8003eba:	4625      	mov	r5, r4
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ec0:	f000 f830 	bl	8003f24 <_malloc_usable_size_r>
 8003ec4:	42a0      	cmp	r0, r4
 8003ec6:	d20f      	bcs.n	8003ee8 <_realloc_r+0x48>
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4638      	mov	r0, r7
 8003ecc:	f7ff ff8e 	bl	8003dec <_malloc_r>
 8003ed0:	4605      	mov	r5, r0
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d0f2      	beq.n	8003ebc <_realloc_r+0x1c>
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	4622      	mov	r2, r4
 8003eda:	f7ff ff13 	bl	8003d04 <memcpy>
 8003ede:	4631      	mov	r1, r6
 8003ee0:	4638      	mov	r0, r7
 8003ee2:	f7ff ff37 	bl	8003d54 <_free_r>
 8003ee6:	e7e9      	b.n	8003ebc <_realloc_r+0x1c>
 8003ee8:	4635      	mov	r5, r6
 8003eea:	e7e7      	b.n	8003ebc <_realloc_r+0x1c>

08003eec <_sbrk_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	2300      	movs	r3, #0
 8003ef0:	4d05      	ldr	r5, [pc, #20]	; (8003f08 <_sbrk_r+0x1c>)
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	602b      	str	r3, [r5, #0]
 8003ef8:	f7fc ff90 	bl	8000e1c <_sbrk>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	d102      	bne.n	8003f06 <_sbrk_r+0x1a>
 8003f00:	682b      	ldr	r3, [r5, #0]
 8003f02:	b103      	cbz	r3, 8003f06 <_sbrk_r+0x1a>
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
 8003f08:	20000230 	.word	0x20000230

08003f0c <__malloc_lock>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <__malloc_lock+0x8>)
 8003f0e:	f000 b811 	b.w	8003f34 <__retarget_lock_acquire_recursive>
 8003f12:	bf00      	nop
 8003f14:	20000238 	.word	0x20000238

08003f18 <__malloc_unlock>:
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <__malloc_unlock+0x8>)
 8003f1a:	f000 b80c 	b.w	8003f36 <__retarget_lock_release_recursive>
 8003f1e:	bf00      	nop
 8003f20:	20000238 	.word	0x20000238

08003f24 <_malloc_usable_size_r>:
 8003f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f28:	1f18      	subs	r0, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	bfbc      	itt	lt
 8003f2e:	580b      	ldrlt	r3, [r1, r0]
 8003f30:	18c0      	addlt	r0, r0, r3
 8003f32:	4770      	bx	lr

08003f34 <__retarget_lock_acquire_recursive>:
 8003f34:	4770      	bx	lr

08003f36 <__retarget_lock_release_recursive>:
 8003f36:	4770      	bx	lr

08003f38 <_init>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr

08003f44 <_fini>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr
